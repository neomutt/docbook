<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>The Mutt E-Mail Client</title>
    <author>
      <firstname>Michael</firstname>
      <surname>Elkins</surname>
      <email>me@cs.hmc.edu</email>
    </author>
    <releaseinfo>version 20170714 (1.8.3)</releaseinfo>
    <abstract>
      <para>
      <quote>All mail clients suck. This one just sucks less.</quote>— me,
      circa 1995</para>
    </abstract>
  </bookinfo>

  <chapter id="guide/intro">
    <title>Introduction</title>
    <para>
    <emphasis role="bold">Mutt</emphasis> is a small but very powerful
    text-based MIME mail client. Mutt is highly configurable, and is well
    suited to the mail power user with advanced features like key bindings,
    keyboard macros, mail threading, regular expression searches and a powerful
    pattern matching language for selecting groups of messages.</para>

    <sect1 id="homepage">
      <title>NeoMutt Home Page</title>
      <para>The homepage can be found at
      <ulink url="https://www.neomutt.org/">https://www.neomutt.org/</ulink>.</para>
    </sect1>

    <sect1 id="mailinglists">
      <title>Mailing Lists</title>
      <itemizedlist>
        <listitem>
          <para>
            <email>neomutt-users@neomutt.org</email> — help, bug reports and
            feature requests. To subscribe to this list, please send a mail to
            <email>neomutt-users-request@neomutt.org</email> with the subject
            "subscribe".
          </para>
        </listitem>
        <listitem>
          <para>
            <email>neomutt-devel@neomutt.org</email> — development mailing list.
            To subscribe to this list, please send a mail to
            <email>neomutt-devel-request@neomutt.org</email> with the subject
            "subscribe".
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="irc">
      <title>NeoMutt Online Resources</title>
      <variablelist>
        <varlistentry>
          <term>Issue Tracking System</term>
          <listitem>
            <para>Bugs may be reported on the devel mailing list, or on GitHub:
            <ulink url="https://github.com/neomutt/neomutt/issues">https://github.com/neomutt/neomutt/issues</ulink></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>IRC</term>
          <listitem>
            <para>For the IRC user community, visit channel
            <emphasis>#neomutt</emphasis> on
            <ulink url="https://webchat.freenode.net">irc.freenode.net</ulink>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="contrib">
      <title>Contributing to Mutt</title>
      <para>There are various ways to contribute to the Mutt project.</para>
      <para>Especially for new users it may be helpful to meet other new and
      experienced users to chat about Mutt, talk about problems and share
      tricks.</para>
      <para>Since translations of Mutt into other languages are highly
      appreciated, the Mutt developers always look for skilled translators that
      help improve and continue to maintain stale translations.</para>
      <para>For contributing code patches for new features and bug fixes,
      please refer to the developer pages at
      <ulink url="https://www.neomutt.org/dev.html">https://www.neomutt.org/dev.html</ulink>
      for more details.</para>
    </sect1>

    <sect1 id="typo">
      <title>Typographical Conventions</title>
      <para>This section lists typographical conventions followed throughout
      this manual. See table
      <xref linkend="tab-typo" />for typographical conventions for special
      terms.</para>

      <table id="tab-typo">
        <title>Typographical conventions for special terms</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Item</entry>
              <entry>Refers to...</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>printf(3)</literal>
              </entry>
              <entry>UNIX manual pages, execute
              <literal>man 3 printf</literal></entry>
            </row>
            <row>
              <entry>
                <literal>&lt;PageUp&gt;</literal>
              </entry>
              <entry>named keys</entry>
            </row>
            <row>
              <entry>
                <literal>&lt;create-alias&gt;</literal>
              </entry>
              <entry>named Mutt function</entry>
            </row>
            <row>
              <entry>
                <literal>^G</literal>
              </entry>
              <entry>Control+G key combination</entry>
            </row>
            <row>
              <entry>$mail_check</entry>
              <entry>Mutt configuration option</entry>
            </row>
            <row>
              <entry>
                <literal>$HOME</literal>
              </entry>
              <entry>environment variable</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Examples are presented as:</para>
      <screen>mutt -v</screen>
      <para>Within command synopsis, curly brackets (
      <quote>{}</quote>) denote a set of options of which one is mandatory,
      square brackets (
      <quote>[]</quote>) denote optional arguments, three dots denote that the
      argument may be repeated arbitrary times.</para>
    </sect1>

    <sect1 id="copyright">
      <title>Copyright</title>
      <para>Mutt is Copyright © 1996-2016 Michael R. Elkins
      <email>me@mutt.org</email> and others.</para>
      <para>This program is free software; you can redistribute it and/or
      modify it under the terms of the GNU General Public License as published
      by the Free Software Foundation; either version 2 of the License, or (at
      your option) any later version.</para>
      <para>This program is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
      Public License for more details.</para>
      <para>You should have received a copy of the GNU General Public License
      along with this program; if not, write to the Free Software Foundation,
      Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</para>
    </sect1>
  </chapter>

  <chapter id="guide/gettingstarted">
    <title>Getting Started</title>
    <para>This section is intended as a brief overview of how to use Mutt.
    There are many other features which are described elsewhere in the manual.
    There is even more information available in the Mutt FAQ and various web
    pages. See the
    <ulink url="http://www.mutt.org/">Mutt homepage</ulink> for more
    details.</para>
    <para>The keybindings described in this section are the defaults as
    distributed. Your local system administrator may have altered the defaults
    for your site. You can always type
    <quote>?</quote>in any menu to display the current bindings.</para>
    <para>The first thing you need to do is invoke Mutt, simply by typing
    <literal>mutt</literal> at the command line. There are various command-line
    options, see either the Mutt man page or the
    <link linkend="commandline">reference</link>.</para>

    <sect1 id="core-concepts">
      <title>Core Concepts</title>
      <para>Mutt is a text-based application which interacts with users through
      different menus which are mostly line-/entry-based or page-based. A
      line-based menu is the so-called
      <quote>index</quote> menu (listing all messages of the currently opened
      folder) or the
      <quote>alias</quote> menu (allowing you to select recipients from a list).
      Examples for page-based menus are the
      <quote>pager</quote>(showing one message at a time) or the
      <quote>help</quote> menu listing all available key bindings.</para>
      <para>The user interface consists of a context sensitive help line at the
      top, the menu's contents followed by a context sensitive status line and
      finally the command line. The command line is used to display
      informational and error messages as well as for prompts and for entering
      interactive commands.</para>
      <para>Mutt is configured through variables which, if the user wants to
      permanently use a non-default value, are written to configuration files.
      Mutt supports a rich config file syntax to make even complex
      configuration files readable and commentable.</para>
      <para>Because Mutt allows for customizing almost all key bindings, there
      are so-called
      <quote>functions</quote> which can be executed manually (using the command
      line) or in macros. Macros allow the user to bind a sequence of commands
      to a single key or a short key sequence instead of repeating a sequence
      of actions over and over.</para>
      <para>Many commands (such as saving or copying a message to another
      folder) can be applied to a single message or a set of messages
      (so-called
      <quote>tagged</quote> messages). To help selecting messages, Mutt provides
      a rich set of message patterns (such as recipients, sender, body
      contents, date sent/received, etc.) which can be combined into complex
      expressions using the boolean
      <emphasis>and</emphasis> and
      <emphasis>or</emphasis> operations as well as negating. These patterns can
      also be used to (for example) search for messages or to limit the index
      to show only matching messages.</para>
      <para>Mutt supports a
      <quote>hook</quote> concept which allows the user to execute arbitrary
      configuration commands and functions in certain situations such as
      entering a folder, starting a new message or replying to an existing one.
      These hooks can be used to highly customize Mutt's behavior including
      managing multiple identities, customizing the display for a folder or
      even implementing auto-archiving based on a per-folder basis and much
      more.</para>
      <para>Besides an interactive mode, Mutt can also be used as a
      command-line tool only send messages. It also supports a
      <literal>mailx(1)</literal>-compatible interface, see
      <xref linkend="tab-commandline-options" />for a complete list of
      command-line options.</para>
    </sect1>

    <sect1 id="concept-screens-and-menus">
      <title>Screens and Menus</title>

      <sect2 id="intro-index">
        <title>Index</title>
        <para>The index is the screen that you usually see first when you start
        Mutt. It gives an overview over your emails in the currently opened
        mailbox. By default, this is your system mailbox. The information you
        see in the index is a list of emails, each with its number on the left,
        its flags (new email, important email, email that has been forwarded or
        replied to, tagged email, ...), the date when email was sent, its
        sender, the email size, and the subject. Additionally, the index also
        shows thread hierarchies: when you reply to an email, and the other
        person replies back, you can see the other person's email in a
        "sub-tree" below. This is especially useful for personal email between
        a group of people or when you've subscribed to mailing lists.</para>
      </sect2>

      <sect2 id="intro-pager">
        <title>Pager</title>
        <para>The pager is responsible for showing the email content. On the
        top of the pager you have an overview over the most important email
        headers like the sender, the recipient, the subject, and much more
        information. How much information you actually see depends on your
        configuration, which we'll describe below.</para>
        <para>Below the headers, you see the email body which usually contains
        the message. If the email contains any attachments, you will see more
        information about them below the email body, or, if the attachments are
        text files, you can view them directly in the pager.</para>
        <para>To give the user a good overview, it is possible to configure
        Mutt to show different things in the pager with different colors.
        Virtually everything that can be described with a regular expression
        can be colored, e.g. URLs, email addresses or smileys.</para>
      </sect2>

      <sect2 id="intro-browser">
        <title>File Browser</title>
        <para>The file browser is the interface to the local or remote file
        system. When selecting a mailbox to open, the browser allows custom
        sorting of items, limiting the items shown by a regular expression and
        a freely adjustable format of what to display in which way. It also
        allows for easy navigation through the file system when selecting
        file(s) to attach to a message, select multiple files to attach and
        many more.</para>
      </sect2>

      <sect2 id="intro-sidebar">
        <title>Sidebar</title>
        <para>The Sidebar shows a list of all your mailboxes. The list can be
        turned on and off, it can be themed and the list style can be
        configured.</para>
        <para>This part of the manual is suitable for beginners. If you already
        know Mutt you could skip ahead to the main
        <link linkend="feature/sidebar">Sidebar guide</link>. If you just want to get
        started, you could use the sample
        <link linkend="sidebar-muttrc">Sidebar muttrc</link>.</para>
        <para>To check if Mutt supports
        <quote>Sidebar</quote>, look for the string
        <literal>+sidebar</literal> in the mutt version.</para>
        <screen>mutt -v</screen>
        <para>
          <emphasis role="bold">Let's turn on the Sidebar:</emphasis>
        </para>
        <screen>
set sidebar_visible
set sidebar_format = "%B%?F? [%F]?%* %?N?%N/?%S"
set mail_check_stats
</screen>
        <para>You will see something like this. A list of mailboxes on the
        left. A list of emails, from the selected mailbox, on the right.</para>
        <screen>
<emphasis role="indicator">Fruit [1]     3/8</emphasis>|  1    + Jan 24  Rhys Lee         (192)  Yew
Animals [1]   2/6|  2    + Feb 11  Grace Hall       (167)  Ilama
Cars            4|  3      Feb 23  Aimee Scott      (450)  Nectarine
Seas          1/7|  4    ! Feb 28  Summer Jackson   (264)  Lemon
                 |  5      Mar 07  Callum Harrison  (464)  Raspberry
                 |<emphasis role="indicator">  6 N  + Mar 24  Samuel Harris    (353)  Tangerine          </emphasis>
                 |  7 N  + Sep 05  Sofia Graham     (335)  Cherry
                 |  8 N    Sep 16  Ewan Brown       (105)  Ugli
                 |
                 |
</screen>
        <para>This user has four mailboxes:
        <quote>Fruit</quote>,
        <quote>Cars</quote>,
        <quote>Animals</quote> and
        <quote>Seas</quote>.</para>
        <para>The current, open, mailbox is
        <quote>Fruit</quote>. We can also see information about the other
        mailboxes. For example: The
        <quote>Animals</quote> mailbox contains, 1 flagged email, 2 new emails
        out of a total of 6 emails.</para>

        <sect3 id="intro-sidebar-navigation">
          <title>Navigation</title>
          <para>The Sidebar adds some new
          <link linkend="sidebar-functions">functions</link> to Mutt.</para>
          <para>The user pressed the
          <quote>c</quote> key to
          <literal>&lt;change-folder&gt;</literal>to the
          <quote>Animals</quote> mailbox. The Sidebar automatically updated the
          indicator to match.</para>
          <screen>
Fruit [1]     3/8|  1      Jan 03  Tia Gibson       (362)  Caiman
<emphasis role="indicator">Animals [1]   2/6</emphasis>|  2    + Jan 22  Rhys Lee         ( 48)  Dolphin
Cars            4|  3    ! Aug 16  Ewan Brown       (333)  Hummingbird
Seas          1/7|  4      Sep 25  Grace Hall       ( 27)  Capybara
                 |<emphasis role="indicator">  5 N  + Nov 12  Evelyn Rogers    (453)  Tapir              </emphasis>
                 |  6 N  + Nov 16  Callum Harrison  (498)  Hedgehog
                 |
                 |
                 |
                 |
</screen>
          <para>Let's map some functions:</para>
          <screen>
bind index,pager \CP sidebar-prev       <emphasis role="comment"># Ctrl-Shift-P - Previous Mailbox</emphasis>
bind index,pager \CN sidebar-next       <emphasis role="comment"># Ctrl-Shift-N - Next Mailbox</emphasis>
bind index,pager \CO sidebar-open       <emphasis role="comment"># Ctrl-Shift-O - Open Highlighted Mailbox</emphasis>
</screen>
          <para>Press
          <quote>Ctrl-Shift-N</quote>(Next mailbox) twice will move the Sidebar
          <emphasis role="bold">highlight</emphasis> to down to the
          <quote>Seas</quote> mailbox.</para>
          <screen>
Fruit [1]     3/8|  1      Jan 03  Tia Gibson       (362)  Caiman
<emphasis role="indicator">Animals [1]   2/6</emphasis>|  2    + Jan 22  Rhys Lee         ( 48)  Dolphin
Cars            4|  3    ! Aug 16  Ewan Brown       (333)  Hummingbird
<emphasis role="highlight">Seas          1/7</emphasis>|  4      Sep 25  Grace Hall       ( 27)  Capybara
                 |<emphasis role="indicator">  5 N  + Nov 12  Evelyn Rogers    (453)  Tapir              </emphasis>
                 |  6 N  + Nov 16  Callum Harrison  (498)  Hedgehog
                 |
                 |
                 |
                 |
</screen>
          <note>
            <para>Functions
            <literal>&lt;sidebar-next&gt;</literal>and
            <literal>&lt;sidebar-prev&gt;</literal>move the Sidebar
            <emphasis role="bold">highlight</emphasis>. They
            <emphasis role="bold">do not</emphasis> change the open
            mailbox.</para>
          </note>
          <para>Press
          <quote>Ctrl-Shift-O</quote>(
          <literal>&lt;sidebar-open&gt;</literal>) to open the highlighted
          mailbox.</para>
          <screen>
Fruit [1]     3/8|  1    ! Mar 07  Finley Jones     (139)  Molucca Sea
Animals [1]   2/6|  2    + Mar 24  Summer Jackson   ( 25)  Arafura Sea
Cars            4|  3    + Feb 28  Imogen Baker     (193)  Pechora Sea
<emphasis role="indicator">Seas          1/7</emphasis>|<emphasis role="indicator">  4 N  + Feb 23  Isla Hussain     (348)  Balearic Sea       </emphasis>
                 |
                 |
                 |
                 |
                 |
                 |
</screen>
        </sect3>

        <sect3 id="intro-sidebar-features">
          <title>Features</title>
          <para>The Sidebar shows a list of mailboxes in a panel.</para>
          <para>Everything about the Sidebar can be configured.</para>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-basics">State of the Sidebar</link>
            </title>
            <listitem>
              <para>Visibility</para>
            </listitem>
            <listitem>
              <para>Width</para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-limit">Which mailboxes are
              displayed</link>
            </title>
            <listitem>
              <para>Display all</para>
            </listitem>
            <listitem>
              <para>Limit to mailboxes with new mail</para>
            </listitem>
            <listitem>
              <para>Whitelist mailboxes to display always</para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="sidebar-sort">The order in which mailboxes are
              displayed</link>
            </title>
            <listitem>
              <para>Unsorted (order of mailboxes commands)</para>
            </listitem>
            <listitem>
              <para>Sorted alphabetically</para>
            </listitem>
            <listitem>
              <para>Sorted by number of new mails</para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-colors">Color</link>
            </title>
            <listitem>
              <para>Sidebar indicators and divider</para>
            </listitem>
            <listitem>
              <para>Mailboxes depending on their type</para>
            </listitem>
            <listitem>
              <para>Mailboxes depending on their contents</para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="sidebar-functions">Key bindings</link>
            </title>
            <listitem>
              <para>Hide/Unhide the Sidebar</para>
            </listitem>
            <listitem>
              <para>Select previous/next mailbox</para>
            </listitem>
            <listitem>
              <para>Select previous/next mailbox with new mail</para>
            </listitem>
            <listitem>
              <para>Page up/down through a list of mailboxes</para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>Misc</title>
            <listitem>
              <para>
                <link linkend="intro-sidebar-format">Formatting string for
                mailbox</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-next-new-wrap">Wraparound
                searching</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="intro-sidebar-abbrev">Flexible mailbox
                abbreviations</link>
              </para>
            </listitem>
            <listitem>
              <para>Support for Unicode mailbox names (utf-8)</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="intro-sidebar-display">
          <title>Display</title>
          <para>Everything about the Sidebar can be configured.</para>
          <itemizedlist>
            <title>For a quick reference:</title>
            <listitem>
              <para>
                <link linkend="sidebar-variables">Sidebar variables to
                set</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-colors">Sidebar colors to apply</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-sort">Sidebar sort methods</link>
              </para>
            </listitem>
          </itemizedlist>

          <sect4 id="intro-sidebar-basics">
            <title>Sidebar Basics</title>
            <para>The most important variable is
            <literal>$sidebar_visible</literal>. You can set this in your
            <quote>muttrc</quote>, or bind a key to the function
            <literal>&lt;sidebar-toggle-visible&gt;</literal>.</para>
            <screen>
set sidebar_visible                         <emphasis role="comment"># Make the Sidebar visible by default</emphasis>
bind index,pager B sidebar-toggle-visible   <emphasis role="comment"># Use 'B' to switch the Sidebar on and off</emphasis>
</screen>
            <para>Next, decide how wide you want the Sidebar to be. 25
            characters might be enough for the mailbox name and some numbers.
            Remember, you can hide/show the Sidebar at the press of
            button.</para>
            <para>Finally, you might want to change the divider character. By
            default, Sidebar draws an ASCII line between it and the Index panel
            If your terminal supports it, you can use a Unicode line-drawing
            character.</para>
            <screen>
set sidebar_width = 25                  <emphasis role="comment"># Plenty of space</emphasis>
set sidebar_divider_char = '│'          <emphasis role="comment"># Pretty line-drawing character</emphasis>
</screen>
          </sect4>

          <sect4 id="intro-sidebar-format">
            <title>Sidebar Format String</title>
            <para>
            <literal>$sidebar_format</literal> allows you to customize the
            Sidebar display. For an introduction, read
            <link linkend="index-format">format strings</link> including the
            section about
            <link linkend="formatstrings-conditionals">
            conditionals</link>.</para>
            <para>The default value is:
            <literal>%B%* %n</literal></para>
            <para>A more detailed value is:
            <literal>%B%?F? [%F]?%* %?N?%N/?%S</literal></para>
            <itemizedlist>
              <title>Which breaks down as:</title>
              <listitem>
                <para>
                <literal>%B</literal>- Mailbox name</para>
              </listitem>
              <listitem>
                <para>
                <literal>%?F? [%F]?</literal>- If flagged emails
                <literal>[%F]</literal>, otherwise nothing</para>
              </listitem>
              <listitem>
                <para>
                <literal>%*</literal>- Pad with spaces</para>
              </listitem>
              <listitem>
                <para>
                <literal>%?N?%N/?</literal>- If new emails
                <literal>%N/</literal>, otherwise nothing</para>
              </listitem>
              <listitem>
                <para>
                <literal>%S</literal>- Total number of emails</para>
              </listitem>
            </itemizedlist>

            <table>
              <title>sidebar_format</title>
              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Format</entry>
                    <entry>Notes</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>%B</entry>
                    <entry></entry>
                    <entry>Name of the mailbox</entry>
                  </row>
                  <row>
                    <entry>%S</entry>
                    <entry>* †</entry>
                    <entry>Size of mailbox (total number of messages)</entry>
                  </row>
                  <row>
                    <entry>%F</entry>
                    <entry>* †</entry>
                    <entry>Number of Flagged messages in the mailbox</entry>
                  </row>
                  <row>
                    <entry>%N</entry>
                    <entry>* †</entry>
                    <entry>Number of New messages in the mailbox</entry>
                  </row>
                  <row>
                    <entry>%n</entry>
                    <entry>*</entry>
                    <entry>If there's new mail, display
                    <quote>N</quote>, otherwise nothing</entry>
                  </row>
                  <row>
                    <entry>%!</entry>
                    <entry></entry>
                    <entry>
                    <quote>!</quote>: one flagged message;
                    <quote>!!</quote>: two flagged messages;
                    <quote>n!</quote>: n flagged messages (for n &gt; 2).
                    Otherwise prints nothing.</entry>
                  </row>
                  <row>
                    <entry>%d</entry>
                    <entry>* ‡</entry>
                    <entry>Number of deleted messages</entry>
                  </row>
                  <row>
                    <entry>%L</entry>
                    <entry>* ‡</entry>
                    <entry>Number of messages after limiting</entry>
                  </row>
                  <row>
                    <entry>%t</entry>
                    <entry>* ‡</entry>
                    <entry>Number of tagged messages</entry>
                  </row>
                  <row>
                    <entry>%&gt;X</entry>
                    <entry></entry>
                    <entry>Right justify the rest of the string and pad with
                    <quote>X</quote></entry>
                  </row>
                  <row>
                    <entry>%|X</entry>
                    <entry></entry>
                    <entry>Pad to the end of the line with
                    <quote>X</quote></entry>
                  </row>
                  <row>
                    <entry>%*X</entry>
                    <entry></entry>
                    <entry>Soft-fill with character
                    <quote>X</quote> as pad</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>* = Can be optionally printed if nonzero</para>
            <para>† = To use this expandos, you must first:
            <screen>set mail_check_stats</screen></para>
            <para>‡ = Only applicable to the current folder</para>
            <para>Here are some examples. They show the number of (F)lagged,
            (N)ew and (S)ize.</para>

            <table>
              <title>sidebar_format</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Format</entry>
                    <entry>Example</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <literal>%B%?F? [%F]?%* %?N?%N/?%S</literal>
                    </entry>
                    <entry>
                      <screen>mailbox [F]            N/S</screen>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <literal>%B%* %F:%N:%S</literal>
                    </entry>
                    <entry>
                      <screen>mailbox              F:N:S</screen>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <literal>%B %?N?(%N)?%* %S</literal>
                    </entry>
                    <entry>
                      <screen>mailbox (N)              S</screen>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <literal>%B%* ?F?%F/?%N</literal>
                    </entry>
                    <entry>
                      <screen>mailbox                F/S</screen>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </sect4>

          <sect4 id="intro-sidebar-abbrev">
            <title>Abbreviating Mailbox Names</title>
            <para>
            <literal>$sidebar_delim_chars</literal> tells Sidebar how to split
            up mailbox paths. For local directories use
            <quote>/</quote>; for IMAP folders use
            <quote>.</quote></para>

            <sect5 id="intro-sidebar-abbrev-ex1">
              <title>Example 1</title>
              <para>This example works well if your mailboxes have unique names
              after the last separator.</para>
              <para>Add some mailboxes of different depths.</para>
              <screen>
set folder="~/mail"
mailboxes =fruit/apple          =fruit/banana          =fruit/cherry
mailboxes =water/sea/sicily     =water/sea/archipelago =water/sea/sibuyan
mailboxes =water/ocean/atlantic =water/ocean/pacific   =water/ocean/arctic
</screen>
              <para>Shorten the names:</para>
              <screen>
set sidebar_short_path                  <emphasis role="comment"># Shorten mailbox names</emphasis>
set sidebar_delim_chars="/"             <emphasis role="comment"># Delete everything up to the last / character</emphasis>
</screen>
              <para>The screenshot below shows what the Sidebar would look like
              before and after shortening.</para>
              <screen>
|fruit/apple                            |apple
|fruit/banana                           |banana
|fruit/cherry                           |cherry
|water/sea/sicily                       |sicily
|water/sea/archipelago                  |archipelago
|water/sea/sibuyan                      |sibuyan
|water/ocean/atlantic                   |atlantic
|water/ocean/pacific                    |pacific
|water/ocean/arctic                     |arctic
</screen>
            </sect5>

            <sect5 id="intro-sidebar-abbrev-ex2">
              <title>Example 2</title>
              <para>This example works well if you have lots of mailboxes which
              are arranged in a tree.</para>
              <para>Add some mailboxes of different depths.</para>
              <screen>
set folder="~/mail"
mailboxes =fruit
mailboxes =fruit/apple =fruit/banana =fruit/cherry
mailboxes =water
mailboxes =water/sea
mailboxes =water/sea/sicily =water/sea/archipelago =water/sea/sibuyan
mailboxes =water/ocean
mailboxes =water/ocean/atlantic =water/ocean/pacific =water/ocean/arctic
</screen>
              <para>Shorten the names:</para>
              <screen>
set sidebar_short_path                  <emphasis role="comment"># Shorten mailbox names</emphasis>
set sidebar_delim_chars="/"             <emphasis role="comment"># Delete everything up to the last / character</emphasis>
set sidebar_folder_indent               <emphasis role="comment"># Indent folders whose names we've shortened</emphasis>
set sidebar_indent_string="  "          <emphasis role="comment"># Indent with two spaces</emphasis>
</screen>
              <para>The screenshot below shows what the Sidebar would look like
              before and after shortening.</para>
              <screen>
|fruit                                  |fruit
|fruit/apple                            |  apple
|fruit/banana                           |  banana
|fruit/cherry                           |  cherry
|water                                  |water
|water/sea                              |  sea
|water/sea/sicily                       |    sicily
|water/sea/archipelago                  |    archipelago
|water/sea/sibuyan                      |    sibuyan
|water/ocean                            |  ocean
|water/ocean/atlantic                   |    atlantic
|water/ocean/pacific                    |    pacific
|water/ocean/arctic                     |    arctic
</screen>
              <para>Sometimes, it will be necessary to add mailboxes, that you
              don't use, to fill in part of the tree. This will trade vertical
              space for horizontal space (but it looks good).</para>
            </sect5>
          </sect4>

          <sect4 id="intro-sidebar-limit">
            <title>Limiting the Number of Mailboxes</title>
            <para>If you have a lot of mailboxes, sometimes it can be useful to
            hide the ones you aren't using.
            <literal>$sidebar_new_mail_only</literal> tells Sidebar to only show
            mailboxes that contain new, or flagged, email.</para>
            <para>If you want some mailboxes to be always visible, then use the
            <literal>sidebar_whitelist</literal> command. It takes a list of
            mailboxes as parameters.</para>
            <screen>
set sidebar_new_mail_only               <emphasis role="comment"># Only mailboxes with new/flagged email</emphasis>
sidebar_whitelist fruit fruit/apple     <emphasis role="comment"># Always display these two mailboxes</emphasis>
</screen>
          </sect4>
        </sect3>

        <sect3 id="intro-sidebar-colors">
          <title>Colors</title>
          <para>Here is a sample color scheme:</para>
          <screen>
color sidebar_indicator default color17         <emphasis role="comment"># Dark blue background</emphasis>
color sidebar_highlight white   color238        <emphasis role="comment"># Grey background</emphasis>
color sidebar_spoolfile yellow  default         <emphasis role="comment"># Yellow</emphasis>
color sidebar_new       green   default         <emphasis role="comment"># Green</emphasis>
color sidebar_ordinary  default default         <emphasis role="comment"># Default colors</emphasis>
color sidebar_flagged   red     default         <emphasis role="comment"># Red</emphasis>
color sidebar_divider   color8  default
          <emphasis role="comment"># Dark grey</emphasis>
</screen>
          <para>There is a priority order when coloring Sidebar mailboxes. e.g.
          If a mailbox has new mail it will have the
          <literal>sidebar_new</literal> color, even if it also contains flagged
          mails.</para>

          <table id="table-intro-sidebar-colors">
            <title>Sidebar Color Priority</title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Priority</entry>
                  <entry>Color</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Highest</entry>
                  <entry>
                    <literal>sidebar_indicator</literal>
                  </entry>
                  <entry>Mailbox is open</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>
                    <literal>sidebar_highlight</literal>
                  </entry>
                  <entry>Mailbox is highlighted</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>
                    <literal>sidebar_spoolfile</literal>
                  </entry>
                  <entry>Mailbox is the spoolfile (receives incoming
                  mail)</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>
                    <literal>sidebar_new</literal>
                  </entry>
                  <entry>Mailbox contains new mail</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>
                    <literal>sidebar_flagged</literal>
                  </entry>
                  <entry>Mailbox contains flagged mail</entry>
                </row>
                <row>
                  <entry>Lowest</entry>
                  <entry>
                    <literal>sidebar_ordinary</literal>
                  </entry>
                  <entry>Mailbox does not match above</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>

        <sect3 id="intro-sidebar-config-changes">
          <title>Config Changes</title>
          <para>If you haven't used Sidebar before, you can ignore this
          section.</para>
          <para>Some of the Sidebar config has been changed to make its meaning
          clearer. These changes have been made since the previous Sidebar
          release: 2015-11-11.</para>

          <table id="table-intro-sidebar-config-changes">
            <title>Config Changes</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Old Name</entry>
                  <entry>New Name</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>$sidebar_delim</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_divider_char</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>$sidebar_folderindent</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_folder_indent</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>$sidebar_indentstr</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_indent_string</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>$sidebar_newmail_only</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_new_mail_only</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>$sidebar_shortpath</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_short_path</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>$sidebar_sort</literal>
                  </entry>
                  <entry>
                    <literal>$sidebar_sort_method</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>&lt;sidebar-scroll-down&gt;</literal>
                  </entry>
                  <entry>
                    <literal>&lt;sidebar-page-down&gt;</literal>
                  </entry>
                </row>
                <row>
                  <entry>
                    <literal>&lt;sidebar-scroll-up&gt;</literal>
                  </entry>
                  <entry>
                    <literal>&lt;sidebar-page-up&gt;</literal>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>
      </sect2>

      <sect2 id="intro-help">
        <title>Help</title>
        <para>The help screen is meant to offer a quick help to the user. It
        lists the current configuration of key bindings and their associated
        commands including a short description, and currently unbound functions
        that still need to be associated with a key binding (or alternatively,
        they can be called via the Mutt command prompt).</para>
      </sect2>

      <sect2 id="intro-compose">
        <title>Compose Menu</title>
        <para>The compose menu features a split screen containing the
        information which really matter before actually sending a message by
        mail: who gets the message as what (recipients and who gets what kind
        of copy). Additionally, users may set security options like deciding
        whether to sign, encrypt or sign and encrypt a message with/for what
        keys. Also, it's used to attach messages, to re-edit any attachment
        including the message itself.</para>
      </sect2>

      <sect2 id="intro-alias">
        <title>Alias Menu</title>
        <para>The alias menu is used to help users finding the recipients of
        messages. For users who need to contact many people, there's no need to
        remember addresses or names completely because it allows for searching,
        too. The alias mechanism and thus the alias menu also features grouping
        several addresses by a shorter nickname, the actual alias, so that
        users don't have to select each single recipient manually.</para>
      </sect2>

      <sect2 id="intro-attach">
        <title>Attachment Menu</title>
        <para>As will be later discussed in detail, Mutt features a good and
        stable MIME implementation, that is, it supports sending and receiving
        messages of arbitrary MIME types. The attachment menu displays a
        message's structure in detail: what content parts are attached to which
        parent part (which gives a true tree structure), which type is of what
        type and what size. Single parts may saved, deleted or modified to
        offer great and easy access to message's internals.</para>
      </sect2>
    </sect1>

    <sect1 id="menus">
      <title>Moving Around in Menus</title>
      <para>The most important navigation keys common to line- or entry-based
      menus are shown in
      <xref linkend="tab-keys-nav-line" />and in
      <xref linkend="tab-keys-nav-page" />for page-based menus.</para>

      <table id="tab-keys-nav-line">
        <title>Most common navigation keys in entry-based menus</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>j or &lt;Down&gt;</entry>
              <entry>
                <literal>&lt;next-entry&gt;</literal>
              </entry>
              <entry>move to the next entry</entry>
            </row>
            <row>
              <entry>k or &lt;Up&gt;</entry>
              <entry>
                <literal>&lt;previous-entry&gt;</literal>
              </entry>
              <entry>move to the previous entry</entry>
            </row>
            <row>
              <entry>z or &lt;PageDn&gt;</entry>
              <entry>
                <literal>&lt;page-down&gt;</literal>
              </entry>
              <entry>go to the next page</entry>
            </row>
            <row>
              <entry>Z or &lt;PageUp&gt;</entry>
              <entry>
                <literal>&lt;page-up&gt;</literal>
              </entry>
              <entry>go to the previous page</entry>
            </row>
            <row>
              <entry>= or &lt;Home&gt;</entry>
              <entry>
                <literal>&lt;first-entry&gt;</literal>
              </entry>
              <entry>jump to the first entry</entry>
            </row>
            <row>
              <entry>* or &lt;End&gt;</entry>
              <entry>
                <literal>&lt;last-entry&gt;</literal>
              </entry>
              <entry>jump to the last entry</entry>
            </row>
            <row>
              <entry>q</entry>
              <entry>
                <literal>&lt;quit&gt;</literal>
              </entry>
              <entry>exit the current menu</entry>
            </row>
            <row>
              <entry>?</entry>
              <entry>
                <literal>&lt;help&gt;</literal>
              </entry>
              <entry>list all keybindings for the current menu</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table id="tab-keys-nav-page">
        <title>Most common navigation keys in page-based menus</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>J or &lt;Return&gt;</entry>
              <entry>
                <literal>&lt;next-line&gt;</literal>
              </entry>
              <entry>scroll down one line</entry>
            </row>
            <row>
              <entry>&lt;Backspace&gt;</entry>
              <entry>
                <literal>&lt;previous-line&gt;</literal>
              </entry>
              <entry>scroll up one line</entry>
            </row>
            <row>
              <entry>K, &lt;Space&gt; or &lt;PageDn&gt;</entry>
              <entry>
                <literal>&lt;next-page&gt;</literal>
              </entry>
              <entry>move to the next page</entry>
            </row>
            <row>
              <entry>- or &lt;PageUp&gt;</entry>
              <entry>
                <literal>&lt;previous-page&gt;</literal>
              </entry>
              <entry>move the previous page</entry>
            </row>
            <row>
              <entry>&lt;Home&gt;</entry>
              <entry>
                <literal>&lt;top&gt;</literal>
              </entry>
              <entry>move to the top</entry>
            </row>
            <row>
              <entry>&lt;End&gt;</entry>
              <entry>
                <literal>&lt;bottom&gt;</literal>
              </entry>
              <entry>move to the bottom</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="editing">
      <title>Editing Input Fields</title>

      <sect2 id="editing-intro">
        <title>Introduction</title>
        <para>Mutt has a built-in line editor for inputting text, e.g. email
        addresses or filenames. The keys used to manipulate text input are very
        similar to those of Emacs. See
        <xref linkend="tab-keys-editor" />for a full reference of available
        functions, their default key bindings, and short descriptions.</para>

        <table id="tab-keys-editor">
          <title>Most common line editor keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>^A or &lt;Home&gt;</entry>
                <entry>
                  <literal>&lt;bol&gt;</literal>
                </entry>
                <entry>move to the start of the line</entry>
              </row>
              <row>
                <entry>^B or &lt;Left&gt;</entry>
                <entry>
                  <literal>&lt;backward-char&gt;</literal>
                </entry>
                <entry>move back one char</entry>
              </row>
              <row>
                <entry>Esc B</entry>
                <entry>
                  <literal>&lt;backward-word&gt;</literal>
                </entry>
                <entry>move back one word</entry>
              </row>
              <row>
                <entry>^D or &lt;Delete&gt;</entry>
                <entry>
                  <literal>&lt;delete-char&gt;</literal>
                </entry>
                <entry>delete the char under the cursor</entry>
              </row>
              <row>
                <entry>^E or &lt;End&gt;</entry>
                <entry>
                  <literal>&lt;eol&gt;</literal>
                </entry>
                <entry>move to the end of the line</entry>
              </row>
              <row>
                <entry>^F or &lt;Right&gt;</entry>
                <entry>
                  <literal>&lt;forward-char&gt;</literal>
                </entry>
                <entry>move forward one char</entry>
              </row>
              <row>
                <entry>Esc F</entry>
                <entry>
                  <literal>&lt;forward-word&gt;</literal>
                </entry>
                <entry>move forward one word</entry>
              </row>
              <row>
                <entry>&lt;Tab&gt;</entry>
                <entry>
                  <literal>&lt;complete&gt;</literal>
                </entry>
                <entry>complete filename, alias, or label</entry>
              </row>
              <row>
                <entry>^T</entry>
                <entry>
                  <literal>&lt;complete-query&gt;</literal>
                </entry>
                <entry>complete address with query</entry>
              </row>
              <row>
                <entry>^K</entry>
                <entry>
                  <literal>&lt;kill-eol&gt;</literal>
                </entry>
                <entry>delete to the end of the line</entry>
              </row>
              <row>
                <entry>Esc d</entry>
                <entry>
                  <literal>&lt;kill-eow&gt;</literal>
                </entry>
                <entry>delete to the end of the word</entry>
              </row>
              <row>
                <entry>^W</entry>
                <entry>
                  <literal>&lt;kill-word&gt;</literal>
                </entry>
                <entry>kill the word in front of the cursor</entry>
              </row>
              <row>
                <entry>^U</entry>
                <entry>
                  <literal>&lt;kill-line&gt;</literal>
                </entry>
                <entry>delete entire line</entry>
              </row>
              <row>
                <entry>^V</entry>
                <entry>
                  <literal>&lt;quote-char&gt;</literal>
                </entry>
                <entry>quote the next typed key</entry>
              </row>
              <row>
                <entry>&lt;Up&gt;</entry>
                <entry>
                  <literal>&lt;history-up&gt;</literal>
                </entry>
                <entry>recall previous string from history</entry>
              </row>
              <row>
                <entry>&lt;Down&gt;</entry>
                <entry>
                  <literal>&lt;history-down&gt;</literal>
                </entry>
                <entry>recall next string from history</entry>
              </row>
              <row>
                <entry>&lt;BackSpace&gt;</entry>
                <entry>
                  <literal>&lt;backspace&gt;</literal>
                </entry>
                <entry>kill the char in front of the cursor</entry>
              </row>
              <row>
                <entry>Esc u</entry>
                <entry>
                  <literal>&lt;upcase-word&gt;</literal>
                </entry>
                <entry>convert word to upper case</entry>
              </row>
              <row>
                <entry>Esc l</entry>
                <entry>
                  <literal>&lt;downcase-word&gt;</literal>
                </entry>
                <entry>convert word to lower case</entry>
              </row>
              <row>
                <entry>Esc c</entry>
                <entry>
                  <literal>&lt;capitalize-word&gt;</literal>
                </entry>
                <entry>capitalize the word</entry>
              </row>
              <row>
                <entry>^G</entry>
                <entry>n/a</entry>
                <entry>abort</entry>
              </row>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>n/a</entry>
                <entry>finish editing</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>You can remap the
        <emphasis>editor</emphasis> functions using the
        <link linkend="bind">
          <command>bind</command>
        </link>command. For example, to make the &lt;Delete&gt; key delete the
        character in front of the cursor rather than under, you could
        use:</para>
        <screen>bind editor &lt;delete&gt; backspace</screen>
      </sect2>

      <sect2 id="editing-history">
        <title>History</title>
        <para>Mutt maintains a history for the built-in editor. The number of
        items is controlled by the
        <link linkend="history">$history</link> variable and can be made
        persistent using an external file specified using
        <link linkend="history-file">$history_file</link> and
        <link linkend="save-history">$save_history</link>. You may cycle
        through them at an editor prompt by using the
        <literal>&lt;history-up&gt;</literal>and/or
        <literal>&lt;history-down&gt;</literal>commands. Mutt will remember the
        currently entered text as you cycle through history, and will wrap
        around to the initial entry line.</para>
        <para>Mutt maintains several distinct history lists, one for each of
        the following categories:</para>
        <itemizedlist>
          <listitem>
            <para>
            <literal>.muttrc</literal> commands</para>
          </listitem>
          <listitem>
            <para>addresses and aliases</para>
          </listitem>
          <listitem>
            <para>shell commands</para>
          </listitem>
          <listitem>
            <para>filenames</para>
          </listitem>
          <listitem>
            <para>patterns</para>
          </listitem>
          <listitem>
            <para>everything else</para>
          </listitem>
        </itemizedlist>
        <para>Mutt automatically filters out consecutively repeated items from
        the history. If
        <link linkend="history-remove-dups">$history_remove_dups</link> is set,
        all repeated items are removed from the history. It also mimics the
        behavior of some shells by ignoring items starting with a space. The
        latter feature can be useful in macros to not clobber the history's
        valuable entries with unwanted entries.</para>
      </sect2>
    </sect1>

    <sect1 id="reading">
      <title>Reading Mail</title>
      <para>Similar to many other mail clients, there are two modes in which
      mail is read in Mutt. The first is a list of messages in the mailbox,
      which is called the
      <quote>index</quote> menu in Mutt. The second mode is the display of the
      message contents. This is called the
      <quote>pager.</quote></para>
      <para>The next few sections describe the functions provided in each of
      these modes.</para>

      <sect2 id="index-menu">
        <title>The Message Index</title>
        <para>Common keys used to navigate through and manage messages in the
        index are shown in
        <xref linkend="tab-key-index" />. How messages are presented in the
        index menu can be customized using the
        <link linkend="index-format">$index_format</link> variable.</para>

        <table id="tab-key-index">
          <title>Most common message index keys</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>c</entry>
                <entry>change to a different mailbox</entry>
              </row>
              <row>
                <entry>Esc c</entry>
                <entry>change to a folder in read-only mode</entry>
              </row>
              <row>
                <entry>C</entry>
                <entry>copy the current message to another mailbox</entry>
              </row>
              <row>
                <entry>Esc C</entry>
                <entry>decode a message and copy it to a folder</entry>
              </row>
              <row>
                <entry>Esc s</entry>
                <entry>decode a message and save it to a folder</entry>
              </row>
              <row>
                <entry>D</entry>
                <entry>delete messages matching a pattern</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>delete the current message</entry>
              </row>
              <row>
                <entry>F</entry>
                <entry>mark as important</entry>
              </row>
              <row>
                <entry>l</entry>
                <entry>show messages matching a pattern</entry>
              </row>
              <row>
                <entry>N</entry>
                <entry>mark message as new</entry>
              </row>
              <row>
                <entry>o</entry>
                <entry>change the current sort method</entry>
              </row>
              <row>
                <entry>O</entry>
                <entry>reverse sort the mailbox</entry>
              </row>
              <row>
                <entry>q</entry>
                <entry>save changes and exit</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry>save-message</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>tag messages matching a pattern</entry>
              </row>
              <row>
                <entry>t</entry>
                <entry>toggle the tag on a message</entry>
              </row>
              <row>
                <entry>Esc t</entry>
                <entry>toggle tag on entire message thread</entry>
              </row>
              <row>
                <entry>U</entry>
                <entry>undelete messages matching a pattern</entry>
              </row>
              <row>
                <entry>u</entry>
                <entry>undelete-message</entry>
              </row>
              <row>
                <entry>v</entry>
                <entry>view-attachments</entry>
              </row>
              <row>
                <entry>x</entry>
                <entry>abort changes and exit</entry>
              </row>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>display-message</entry>
              </row>
              <row>
                <entry>&lt;Tab&gt;</entry>
                <entry>jump to the next new or unread message</entry>
              </row>
              <row>
                <entry>@</entry>
                <entry>show the author's full e-mail address</entry>
              </row>
              <row>
                <entry>$</entry>
                <entry>save changes to mailbox</entry>
              </row>
              <row>
                <entry>/</entry>
                <entry>search</entry>
              </row>
              <row>
                <entry>Esc /</entry>
                <entry>search-reverse</entry>
              </row>
              <row>
                <entry>^L</entry>
                <entry>clear and redraw the screen</entry>
              </row>
              <row>
                <entry>^T</entry>
                <entry>untag messages matching a pattern</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>In addition to who sent the message and the subject, a short
        summary of the disposition of each message is printed beside the
        message number. Zero or more of the
        <quote>flags</quote> in
        <xref linkend="tab-msg-status-flags" />may appear, some of which can be
        turned on or off using these functions:
        <literal>&lt;set-flag&gt;</literal>and
        <literal>&lt;clear-flag&gt;</literal>bound by default to
        <quote>w</quote> and
        <quote>W</quote> respectively.</para>
        <para>Furthermore, the flags in
        <xref linkend="tab-msg-recip-flags" />reflect who the message is
        addressed to. They can be customized with the
        <link linkend="to-chars">$to_chars</link> variable.</para>

        <table id="tab-msg-status-flags">
          <title>Message status flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>D</entry>
                <entry>message is deleted (is marked for deletion)</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>message has attachments marked for deletion</entry>
              </row>
              <row>
                <entry>K</entry>
                <entry>contains a PGP public key</entry>
              </row>
              <row>
                <entry>N</entry>
                <entry>message is new</entry>
              </row>
              <row>
                <entry>O</entry>
                <entry>message is old</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry>message is PGP encrypted</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry>message has been replied to</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry>message is signed, and the signature is successfully
                verified</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry>message is signed</entry>
              </row>
              <row>
                <entry>!</entry>
                <entry>message is flagged</entry>
              </row>
              <row>
                <entry>*</entry>
                <entry>message is tagged</entry>
              </row>
              <row>
                <entry>n</entry>
                <entry>thread contains new messages (only if collapsed)</entry>
              </row>
              <row>
                <entry>o</entry>
                <entry>thread contains old messages (only if collapsed)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="tab-msg-recip-flags">
          <title>Message recipient flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>+</entry>
                <entry>message is to you and you only</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>message is to you, but also to or CC'ed to
                others</entry>
              </row>
              <row>
                <entry>C</entry>
                <entry>message is CC'ed to you</entry>
              </row>
              <row>
                <entry>F</entry>
                <entry>message is from you</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry>message is sent to a subscribed mailing list</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="pager-menu">
        <title>The Pager</title>
        <para>By default, Mutt uses its built-in pager to display the contents
        of messages (an external pager such as
        <literal>less(1)</literal>can be configured, see
        <link linkend="pager">$pager</link> variable). The pager is very similar
        to the Unix program
        <literal>less(1)</literal>though not nearly as featureful.</para>

        <table id="tab-key-pager">
          <title>Most common pager keys</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>go down one line</entry>
              </row>
              <row>
                <entry>&lt;Space&gt;</entry>
                <entry>display the next page (or next message if at the end of
                a message)</entry>
              </row>
              <row>
                <entry>-</entry>
                <entry>go back to the previous page</entry>
              </row>
              <row>
                <entry>n</entry>
                <entry>search for next match</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry>skip beyond quoted text</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>toggle display of quoted text</entry>
              </row>
              <row>
                <entry>?</entry>
                <entry>show keybindings</entry>
              </row>
              <row>
                <entry>/</entry>
                <entry>regular expression search</entry>
              </row>
              <row>
                <entry>Esc /</entry>
                <entry>backward regular expression search</entry>
              </row>
              <row>
                <entry>\</entry>
                <entry>toggle highlighting of search matches</entry>
              </row>
              <row>
                <entry>^</entry>
                <entry>jump to the top of the message</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>In addition to key bindings in
        <xref linkend="tab-key-pager" />, many of the functions from the index
        menu are also available in the pager, such as
        <literal>&lt;delete-message&gt;</literal>or
        <literal>&lt;copy-message&gt;</literal>(this is one advantage over
        using an external pager to view messages).</para>
        <para>Also, the internal pager supports a couple other advanced
        features. For one, it will accept and translate the
        <quote>standard</quote> nroff sequences for bold and underline. These
        sequences are a series of either the letter, backspace (
        <quote>^H</quote>), the letter again for bold or the letter, backspace,
        <quote>_</quote> for denoting underline. Mutt will attempt to display
        these in bold and underline respectively if your terminal supports
        them. If not, you can use the bold and underline
        <link linkend="color">color</link> objects to specify a
        <command>color</command> or mono attribute for them.</para>
        <para>Additionally, the internal pager supports the ANSI escape
        sequences for character attributes. Mutt translates them into the
        correct color and character settings. The sequences Mutt supports
        are:</para>
        <screen>\e[
        <emphasis>Ps</emphasis>;
        <emphasis>Ps</emphasis>;..
        <emphasis>Ps</emphasis>;m</screen>
        <para>where
        <emphasis>Ps</emphasis> can be one of the codes shown in
        <xref linkend="tab-ansi-esc" />.</para>

        <table id="tab-ansi-esc">
          <title>ANSI escape sequences</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Escape code</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>0</entry>
                <entry>All attributes off</entry>
              </row>
              <row>
                <entry>1</entry>
                <entry>Bold on</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>Underline on</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>Blink on</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>Reverse video on</entry>
              </row>
              <row>
                <entry>3
                <emphasis>&lt;color&gt;</emphasis></entry>
                <entry>Foreground color is
                <emphasis>&lt;color&gt;</emphasis>(see
                <xref linkend="tab-color" />)</entry>
              </row>
              <row>
                <entry>4
                <emphasis>&lt;color&gt;</emphasis></entry>
                <entry>Background color is
                <emphasis>&lt;color&gt;</emphasis>(see
                <xref linkend="tab-color" />)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="tab-color">
          <title>Color sequences</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Color code</entry>
                <entry>Color</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>0</entry>
                <entry>Black</entry>
              </row>
              <row>
                <entry>1</entry>
                <entry>Red</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>Green</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>Yellow</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>Blue</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>Magenta</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>Cyan</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>White</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Mutt uses these attributes for handling
        <literal>text/enriched</literal> messages, and they can also be used by
        an external
        <link linkend="auto-view">autoview</link> script for highlighting
        purposes.</para>
        <note>
          <para>If you change the colors for your display, for example by
          changing the color associated with color2 for your xterm, then that
          color will be used instead of green.</para>
        </note>
        <note>
          <para>Note that the search commands in the pager take regular
          expressions, which are not quite the same as the more complex
          <link linkend="patterns">patterns</link> used by the search command in
          the index. This is because patterns are used to select messages by
          criteria whereas the pager already displays a selected
          message.</para>
        </note>
      </sect2>

      <sect2 id="threads">
        <title>Threaded Mode</title>
        <para>So-called
        <quote>threads</quote> provide a hierarchy of messages where replies are
        linked to their parent message(s). This organizational form is
        extremely useful in mailing lists where different parts of the
        discussion diverge. Mutt displays threads as a tree structure.</para>
        <para>In Mutt, when a mailbox is
        <link linkend="sort">sorted</link> by
        <emphasis>threads</emphasis>, there are a few additional functions
        available in the
        <emphasis>index</emphasis> and
        <emphasis>pager</emphasis> modes as shown in
        <xref linkend="tab-key-threads" />.</para>

        <table id="tab-key-threads">
          <title>Most common thread mode keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>^D</entry>
                <entry>
                  <literal>&lt;delete-thread&gt;</literal>
                </entry>
                <entry>delete all messages in the current thread</entry>
              </row>
              <row>
                <entry>^U</entry>
                <entry>
                  <literal>&lt;undelete-thread&gt;</literal>
                </entry>
                <entry>undelete all messages in the current thread</entry>
              </row>
              <row>
                <entry>^N</entry>
                <entry>
                  <literal>&lt;next-thread&gt;</literal>
                </entry>
                <entry>jump to the start of the next thread</entry>
              </row>
              <row>
                <entry>^P</entry>
                <entry>
                  <literal>&lt;previous-thread&gt;</literal>
                </entry>
                <entry>jump to the start of the previous thread</entry>
              </row>
              <row>
                <entry>^R</entry>
                <entry>
                  <literal>&lt;read-thread&gt;</literal>
                </entry>
                <entry>mark the current thread as read</entry>
              </row>
              <row>
                <entry>Esc d</entry>
                <entry>
                  <literal>&lt;delete-subthread&gt;</literal>
                </entry>
                <entry>delete all messages in the current subthread</entry>
              </row>
              <row>
                <entry>Esc u</entry>
                <entry>
                  <literal>&lt;undelete-subthread&gt;</literal>
                </entry>
                <entry>undelete all messages in the current subthread</entry>
              </row>
              <row>
                <entry>Esc n</entry>
                <entry>
                  <literal>&lt;next-subthread&gt;</literal>
                </entry>
                <entry>jump to the start of the next subthread</entry>
              </row>
              <row>
                <entry>Esc p</entry>
                <entry>
                  <literal>&lt;previous-subthread&gt;</literal>
                </entry>
                <entry>jump to the start of the previous subthread</entry>
              </row>
              <row>
                <entry>Esc r</entry>
                <entry>
                  <literal>&lt;read-subthread&gt;</literal>
                </entry>
                <entry>mark the current subthread as read</entry>
              </row>
              <row>
                <entry>Esc t</entry>
                <entry>
                  <literal>&lt;tag-thread&gt;</literal>
                </entry>
                <entry>toggle the tag on the current thread</entry>
              </row>
              <row>
                <entry>Esc v</entry>
                <entry>
                  <literal>&lt;collapse-thread&gt;</literal>
                </entry>
                <entry>toggle collapse for the current thread</entry>
              </row>
              <row>
                <entry>Esc V</entry>
                <entry>
                  <literal>&lt;collapse-all&gt;</literal>
                </entry>
                <entry>toggle collapse for all threads</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry>
                  <literal>&lt;parent-message&gt;</literal>
                </entry>
                <entry>jump to parent message in thread</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Collapsing a thread displays only the first message in the thread
        and hides the others. This is useful when threads contain so many
        messages that you can only see a handful of threads on the screen. See
        %M in
        <link linkend="index-format">$index_format</link>. For example, you
        could use
        <quote>%?M?(#%03M)&amp;(%4l)?</quote>in
        <link linkend="index-format">$index_format</link> to optionally display
        the number of hidden messages if the thread is collapsed. The
        <literal>
        %?&lt;char&gt;?&lt;if-part&gt;&amp;&lt;else-part&gt;?</literal>syntax
        is explained in detail in
        <link linkend="formatstrings-conditionals">format string
        conditionals</link>.</para>
        <para>Technically, every reply should contain a list of its parent
        messages in the thread tree, but not all do. In these cases, Mutt
        groups them by subject which can be controlled using the
        <link linkend="strict-threads">$strict_threads</link> variable.</para>
      </sect2>

      <sect2 id="reading-misc">
        <title>Miscellaneous Functions</title>
        <para>In addition, the
        <emphasis>index</emphasis> and
        <emphasis>pager</emphasis> menus have these interesting
        functions:</para>
        <variablelist>
          <varlistentry>
            <term>
            <literal>&lt;create-alias&gt;</literal>
            <anchor id="create-alias" />(default: a)</term>
            <listitem>
              <para>Creates a new alias based upon the current message (or
              prompts for a new one). Once editing is complete, an
              <link linkend="alias">
                <command>alias</command>
              </link>command is added to the file specified by the
              <link linkend="alias-file">$alias_file</link> variable for future
              use</para>
              <note>
                <para>Mutt does not read the
                <link linkend="alias-file">$alias_file</link> upon startup so
                you must explicitly
                <link linkend="source">
                  <command>source</command>
                </link>the file.</para>
              </note>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;check-traditional-pgp&gt;</literal>
            <anchor id="check-traditional-pgp" />(default: Esc P)</term>
            <listitem>
              <para>This function will search the current message for content
              signed or encrypted with PGP the
              <quote>traditional</quote> way, that is, without proper MIME
              tagging. Technically, this function will temporarily change the
              MIME content types of the body parts containing PGP data; this is
              similar to the
              <link linkend="edit-type">
                <literal>&lt;edit-type&gt;</literal>
              </link>function's effect.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;edit&gt;</literal>
            <anchor id="edit" />(default: e)</term>
            <listitem>
              <para>This command (available in the index and pager) allows you
              to edit the raw current message as it's present in the mail
              folder. After you have finished editing, the changed message will
              be appended to the current folder, and the original message will
              be marked for deletion; if the message is unchanged it won't be
              replaced.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;edit-type&gt;</literal>
            <anchor id="edit-type" />(default: ^E on the attachment menu, and
            in the pager and index menus; ^T on the compose menu)</term>
            <listitem>
              <para>This command is used to temporarily edit an attachment's
              content type to fix, for instance, bogus character set
              parameters. When invoked from the index or from the pager, you'll
              have the opportunity to edit the top-level attachment's content
              type. On the
              <link linkend="attach-menu">attachment menu</link>, you can
              change any attachment's content type. These changes are not
              persistent, and get lost upon changing folders.</para>
              <para>Note that this command is also available on the
              <link linkend="compose-menu">compose menu</link>. There, it's
              used to fine-tune the properties of attachments you are going to
              send.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;enter-command&gt;</literal>
            <anchor id="enter-command" />(default:
            <quote>:</quote>)</term>
            <listitem>
              <para>This command is used to execute any command you would
              normally put in a configuration file. A common use is to check
              the settings of variables, or in conjunction with
              <link linkend="macro">macros</link> to change settings on the
              fly.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;extract-keys&gt;</literal>
            <anchor id="extract-keys" />(default: ^K)</term>
            <listitem>
              <para>This command extracts PGP public keys from the current or
              tagged message(s) and adds them to your PGP public key
              ring.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;forget-passphrase&gt;</literal>
            <anchor id="forget-passphrase" />(default: ^F)</term>
            <listitem>
              <para>This command wipes the passphrase(s) from memory. It is
              useful, if you misspelled the passphrase.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;list-reply&gt;</literal>
            <anchor id="list-reply" />(default: L)</term>
            <listitem>
              <para>Reply to the current or tagged message(s) by extracting any
              addresses which match the regular expressions given by the
              <link linkend="lists">
              <command>lists</command> or
              <command>subscribe</command></link>commands, but also honor any
              <literal>Mail-Followup-To</literal> header(s) if the
              <link linkend="honor-followup-to">
              $honor_followup_to</link> configuration variable is set. In
              addition, the
              <literal>List-Post</literal> header field is examined for
              <literal>mailto:</literal>URLs specifying a mailing list address.
              Using this when replying to messages posted to mailing lists
              helps avoid duplicate copies being sent to the author of the
              message you are replying to.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;pipe-message&gt;</literal>
            <anchor id="pipe-message" />(default: |)</term>
            <listitem>
              <para>Asks for an external Unix command and pipes the current or
              tagged message(s) to it. The variables
              <link linkend="pipe-decode">$pipe_decode</link>,
              <link linkend="pipe-split">$pipe_split</link>,
              <link linkend="pipe-sep">$pipe_sep</link> and
              <link linkend="wait-key">$wait_key</link> control the exact
              behavior of this function.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;resend-message&gt;</literal>
            <anchor id="resend-message" />(default: Esc e)</term>
            <listitem>
              <para>Mutt takes the current message as a template for a new
              message. This function is best described as "recall from
              arbitrary folders". It can conveniently be used to forward MIME
              messages while preserving the original mail structure. Note that
              the amount of headers included here depends on the value of the
              <link linkend="weed">$weed</link> variable.</para>
              <para>This function is also available from the attachment menu.
              You can use this to easily resend a message which was included
              with a bounce message as a
              <literal>message/rfc822</literal> body part.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;shell-escape&gt;</literal>
            <anchor id="shell-escape" />(default: !)</term>
            <listitem>
              <para>Asks for an external Unix command and executes it. The
              <link linkend="wait-key">$wait_key</link> can be used to control
              whether Mutt will wait for a key to be pressed when the command
              returns (presumably to let the user read the output of the
              command), based on the return status of the named command. If no
              command is given, an interactive shell is executed.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;toggle-quoted&gt;</literal>
            <anchor id="toggle-quoted" />(default: T)</term>
            <listitem>
              <para>The pager uses the
              <link linkend="quote-regexp">$quote_regexp</link> variable to
              detect quoted text when displaying the body of the message. This
              function toggles the display of the quoted material in the
              message. It is particularly useful when being interested in just
              the response and there is a large amount of quoted text in the
              way.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
            <literal>&lt;skip-quoted&gt;</literal>
            <anchor id="skip-quoted" />(default: S)</term>
            <listitem>
              <para>This function will go to the next line of non-quoted text
              which comes after a line of quoted text in the internal
              pager.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>

    <sect1 id="sending">
      <title>Sending Mail</title>

      <sect2 id="sending-intro">
        <title>Introduction</title>
        <para>The bindings shown in
        <xref linkend="tab-key-send" />are available in the
        <emphasis>index</emphasis> and
        <emphasis>pager</emphasis> to start a new message.</para>

        <table id="tab-key-send">
          <title>Most common mail sending keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>m</entry>
                <entry>
                  <literal>&lt;compose&gt;</literal>
                </entry>
                <entry>compose a new message</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry>
                  <literal>&lt;reply&gt;</literal>
                </entry>
                <entry>reply to sender</entry>
              </row>
              <row>
                <entry>g</entry>
                <entry>
                  <literal>&lt;group-reply&gt;</literal>
                </entry>
                <entry>reply to all recipients</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry>
                  <literal>&lt;list-reply&gt;</literal>
                </entry>
                <entry>reply to mailing list address</entry>
              </row>
              <row>
                <entry>f</entry>
                <entry>
                  <literal>&lt;forward&gt;</literal>
                </entry>
                <entry>forward message</entry>
              </row>
              <row>
                <entry>b</entry>
                <entry>
                  <literal>&lt;bounce&gt;</literal>
                </entry>
                <entry>bounce (remail) message</entry>
              </row>
              <row>
                <entry>Esc k</entry>
                <entry>
                  <literal>&lt;mail-key&gt;</literal>
                </entry>
                <entry>mail a PGP public key to someone</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
        <emphasis>Bouncing</emphasis> a message sends the message as-is to the
        recipient you specify.
        <emphasis>Forwarding</emphasis> a message allows you to add comments or
        modify the message you are forwarding. These items are discussed in
        greater detail in the next section
        <quote>
        <link linkend="forwarding-mail">Forwarding and Bouncing
        Mail</link>.</quote></para>
        <para>Mutt will then enter the
        <emphasis>compose</emphasis> menu and prompt you for the recipients to
        place on the
        <quote>To:</quote>header field when you hit
        <literal>m</literal> to start a new message. Next, it will ask you for
        the
        <quote>Subject:</quote>field for the message, providing a default if
        you are replying to or forwarding a message. You again have the chance
        to adjust recipients, subject, and security settings right before
        actually sending the message. See also
        <link linkend="askcc">$askcc</link>,
        <link linkend="askbcc">$askbcc</link>,
        <link linkend="autoedit">$autoedit</link>,
        <link linkend="bounce">$bounce</link>,
        <link linkend="fast-reply">$fast_reply</link>, and
        <link linkend="include">$include</link> for changing how and if Mutt
        asks these questions.</para>
        <para>When replying, Mutt fills these fields with proper values
        depending on the reply type. The types of replying supported
        are:</para>
        <variablelist>
          <varlistentry>
            <term>Simple reply</term>
            <listitem>
              <para>Reply to the author directly.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Group reply</term>
            <listitem>
              <para>Reply to the author as well to all recipients except you;
              this consults
              <link linkend="alternates">
                <command>alternates</command>
              </link>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>List reply</term>
            <listitem>
              <para>Reply to all mailing list addresses found, either specified
              via configuration or auto-detected. See
              <xref linkend="lists" />for details.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>After getting recipients for new messages, forwards or replies,
        Mutt will then automatically start your
        <link linkend="editor">$editor</link> on the message body. If the
        <link linkend="edit-headers">$edit_headers</link> variable is set, the
        headers will be at the top of the message in your editor; the message
        body should start on a new line after the existing blank line at the
        end of headers. Any messages you are replying to will be added in sort
        order to the message, with appropriate
        <link linkend="attribution">$attribution</link>,
        <link linkend="indent-string">$indent_string</link> and
        <link linkend="post-indent-string">$post_indent_string</link>. When
        forwarding a message, if the
        <link linkend="mime-forward">$mime_forward</link> variable is unset, a
        copy of the forwarded message will be included. If you have specified a
        <link linkend="signature">$signature</link>, it will be appended to the
        message.</para>
        <para>Once you have finished editing the body of your mail message, you
        are returned to the
        <emphasis>compose</emphasis> menu providing the functions shown in
        <xref linkend="tab-func-compose" />to modify, send or postpone the
        message.</para>

        <table id="tab-func-compose">
          <title>Most common compose menu keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>a</entry>
                <entry>
                  <literal>&lt;attach-file&gt;</literal>
                </entry>
                <entry>attach a file</entry>
              </row>
              <row>
                <entry>A</entry>
                <entry>
                  <literal>&lt;attach-message&gt;</literal>
                </entry>
                <entry>attach message(s) to the message</entry>
              </row>
              <row>
                <entry>Esc k</entry>
                <entry>
                  <literal>&lt;attach-key&gt;</literal>
                </entry>
                <entry>attach a PGP public key</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>
                  <literal>&lt;edit-description&gt;</literal>
                </entry>
                <entry>edit description on attachment</entry>
              </row>
              <row>
                <entry>D</entry>
                <entry>
                  <literal>&lt;detach-file&gt;</literal>
                </entry>
                <entry>detach a file</entry>
              </row>
              <row>
                <entry>t</entry>
                <entry>
                  <literal>&lt;edit-to&gt;</literal>
                </entry>
                <entry>edit the To field</entry>
              </row>
              <row>
                <entry>Esc f</entry>
                <entry>
                  <literal>&lt;edit-from&gt;</literal>
                </entry>
                <entry>edit the From field</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry>
                  <literal>&lt;edit-reply-to&gt;</literal>
                </entry>
                <entry>edit the Reply-To field</entry>
              </row>
              <row>
                <entry>c</entry>
                <entry>
                  <literal>&lt;edit-cc&gt;</literal>
                </entry>
                <entry>edit the Cc field</entry>
              </row>
              <row>
                <entry>b</entry>
                <entry>
                  <literal>&lt;edit-bcc&gt;</literal>
                </entry>
                <entry>edit the Bcc field</entry>
              </row>
              <row>
                <entry>y</entry>
                <entry>
                  <literal>&lt;send-message&gt;</literal>
                </entry>
                <entry>send the message</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry>
                  <literal>&lt;edit-subject&gt;</literal>
                </entry>
                <entry>edit the Subject</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry>
                  <literal>&lt;smime-menu&gt;</literal>
                </entry>
                <entry>select S/MIME options</entry>
              </row>
              <row>
                <entry>f</entry>
                <entry>
                  <literal>&lt;edit-fcc&gt;</literal>
                </entry>
                <entry>specify an
                <quote>Fcc</quote> mailbox</entry>
              </row>
              <row>
                <entry>p</entry>
                <entry>
                  <literal>&lt;pgp-menu&gt;</literal>
                </entry>
                <entry>select PGP options</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry>
                  <literal>&lt;postpone-message&gt;</literal>
                </entry>
                <entry>postpone this message until later</entry>
              </row>
              <row>
                <entry>q</entry>
                <entry>
                  <literal>&lt;quit&gt;</literal>
                </entry>
                <entry>quit (abort) sending the message</entry>
              </row>
              <row>
                <entry>w</entry>
                <entry>
                  <literal>&lt;write-fcc&gt;</literal>
                </entry>
                <entry>write the message to a folder</entry>
              </row>
              <row>
                <entry>i</entry>
                <entry>
                  <literal>&lt;ispell&gt;</literal>
                </entry>
                <entry>check spelling (if available on your system)</entry>
              </row>
              <row>
                <entry>^F</entry>
                <entry>
                  <literal>&lt;forget-passphrase&gt;</literal>
                </entry>
                <entry>wipe passphrase(s) from memory</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The compose menu is also used to edit the attachments for a
        message which can be either files or other messages. The
        <literal>&lt;attach-message&gt;</literal>function to will prompt you
        for a folder to attach messages from. You can now tag messages in that
        folder and they will be attached to the message you are sending.</para>
        <note>
          <para>Note that certain operations like composing a new mail,
          replying, forwarding, etc. are not permitted when you are in that
          folder. The %r in
          <link linkend="status-format">$status_format</link> will change to a
          <quote>A</quote> to indicate that you are in attach-message
          mode.</para>
        </note>
      </sect2>

      <sect2 id="edit-header">
        <title>Editing the Message Header</title>
        <para>When editing the header because of
        <link linkend="edit-headers">$edit_headers</link> being set, there are a
        several pseudo headers available which will not be included in sent
        messages but trigger special Mutt behavior.</para>

        <sect3 id="fcc-header">
          <title>Fcc: Pseudo Header</title>
          <para>If you specify</para>
          <para>
            <literal>Fcc:</literal>
            <emphasis>filename</emphasis>
          </para>
          <para>as a header, Mutt will pick up
          <emphasis>filename</emphasis> just as if you had used the
          <literal>&lt;edit-fcc&gt;</literal>function in the
          <emphasis>compose</emphasis> menu. It can later be changed from the
          compose menu.</para>
        </sect3>

        <sect3 id="attach-header">
          <title>Attach: Pseudo Header</title>
          <para>You can also attach files to your message by specifying</para>
          <para>
          <literal>Attach:</literal>
          <emphasis>filename</emphasis>[
          <emphasis>description</emphasis>]</para>
          <para>where
          <emphasis>filename</emphasis> is the file to attach and
          <emphasis>description</emphasis> is an optional string to use as the
          description of the attached file. Spaces in filenames have to be
          escaped using backslash (
          <quote>\</quote>). The file can be removed as well as more added from
          the compose menu.</para>
        </sect3>

        <sect3 id="pgp-header">
          <title>Pgp: Pseudo Header</title>
          <para>If you want to use PGP, you can specify</para>
          <para>
          <literal>Pgp:</literal>[
          <literal>E</literal>|
          <literal>S</literal>|
          <literal>S</literal>
          <emphasis>&lt;id&gt;</emphasis>]</para>
          <para>
          <quote>E</quote> selects encryption,
          <quote>S</quote> selects signing and
          <quote>S&lt;id&gt;</quote>selects signing with the given key, setting
          <link linkend="pgp-sign-as">$pgp_sign_as</link> permanently. The
          selection can later be changed in the compose menu.</para>
        </sect3>

        <sect3 id="in-reply-to-header">
          <title>In-Reply-To: Header</title>
          <para>When replying to messages, the
          <emphasis>In-Reply-To:</emphasis>header contains the Message-Id of
          the message(s) you reply to. If you remove or modify its value, Mutt
          will not generate a
          <emphasis>References:</emphasis>field, which allows you to create a
          new message thread, for example to create a new message to a mailing
          list without having to enter the mailing list's address.</para>
          <para>If you intend to start a new thread by replying, please make
          really sure you remove the
          <emphasis>In-Reply-To:</emphasis>header in your editor. Otherwise,
          though you'll produce a technically valid reply, some netiquette
          guardians will be annoyed by this so-called
          <quote>thread hijacking</quote>.</para>
        </sect3>
      </sect2>

      <sect2 id="sending-crypto">
        <title>Sending Cryptographically Signed/Encrypted Messages</title>
        <para>If you have told Mutt to PGP or S/MIME encrypt a message, it will
        guide you through a key selection process when you try to send the
        message. Mutt will not ask you any questions about keys which have a
        certified user ID matching one of the message recipients' mail
        addresses. However, there may be situations in which there are several
        keys, weakly certified user ID fields, or where no matching keys can be
        found.</para>
        <para>In these cases, you are dropped into a menu with a list of keys
        from which you can select one. When you quit this menu, or Mutt can't
        find any matching keys, you are prompted for a user ID. You can, as
        usually, abort this prompt using
        <literal>^G</literal>. When you do so, Mutt will return to the compose
        screen.</para>
        <para>Once you have successfully finished the key selection, the
        message will be encrypted using the selected public keys when sent
        out.</para>
        <para>Most fields of the entries in the key selection menu (see also
        <link linkend="pgp-entry-format">$pgp_entry_format</link>) have obvious
        meanings. But some explanations on the capabilities, flags, and
        validity fields are in order.</para>
        <para>The flags sequence (
        <quote>%f</quote>) will expand to one of the flags in
        <xref linkend="tab-pgp-menuflags" />.</para>

        <table id="tab-pgp-menuflags">
          <title>PGP key menu flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>R</entry>
                <entry>The key has been revoked and can't be used.</entry>
              </row>
              <row>
                <entry>X</entry>
                <entry>The key is expired and can't be used.</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>You have marked the key as disabled.</entry>
              </row>
              <row>
                <entry>c</entry>
                <entry>There are unknown critical self-signature
                packets.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The capabilities field (
        <quote>%c</quote>) expands to a two-character sequence representing a
        key's capabilities. The first character gives the key's encryption
        capabilities: A minus sign (
        <quote>-</quote>) means that the key cannot be used for encryption. A
        dot (
        <quote>.</quote>) means that it's marked as a signature key in one of
        the user IDs, but may also be used for encryption. The letter
        <quote>e</quote> indicates that this key can be used for
        encryption.</para>
        <para>The second character indicates the key's signing capabilities.
        Once again, a
        <quote>-</quote>implies
        <quote>not for signing</quote>,
        <quote>.</quote>implies that the key is marked as an encryption key in
        one of the user-ids, and
        <quote>s</quote> denotes a key which can be used for signing.</para>
        <para>Finally, the validity field (
        <quote>%t</quote>) indicates how well-certified a user-id is. A
        question mark (
        <quote>?</quote>) indicates undefined validity, a minus character (
        <quote>-</quote>) marks an untrusted association, a space character
        means a partially trusted association, and a plus character (
        <quote>+</quote>) indicates complete validity.</para>
      </sect2>

      <sect2 id="ff">
        <title>Sending Format=Flowed Messages</title>

        <sect3 id="ff-concept">
          <title>Concept</title>
          <para>
          <literal>format=flowed</literal>-style messages (or
          <literal>f=f</literal> for short) are
          <literal>text/plain</literal> messages that consist of paragraphs
          which a receiver's mail client may reformat to its own needs which
          mostly means to customize line lengths regardless of what the sender
          sent. Technically this is achieved by letting lines of a
          <quote>flowable</quote> paragraph end in spaces except for the last
          line.</para>
          <para>While for text-mode clients like Mutt it's the best way to
          assume only a standard 80x25 character cell terminal, it may be
          desired to let the receiver decide completely how to view a
          message.</para>
        </sect3>

        <sect3 id="ff-support">
          <title>Mutt Support</title>
          <para>Mutt only supports setting the required
          <literal>format=flowed</literal> MIME parameter on outgoing messages
          if the
          <link linkend="text-flowed">$text_flowed</link> variable is set,
          specifically it does not add the trailing spaces.</para>
          <para>After editing the initial message text and before entering the
          compose menu, Mutt properly space-stuffs the message.
          <emphasis>Space-stuffing</emphasis> is required by RfC3676 defining
          <literal>format=flowed</literal> and means to prepend a space
          to:</para>
          <itemizedlist>
            <listitem>
              <para>all lines starting with a space</para>
            </listitem>
            <listitem>
              <para>lines starting with the word
              <quote>
                <literal>From</literal>
              </quote>followed by space</para>
            </listitem>
            <listitem>
              <para>all lines starting with
              <quote>
                <literal>&gt;</literal>
              </quote>which is not intended to be a quote character</para>
            </listitem>
          </itemizedlist>
          <note>
            <para>Mutt only supports space-stuffing for the first two types of
            lines but not for the third: It is impossible to safely detect
            whether a leading
            <literal>&gt;</literal>character starts a quote or not.
            Furthermore, Mutt only applies space-stuffing
            <emphasis>once</emphasis> after the initial edit is finished.</para>
          </note>
          <para>All leading spaces are to be removed by receiving clients to
          restore the original message prior to further processing.</para>
        </sect3>

        <sect3 id="ff-editor">
          <title>Editor Considerations</title>
          <para>As Mutt provides no additional features to compose
          <literal>f=f</literal> messages, it's completely up to the user and
          his editor to produce proper messages. Please consider your editor's
          documentation if you intend to send
          <literal>f=f</literal> messages.</para>
          <para>Please note that when editing messages from the compose menu
          several times before really sending a mail, it's up to the user to
          ensure that the message is properly space-stuffed.</para>
          <para>For example,
          <emphasis>vim</emphasis> provides the
          <literal>w</literal> flag for its
          <literal>formatoptions</literal> setting to assist in creating
          <literal>f=f</literal> messages, see
          <literal>:help fo-table</literal> for details.</para>
        </sect3>

        <sect3 id="ff-pager">
          <title>Reformatting</title>
          <para>Mutt has some support for reformatting when viewing and
          replying to
          <literal>format=flowed</literal> messages. In order to take advantage
          of these,
          <link linkend="reflow-text">$reflow_text</link> must be set.</para>
          <itemizedlist>
            <listitem>
              <para>Paragraphs are automatically reflowed and wrapped at a
              width specified by
              <link linkend="reflow-wrap">$reflow_wrap</link>.</para>
            </listitem>
            <listitem>
              <para>In its original format, the quoting style of
              <literal>format=flowed</literal> messages can be difficult to
              read, and doesn't intermix well with non-flowed replies. Setting
              <link linkend="reflow-space-quotes">
              $reflow_space_quotes</link> adds spaces after each level of
              quoting when in the pager and replying in a non-flowed format
              (i.e. with
              <link linkend="text-flowed">$text_flowed</link> unset).</para>
            </listitem>
            <listitem>
              <para>If
              <link linkend="reflow-space-quotes">$reflow_space_quotes</link> is
              unset, mutt will still add one trailing space after all the
              quotes in the pager (but not when replying).</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="forwarding-mail">
      <title>Forwarding and Bouncing Mail</title>
      <para>Bouncing and forwarding let you send an existing message to
      recipients that you specify. Bouncing a message sends a verbatim copy of
      a message to alternative addresses as if they were the message's original
      recipients specified in the Bcc header. Forwarding a message, on the
      other hand, allows you to modify the message before it is resent (for
      example, by adding your own comments). Bouncing is done using the
      <literal>&lt;bounce&gt;</literal>function and forwarding using the
      <literal>&lt;forward&gt;</literal>function bound to
      <quote>b</quote> and
      <quote>f</quote> respectively.</para>
      <para>Forwarding can be done by including the original message in the new
      message's body (surrounded by indicating lines) or including it as a MIME
      attachment, depending on the value of the
      <link linkend="mime-forward">$mime_forward</link> variable. Decoding of
      attachments, like in the pager, can be controlled by the
      <link linkend="forward-decode">$forward_decode</link> and
      <link linkend="mime-forward-decode">$mime_forward_decode</link> variables,
      respectively. The desired forwarding format may depend on the content,
      therefore
      <link linkend="mime-forward">$mime_forward</link> is a quadoption which,
      for example, can be set to
      <quote>ask-no</quote>.</para>
      <para>The inclusion of headers is controlled by the current setting of
      the
      <link linkend="weed">$weed</link> variable, unless
      <link linkend="mime-forward">$mime_forward</link> is set.</para>
      <para>By default a forwarded message does not reference the messages it
      contains. When
      <link linkend="forward-references">$forward_references</link> is set, a
      forwarded message includes the
      <quote>In-Reply-To:</quote>and
      <quote>References:</quote>headers, just like a reply would. Hence the
      forwarded message becomes part of the original thread instead of starting
      a new one.</para>
      <para>Editing the message to forward follows the same procedure as
      sending or replying to a message does.</para>
    </sect1>

    <sect1 id="postponing-mail">
      <title>Postponing Mail</title>
      <para>At times it is desirable to delay sending a message that you have
      already begun to compose. When the
      <literal>&lt;postpone-message&gt;</literal>function is used in the
      <emphasis>compose</emphasis> menu, the body of your message and
      attachments are stored in the mailbox specified by the
      <link linkend="postponed">$postponed</link> variable. This means that you
      can recall the message even if you exit Mutt and then restart it at a
      later time.</para>
      <para>Once a message is postponed, there are several ways to resume it.
      From the command line you can use the
      <quote>-p</quote> option, or if you compose a new message from the
      <emphasis>index</emphasis> or
      <emphasis>pager</emphasis> you will be prompted if postponed messages
      exist. If multiple messages are currently postponed, the
      <emphasis>postponed</emphasis> menu will pop up and you can select which
      message you would like to resume.</para>
      <note>
        <para>If you postpone a reply to a message, the reply setting of the
        message is only updated when you actually finish the message and send
        it. Also, you must be in the same folder with the message you replied
        to for the status of the message to be updated.</para>
      </note>
      <para>See also the
      <link linkend="postpone">$postpone</link> quad-option.</para>
    </sect1>
  </chapter>

  <chapter id="guide/configuration">
    <title>Configuration</title>

    <sect1 id="configuration-files">
      <title>Location of Initialization Files</title>
      <para>When Mutt starts up it looks for two configuration files -- one
      <quote>system</quote> file and one
      <quote>user</quote> file.</para>
      <para>Mutt searches for several different file names when looking for
      config. It looks for NeoMutt config files before Mutt config files and
      versioned config before plain config. For example:</para>

      <table id="muttrc-order">
        <title>Mutt config file search order</title>
        <tgroup cols="1">
          <tbody>
            <row>
              <entry>neomuttrc-20170714</entry>
            </row>
            <row>
              <entry>neomuttrc</entry>
            </row>
            <row>
              <entry>muttrc-1.8.3</entry>
            </row>
            <row>
              <entry>muttrc</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This allows the user to create separate Mutt and NeoMutt config
      files on the same system.</para>

      <sect2 id="muttrc-system">
        <title>Location of system config files</title>
        <para>Mutt will search for a system config file in a
        <literal>mutt</literal> directory in several places. First it searches
        the locations specified in the
        <literal>XDG_CONFIG_DIRS</literal> environment variable, which defaults
        to
        <literal>/etc/xdg</literal>. Next, it looks in
        <literal>/etc</literal>. Finally, it tries
        <literal>/usr/share</literal>.</para>
        <para>The system config file will not be read if the
        <quote>-n</quote> option is used on the
        <link linkend="commandline">command line</link>.</para>
        <para>Mutt will read just one file, the first file it finds, from the
        list below.</para>

        <table id="muttrc-system-files">
          <title>Mutt system config file locations</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>File Location</entry>
                <entry>Notes</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>/etc/xdg/mutt/neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>/etc/xdg/mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>/etc/xdg/mutt/Muttrc-1.8.3</entry>
                <entry>Mutt release version, Note the case of the
                filename</entry>
              </row>
              <row>
                <entry>/etc/xdg/mutt/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
              <row>
                <entry>/etc/mutt/neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>/etc/mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>/etc/mutt/Muttrc-1.8.3</entry>
                <entry>Mutt release version, Note the case of the
                filename</entry>
              </row>
              <row>
                <entry>/etc/mutt/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
              <row>
                <entry>/usr/share/mutt/neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>/usr/share/mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>/usr/share/mutt/Muttrc-1.8.3</entry>
                <entry>Mutt release version, Note the case of the
                filename</entry>
              </row>
              <row>
                <entry>/usr/share/mutt/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="muttrc-user">
        <title>Location of user config files</title>
        <para>Mutt will search for a user config file in several places. First
        it looks in the directory specified in the
        <literal>XDG_CONFIG_HOME</literal> environment variable, which defaults
        to
        <literal>~/.config/mutt</literal>. Next, it looks in
        <literal>~</literal>(your home directory). Finally, it tries
        <literal>~/.mutt</literal>.</para>
        <para>You may specify your own location for the user config file using
        the
        <quote>-F</quote> option on the
        <link linkend="commandline">command line</link>.</para>
        <para>Mutt will read just one file, the first file it finds, from the
        list below.</para>

        <table id="muttrc-user-files">
          <title>Mutt user config file locations</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>File Location</entry>
                <entry>Notes</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>~/.config/mutt/neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>~/.config/mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.config/mutt/muttrc-1.8.3</entry>
                <entry>Mutt release version</entry>
              </row>
              <row>
                <entry>~/.config/mutt/muttrc</entry>
              </row>
              <row>
                <entry>~/.neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>~/.neomuttrc</entry>
              </row>
              <row>
                <entry>~/.muttrc-1.8.3</entry>
                <entry>Mutt release version</entry>
              </row>
              <row>
                <entry>~/.muttrc</entry>
              </row>
              <row>
                <entry>~/.mutt/neomuttrc-20170714</entry>
                <entry>NeoMutt release version</entry>
              </row>
              <row>
                <entry>~/.mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.mutt/muttrc-1.8.3</entry>
                <entry>Mutt release version</entry>
              </row>
              <row>
                <entry>~/.mutt/muttrc</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>

    <sect1 id="muttrc-syntax" xreflabel="Syntax of Initialization Files">
      <title>Syntax of Initialization Files</title>
      <para>An initialization file consists of a series of
      <link linkend="commands">commands</link>. Each line of the file may
      contain one or more commands. When multiple commands are used, they must
      be separated by a semicolon (
      <quote>;</quote>).</para>
      <example id="ex-rc-multiple-cmds">
        <title>Multiple configuration commands per line</title>
        <screen>set realname='Mutt user' ; ignore x-</screen>
      </example>
      <para>The hash mark, or pound sign (
      <quote>#</quote>), is used as a
      <quote>comment</quote> character. You can use it to annotate your
      initialization file. All text after the comment character to the end of
      the line is ignored.</para>
      <example id="ex-ec-comment">
        <title>Commenting configuration files</title>
        <screen>my_hdr X-Disclaimer: Why are you listening to me?
        <emphasis role="comment"># This is a comment</emphasis></screen>
      </example>
      <para>Single quotes (
      <quote>'</quote>) and double quotes (
      <quote>"</quote>) can be used to quote strings which contain spaces or
      other special characters. The difference between the two types of quotes
      is similar to that of many popular shell programs, namely that a single
      quote is used to specify a literal string (one that is not interpreted
      for shell variables or quoting with a backslash [see next paragraph]),
      while double quotes indicate a string for which should be evaluated. For
      example, backticks are evaluated inside of double quotes, but
      <emphasis>not</emphasis> for single quotes.</para>
      <para>
      <quote>\</quote>quotes the next character, just as in shells such as bash
      and zsh. For example, if want to put quotes
      <quote>"</quote>inside of a string, you can use
      <quote>\</quote>to force the next character to be a literal instead of
      interpreted character.</para>
      <example id="ex-rc-quote">
        <title>Escaping quotes in configuration files</title>
        <screen>set realname="Michael \"MuttDude\" Elkins"</screen>
      </example>
      <para>
      <quote>\\</quote>means to insert a literal
      <quote>\</quote>into the line.
      <quote>\n</quote> and
      <quote>\r</quote> have their usual C meanings of linefeed and
      carriage-return, respectively.</para>
      <para>A
      <quote>\</quote>at the end of a line can be used to split commands over
      multiple lines as it
      <quote>escapes</quote> the line end, provided that the split points don't
      appear in the middle of command names. Lines are first concatenated
      before interpretation so that a multi-line can be commented by commenting
      out the first line only.</para>
      <example id="ex-rc-split">
        <title>Splitting long configuration commands over several lines</title>
        <screen>
set status_format="some very \
long value split \
over several lines"
</screen>
      </example>
      <para>It is also possible to substitute the output of a Unix command in
      an initialization file. This is accomplished by enclosing the command in
      backticks (``). In
      <xref linkend="ex-rc-backtick" />, the output of the Unix command
      <quote>uname -a</quote> will be substituted before the line is parsed.
      Since initialization files are line oriented, only the first line of
      output from the Unix command will be substituted.</para>
      <example id="ex-rc-backtick">
        <title>Using external command's output in configuration files</title>
        <screen>my_hdr X-Operating-System: `uname -a`</screen>
      </example>
      <para>Both environment variables and Mutt variables can be accessed by
      prepending
      <quote>$</quote>to the name of the variable. For example,</para>
      <example id="ex-rc-env">
        <title>Using environment variables in configuration files</title>
        <screen>set record=+sent_on_$HOSTNAME</screen>
      </example>
      <para>will cause Mutt to save outgoing messages to a folder named
      <quote>sent_on_kremvax</quote> if the environment variable
      <literal>$HOSTNAME</literal> is set to
      <quote>kremvax.</quote>(See
      <link linkend="record">$record</link> for details.)</para>
      <para>Mutt expands the variable when it is assigned, not when it is used.
      If the value of a variable on the right-hand side of an assignment
      changes after the assignment, the variable on the left-hand side will not
      be affected.</para>
      <para>The commands understood by Mutt are explained in the next
      paragraphs. For a complete list, see the
      <link linkend="commands">command reference</link>.</para>
      <para>All configuration files are expected to be in the current locale as
      specified by the
      <link linkend="charset">$charset</link> variable which doesn't have a
      default value since it's determined by Mutt at startup. If a
      configuration file is not encoded in the same character set the
      <link linkend="config-charset">$config_charset</link> variable should be
      used: all lines starting with the next are recoded from
      <link linkend="config-charset">$config_charset</link> to
      <link linkend="charset">$charset</link>.</para>
      <para>This mechanism should be avoided if possible as it has the
      following implications:</para>
      <itemizedlist>
        <listitem>
          <para>These variables should be set early in a configuration file
          with
          <link linkend="charset">$charset</link> preceding
          <link linkend="config-charset">$config_charset</link> so Mutt knows
          what character set to convert to.</para>
        </listitem>
        <listitem>
          <para>If
          <link linkend="config-charset">$config_charset</link> is set, it
          should be set in each configuration file because the value is global
          and
          <emphasis>not</emphasis> per configuration file.</para>
        </listitem>
        <listitem>
          <para>Because Mutt first recodes a line before it attempts to parse
          it, a conversion introducing question marks or other characters as
          part of errors (unconvertable characters, transliteration) may
          introduce syntax errors or silently change the meaning of certain
          tokens (e.g. inserting question marks into regular
          expressions).</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="addrgroup">
      <title>Address Groups</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>group</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain" rep="repeat">
            <option>-rx</option>
            <replaceable class="parameter">expr</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-addr</option>
            <replaceable class="parameter">expr</replaceable>
          </arg>
        </group>
        <command>ungroup</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-rx</option>
            <replaceable class="parameter">expr</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-addr</option>
            <replaceable class="parameter">expr</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>Mutt supports grouping addresses logically into named groups. An
      address or address pattern can appear in several groups at the same time.
      These groups can be used in
      <link linkend="patterns">patterns</link>(for searching, limiting and
      tagging) and in hooks by using group patterns. This can be useful to
      classify mail and take certain actions depending on in what groups the
      message is. For example, the mutt user's mailing list would fit into the
      categories
      <quote>mailing list</quote> and
      <quote>mutt-related</quote>. Using
      <link linkend="send-hook">
        <literal>send-hook</literal>
      </link>, the sender can be set to a dedicated one for writing mailing
      list messages, and the signature could be set to a mutt-related one for
      writing to a mutt list — for other lists, the list sender setting still
      applies but a different signature can be selected. Or, given a group only
      containing recipients known to accept encrypted mail,
      <quote>auto-encryption</quote> can be achieved easily.</para>
      <para>The
      <command>group</command> command is used to directly add either addresses
      or regular expressions to the specified group or groups. The different
      categories of arguments to the
      <command>group</command> command can be in any order. The flags
      <literal>-rx</literal> and
      <literal>-addr</literal> specify what the following strings (that cannot
      begin with a hyphen) should be interpreted as: either a regular
      expression or an email address, respectively.</para>
      <para>These address groups can also be created implicitly by the
      <link linkend="alias">
        <command>alias</command>
      </link>,
      <link linkend="lists">
        <command>lists</command>
      </link>,
      <link linkend="lists">
        <command>subscribe</command>
      </link>and
      <link linkend="alternates">
        <command>alternates</command>
      </link>commands by specifying the optional
      <literal>-group</literal> option. For example,</para>
      <screen>
alternates -group me address1 address2
alternates -group me -group work address3
</screen>
      <para>would create a group named
      <quote>me</quote> which contains all your addresses and a group named
      <quote>work</quote> which contains only your work address
      <emphasis>address3</emphasis>. Besides many other possibilities, this
      could be used to automatically mark your own messages in a mailing list
      folder as read or use a special signature for work-related
      messages.</para>
      <para>The
      <command>ungroup</command> command is used to remove addresses or regular
      expressions from the specified group or groups. The syntax is similar to
      the
      <command>group</command> command, however the special character
      <literal>*</literal>can be used to empty a group of all of its contents.
      As soon as a group gets empty because all addresses and regular
      expressions have been removed, it'll internally be removed, too (i.e.
      there cannot be an empty group). When removing regular expressions from a
      group, the pattern must be specified exactly as given to the
      <command>group</command> command or
      <literal>-group</literal> argument.</para>
    </sect1>

    <sect1 id="alias">
      <title>Defining/Using Aliases</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>alias</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">address</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">address</replaceable>
        </arg>
        <command>unalias</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">key</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>It's usually very cumbersome to remember or type out the address of
      someone you are communicating with. Mutt allows you to create
      <quote>aliases</quote> which map a short string to a full address.</para>
      <note>
        <para>If you want to create an alias for more than one address, you
        <emphasis>must</emphasis> separate the addresses with a comma (
        <quote>,</quote>).</para>
      </note>
      <para>The optional
      <literal>-group</literal> argument to
      <command>alias</command> causes the aliased address(es) to be added to the
      named
      <emphasis>group</emphasis>.</para>
      <para>To remove an alias or aliases (
      <quote>*</quote>means all aliases):</para>
      <screen>
alias muttdude me@cs.hmc.edu (Michael Elkins)
alias theguys manny, moe, jack
</screen>
      <para>Unlike other mailers, Mutt doesn't require aliases to be defined in
      a special file. The
      <command>alias</command> command can appear anywhere in a configuration
      file, as long as this file is
      <link linkend="source">
      <command>source</command>d</link>. Consequently, you can have multiple
      alias files, or you can have all aliases defined in your
      <literal>.muttrc</literal>.</para>
      <para>On the other hand, the
      <link linkend="create-alias">
        <literal>&lt;create-alias&gt;</literal>
      </link>function can use only one file, the one pointed to by the
      <link linkend="alias-file">$alias_file</link> variable (which is
      <literal>~/.muttrc</literal> by default). This file is not special either,
      in the sense that Mutt will happily append aliases to any file, but in
      order for the new aliases to take effect you need to explicitly
      <link linkend="source">
        <command>source</command>
      </link>this file too.</para>
      <example id="ex-alias-external">
        <title>Configuring external alias files</title>
        <screen>
source /usr/local/share/Mutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>
      </example>
      <para>To use aliases, you merely use the alias at any place in Mutt where
      Mutt prompts for addresses, such as the
      <emphasis>To:</emphasis>or
      <emphasis>Cc:</emphasis>prompt. You can also enter aliases in your editor
      at the appropriate headers if you have the
      <link linkend="edit-headers">$edit_headers</link> variable set.</para>
      <para>In addition, at the various address prompts, you can use the tab
      character to expand a partial alias to the full alias. If there are
      multiple matches, Mutt will bring up a menu with the matching aliases. In
      order to be presented with the full list of aliases, you must hit tab
      without a partial alias, such as at the beginning of the prompt or after
      a comma denoting multiple addresses.</para>
      <para>In the alias menu, you can select as many aliases as you want with
      the
      <literal>select-entry</literal> key (default: &lt;Return&gt;), and use the
      <emphasis>exit</emphasis> key (default: q) to return to the address
      prompt.</para>
    </sect1>

    <sect1 id="bind">
      <title>Changing the Default Key Bindings</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>bind</command>
        <arg choice="plain">
          <replaceable class="parameter">map</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">function</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command allows you to change the default key bindings
      (operation invoked when pressing a key).</para>
      <para>
      <emphasis>map</emphasis> specifies in which menu the binding belongs.
      Multiple maps may be specified by separating them with commas (no
      additional whitespace is allowed). The currently defined maps are:</para>
      <anchor id="maps" />
      <variablelist>
        <varlistentry>
          <term>generic</term>
          <listitem>
            <para>This is not a real menu, but is used as a fallback for all of
            the other menus except for the pager and editor modes. If a key is
            not defined in another menu, Mutt will look for a binding to use in
            this menu. This allows you to bind a key to a certain function in
            multiple menus instead of having multiple
            <command>bind</command> statements to accomplish the same
            task.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>alias</term>
          <listitem>
            <para>The alias menu is the list of your personal aliases as
            defined in your
            <literal>.muttrc</literal>. It is the mapping from a short alias
            name to the full email address(es) of the recipient(s).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>attach</term>
          <listitem>
            <para>The attachment menu is used to access the attachments on
            received messages.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>browser</term>
          <listitem>
            <para>The browser is used for both browsing the local directory
            structure, and for listing all of your incoming mailboxes.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>editor</term>
          <listitem>
            <para>The editor is used to allow the user to enter a single line
            of text, such as the
            <emphasis>To</emphasis> or
            <emphasis>Subject</emphasis> prompts in the
            <literal>compose</literal> menu.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>index</term>
          <listitem>
            <para>The index is the list of messages contained in a
            mailbox.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>compose</term>
          <listitem>
            <para>The compose menu is the screen used when sending a new
            message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>pager</term>
          <listitem>
            <para>The pager is the mode used to display message/attachment
            data, and help listings.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>pgp</term>
          <listitem>
            <para>The pgp menu is used to select the OpenPGP keys used to
            encrypt outgoing messages.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>smime</term>
          <listitem>
            <para>The smime menu is used to select the OpenSSL certificates
            used to encrypt outgoing messages.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>postpone</term>
          <listitem>
            <para>The postpone menu is similar to the index menu, except is
            used when recalling a message the user was composing, but saved
            until later.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>query</term>
          <listitem>
            <para>The query menu is the browser for results returned by
            <link linkend="query-command">$query_command</link>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>mix</term>
          <listitem>
            <para>The mixmaster screen is used to select remailer options for
            outgoing messages (if Mutt is compiled with Mixmaster
            support).</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
      <emphasis>key</emphasis> is the key (or key sequence) you wish to bind. To
      specify a control character, use the sequence
      <emphasis>\Cx</emphasis>, where
      <emphasis>x</emphasis> is the letter of the control character (for
      example, to specify control-A use
      <quote>\Ca</quote>). Note that the case of
      <emphasis>x</emphasis> as well as
      <emphasis>\C</emphasis> is ignored, so that
      <emphasis>\CA</emphasis>,
      <emphasis>\Ca</emphasis>,
      <emphasis>\cA</emphasis> and
      <emphasis>\ca</emphasis> are all equivalent. An alternative form is to
      specify the key as a three digit octal number prefixed with a
      <quote>\</quote>(for example
      <emphasis>\177</emphasis> is equivalent to
      <emphasis>\c?</emphasis>). In addition,
      <emphasis>key</emphasis> may be a symbolic name as shown in
      <xref linkend="tab-key-names" />.</para>

      <table id="tab-key-names">
        <title>Symbolic key names</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Symbolic name</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>\t</entry>
              <entry>tab</entry>
            </row>
            <row>
              <entry>&lt;tab&gt;</entry>
              <entry>tab</entry>
            </row>
            <row>
              <entry>&lt;backtab&gt;</entry>
              <entry>backtab / shift-tab</entry>
            </row>
            <row>
              <entry>\r</entry>
              <entry>carriage return</entry>
            </row>
            <row>
              <entry>\n</entry>
              <entry>newline</entry>
            </row>
            <row>
              <entry>\e</entry>
              <entry>escape/alt</entry>
            </row>
            <row>
              <entry>&lt;esc&gt;</entry>
              <entry>escape/alt</entry>
            </row>
            <row>
              <entry>&lt;up&gt;</entry>
              <entry>up arrow</entry>
            </row>
            <row>
              <entry>&lt;down&gt;</entry>
              <entry>down arrow</entry>
            </row>
            <row>
              <entry>&lt;left&gt;</entry>
              <entry>left arrow</entry>
            </row>
            <row>
              <entry>&lt;right&gt;</entry>
              <entry>right arrow</entry>
            </row>
            <row>
              <entry>&lt;pageup&gt;</entry>
              <entry>Page Up</entry>
            </row>
            <row>
              <entry>&lt;pagedown&gt;</entry>
              <entry>Page Down</entry>
            </row>
            <row>
              <entry>&lt;backspace&gt;</entry>
              <entry>Backspace</entry>
            </row>
            <row>
              <entry>&lt;delete&gt;</entry>
              <entry>Delete</entry>
            </row>
            <row>
              <entry>&lt;insert&gt;</entry>
              <entry>Insert</entry>
            </row>
            <row>
              <entry>&lt;enter&gt;</entry>
              <entry>Enter</entry>
            </row>
            <row>
              <entry>&lt;return&gt;</entry>
              <entry>Return</entry>
            </row>
            <row>
              <entry>&lt;home&gt;</entry>
              <entry>Home</entry>
            </row>
            <row>
              <entry>&lt;end&gt;</entry>
              <entry>End</entry>
            </row>
            <row>
              <entry>&lt;space&gt;</entry>
              <entry>Space bar</entry>
            </row>
            <row>
              <entry>&lt;f1&gt;</entry>
              <entry>function key 1</entry>
            </row>
            <row>
              <entry>&lt;f10&gt;</entry>
              <entry>function key 10</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The
      <literal>&lt;what-key&gt;</literal>function can be used to explore
      keycode and symbolic names for other keys on your keyboard. Executing
      this function will display information about each key pressed, until
      terminated by
      <literal>^G</literal>.</para>
      <para>
      <emphasis>key</emphasis> does not need to be enclosed in quotes unless it
      contains a space (
      <quote>&#160;</quote>) or semi-colon (
      <quote>;</quote>).</para>
      <para>
      <emphasis>function</emphasis> specifies which action to take when
      <emphasis>key</emphasis> is pressed. For a complete list of functions, see
      the
      <link linkend="functions">reference</link>. Note that the
      <command>bind</command> expects
      <emphasis>function</emphasis> to be specified without angle
      brackets.</para>
      <para>The special function
      <literal>&lt;noop&gt;</literal>unbinds the specified key sequence.</para>

      <sect2 id="bind-warnings">
        <title>Warnings about Duplicated Bindings</title>
        <para>Due to a limitation of Mutt, creating key bindings, or macros,
        will overwrite existing mappings with similar, shorter, names.</para>
        <screen>
bind index g  group-reply
bind index gg first-entry</screen>
        <para>In this example, the <literal>g</literal> binding will be
        overwritten and cannot be used.  Newer versions of Mutt will warn the
        user about this.</para>
        <para>To avoid warnings on startup, first set the shorter binding to
        <literal>noop</literal> (no operation).</para>
        <screen>
bind index g  noop
bind index gg first-entry</screen>
      </sect2>
    </sect1>

    <sect1 id="charset-hook">
      <title>Defining Aliases for Character Sets</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>charset-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">alias</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">charset</replaceable>
        </arg>
        <command>iconv-hook
        <anchor id="iconv-hook" /></command>
        <arg choice="plain">
          <replaceable class="parameter">charset</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">local-charset</replaceable>
        </arg>
      </cmdsynopsis>
      <para>The
      <command>charset-hook</command> command defines an alias for a character
      set. This is useful to properly display messages which are tagged with a
      character set name not known to Mutt.</para>
      <para>The
      <command>iconv-hook</command> command defines a system-specific name for a
      character set. This is helpful when your systems character conversion
      library insists on using strange, system-specific names for character
      sets.</para>
    </sect1>

    <sect1 id="folder-hook">
      <title>Setting Variables Based Upon Mailbox</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>folder-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]regexp</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>It is often desirable to change settings based on which mailbox you
      are reading. The
      <command>folder-hook</command> command provides a method by which you can
      execute any configuration command.
      <emphasis>regexp</emphasis> is a regular expression specifying in which
      mailboxes to execute
      <emphasis>command</emphasis> before loading. If a mailbox matches multiple
      <command>folder-hook</command>s, they are executed in the order given in
      the
      <literal>.muttrc</literal>.</para>
      <para>The regexp parameter has
      <link linkend="shortcuts">mailbox shortcut</link> expansion performed on
      the first character. See
      <xref linkend="mailbox-hook" />for more details.</para>
      <note>
        <para>If you use the
        <quote>!</quote>shortcut for
        <link linkend="spoolfile">$spoolfile</link> at the beginning of the
        pattern, you must place it inside of double or single quotes in order
        to distinguish it from the logical
        <emphasis>not</emphasis> operator for the expression.</para>
      </note>
      <note>
        <para>Settings are
        <emphasis>not</emphasis> restored when you leave the mailbox. For
        example, a command action to perform is to change the sorting method
        based upon the mailbox being read:</para>
        <screen>folder-hook mutt "set sort=threads"</screen>
        <para>However, the sorting method is not restored to its previous value
        when reading a different mailbox. To specify a
        <emphasis>default</emphasis> command, use the pattern
        <quote>.</quote>before other
        <command>folder-hook</command>s adjusting a value on a per-folder basis
        because
        <command>folder-hook</command>s are evaluated in the order given in the
        configuration file.</para>
      </note>
      <note>
        <para>The keyboard buffer will not be processed until after all hooks
        are run; multiple
        <link linkend="push">push</link> or
        <link linkend="exec">exec</link> commands will end up being processed in
        reverse order.</para>
      </note>
      <para>The following example will set the
      <link linkend="sort">sort</link> variable to
      <literal>date-sent</literal> for all folders but to
      <literal>threads</literal> for all folders containing
      <quote>mutt</quote> in their name.</para>
      <example id="ex-folder-sorting">
        <title>Setting sort method based on mailbox name</title>
        <screen>
folder-hook . "set sort=date-sent"
folder-hook mutt "set sort=threads"
</screen>
      </example>
    </sect1>

    <sect1 id="macro">
      <title>Keyboard Macros</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>macro</command>
        <arg choice="plain">
          <replaceable class="parameter">menu</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">sequence</replaceable>
        </arg>
        <arg choice="opt">
          <replaceable class="parameter">description</replaceable>
        </arg>
      </cmdsynopsis>
      <para>Macros are useful when you would like a single key to perform a
      series of actions. When you press
      <emphasis>key</emphasis> in menu
      <emphasis>menu</emphasis>, Mutt will behave as if you had typed
      <emphasis>sequence</emphasis>. So if you have a common sequence of
      commands you type, you can create a macro to execute those commands with
      a single key or fewer keys.</para>
      <para>
      <emphasis>menu</emphasis> is the
      <link linkend="maps">map</link> which the macro will be bound in. Multiple
      maps may be specified by separating multiple menu arguments by commas.
      Whitespace may not be used in between the menu arguments and the commas
      separating them.</para>
      <para>
      <emphasis>key</emphasis> and
      <emphasis>sequence</emphasis> are expanded by the same rules as the
      <link linkend="bind">key bindings</link> with some additions. The first is
      that control characters in
      <emphasis>sequence</emphasis> can also be specified as
      <emphasis>^x</emphasis>. In order to get a caret (
      <quote>^</quote>) you need to use
      <emphasis>^^</emphasis>. Secondly, to specify a certain key such as
      <emphasis>up</emphasis> or to invoke a function directly, you can use the
      format
      <emphasis>&lt;key name&gt;</emphasis>and
      <emphasis>&lt;function name&gt;</emphasis>. For a listing of key names
      see the section on
      <link linkend="bind">key bindings</link>. Functions are listed in the
      <link linkend="functions">reference</link>.</para>
      <para>The advantage with using function names directly is that the macros
      will work regardless of the current key bindings, so they are not
      dependent on the user having particular key definitions. This makes them
      more robust and portable, and also facilitates defining of macros in
      files used by more than one user (e.g., the system Muttrc).</para>
      <para>Optionally you can specify a descriptive text after
      <emphasis>sequence</emphasis>, which is shown in the help screens if they
      contain a description.</para>
      <note>
        <para>Macro definitions (if any) listed in the help screen(s), are
        silently truncated at the screen width, and are not wrapped.</para>
      </note>
    </sect1>

    <sect1 id="color">
      <title>Using Color and Mono Video Attributes</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>color</command>
        <arg choice="plain">
          <replaceable class="parameter">object</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <command>color</command>
        <group choice="req">
          <arg choice="plain">
            <option>header</option>
          </arg>
          <arg choice="plain">
            <option>body</option>
          </arg>
        </group>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <command>color</command>
        <arg choice="plain">
          <option>index-object</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <command>color</command>
        <arg choice="plain">
          <option>compose</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">composeobject</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <command>uncolor</command>
        <group choice="req">
          <arg choice="plain">
            <option>index-object</option>
          </arg>
          <arg choice="plain">
            <option>header</option>
          </arg>
          <arg choice="plain">
            <option>body</option>
          </arg>
        </group>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>If your terminal supports color, you can spice up Mutt by creating
      your own color scheme. To define the color of an object (type of
      information), you must specify both a foreground color
      <emphasis>and</emphasis> a background color (it is not possible to only
      specify one or the other).</para>
      <para>
      <emphasis>header</emphasis> and
      <emphasis>body</emphasis> match
      <emphasis>regexp</emphasis> in the header/body of a message,
      <emphasis>index-object</emphasis> can match
      <emphasis>pattern</emphasis>(see
      <xref linkend="patterns" />) in the message index. Note that IMAP
      server-side searches (=b, =B, =h) are not supported for color index
      patterns.</para>
      <para>When
      <link linkend="header-color-partial">$header_color_partial</link> is unset
      (the default), a
      <emphasis>header</emphasis> matched by
      <emphasis>regexp</emphasis> will have color applied to the entire header.
      When set, color is applied only to the exact text matched by
      <emphasis>regexp</emphasis>.</para>
      <para>
      <emphasis>object</emphasis> can be one of:</para>
      <itemizedlist>
        <listitem>
          <para>attachment</para>
        </listitem>
        <listitem>
          <para>bold (highlighting bold patterns in the body of
          messages)</para>
        </listitem>
        <listitem>
          <para>error (error messages printed by Mutt)</para>
        </listitem>
        <listitem>
          <para>hdrdefault (default color of the message header in the
          pager)</para>
        </listitem>
        <listitem>
          <para>index_author (color of the author name in the index, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>index_collapsed (the number of messages in a collapsed thread
          in the index)</para>
        </listitem>
        <listitem>
          <para>index_date (color of the date field in the index)</para>
        </listitem>
        <listitem>
          <para>index_flags (color of the message flags in the index)</para>
        </listitem>
        <listitem>
          <para>index_label (color of the message label in the index)</para>
        </listitem>
        <listitem>
          <para>index_number (color of the message number in the index)</para>
        </listitem>
        <listitem>
          <para>index_size (color of the message size and line number in the
          index)</para>
        </listitem>
        <listitem>
          <para>index_subject (color of the subject in the index, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>indicator (arrow or bar used to indicate the current item in a
          menu)</para>
        </listitem>
        <listitem>
          <para>markers (the
          <quote>+</quote>markers at the beginning of wrapped lines in the
          pager)</para>
        </listitem>
        <listitem>
          <para>message (informational messages)</para>
        </listitem>
        <listitem>
          <para>normal</para>
        </listitem>
        <listitem>
          <para>
          <link linkend="feature/progress">progress</link>(visual progress bar)</para>
        </listitem>
        <listitem>
          <para>prompt</para>
        </listitem>
        <listitem>
          <para>quoted (text matching
          <link linkend="quote-regexp">$quote_regexp</link> in the body of a
          message)</para>
        </listitem>
        <listitem>
          <para>quoted1, quoted2, ..., quoted
          <emphasis>N</emphasis>(higher levels of quoting)</para>
        </listitem>
        <listitem>
          <para>search (highlighting of words in the pager)</para>
        </listitem>
        <listitem>
          <para>signature</para>
        </listitem>
        <listitem>
          <para>status (mode lines used to display info about the mailbox or
          message)</para>
        </listitem>
        <listitem>
          <para>tilde (the
          <quote>~</quote>used to pad blank lines in the pager)</para>
        </listitem>
        <listitem>
          <para>tree (thread tree drawn in the message index and attachment
          menu)</para>
        </listitem>
        <listitem>
          <para>underline (highlighting underlined patterns in the body of
          messages)</para>
        </listitem>
      </itemizedlist>
      <para>
      <emphasis>composeobject</emphasis> can be one of:</para>
      <itemizedlist>
        <listitem>
          <para>header</para>
        </listitem>
        <listitem>
          <para>security_encrypt</para>
        </listitem>
        <listitem>
          <para>security_sign</para>
        </listitem>
        <listitem>
          <para>security_both</para>
        </listitem>
        <listitem>
          <para>security_none</para>
        </listitem>
      </itemizedlist>
      <para>
      <emphasis>index-object</emphasis> can be one of the following:</para>
      <itemizedlist>
        <listitem>
          <para>index (default highlighting of the entire index line, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>index_date (the date field)</para>
        </listitem>
        <listitem>
          <para>index_flags (the message flags, %S %Z, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>index_number (the message number, %C)</para>
        </listitem>
        <listitem>
          <para>index_collapsed (the number of messages in a collapsed thread,
          %M)</para>
        </listitem>
        <listitem>
          <para>index_author (the author name, %A %a %F %L %n, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>index_subject (the subject, %s, uses
          <emphasis>pattern</emphasis>)</para>
        </listitem>
        <listitem>
          <para>index_size (the message size, %c %l)</para>
        </listitem>
        <listitem>
          <para>index_label (the message label, %y %Y)</para>
        </listitem>
        <listitem>
          <para>index_tags (the transformed message tags, %g)</para>
        </listitem>
        <listitem>
          <para>index_tag (an individual message tag, %G, uses
          <emphasis>pattern / tag name</emphasis>)</para>
        </listitem>
      </itemizedlist>
      <para>
      <emphasis>foreground</emphasis> and
      <emphasis>background</emphasis> can be one of the following:</para>
      <itemizedlist>
        <listitem>
          <para>white</para>
        </listitem>
        <listitem>
          <para>black</para>
        </listitem>
        <listitem>
          <para>green</para>
        </listitem>
        <listitem>
          <para>magenta</para>
        </listitem>
        <listitem>
          <para>blue</para>
        </listitem>
        <listitem>
          <para>cyan</para>
        </listitem>
        <listitem>
          <para>yellow</para>
        </listitem>
        <listitem>
          <para>red</para>
        </listitem>
        <listitem>
          <para>default</para>
        </listitem>
        <listitem>
          <para>color
          <emphasis>x</emphasis></para>
        </listitem>
      </itemizedlist>
      <para>
      <emphasis>foreground</emphasis> can optionally be prefixed with the
      keyword
      <literal>bright</literal> to make the foreground color boldfaced (e.g.,
      <literal>brightred</literal>).</para>
      <para>If your terminal supports it, the special keyword
      <emphasis>default</emphasis> can be used as a transparent color. The value
      <emphasis>brightdefault</emphasis> is also valid. If Mutt is linked
      against the
      <emphasis>S-Lang</emphasis> library, you also need to set the
      <literal>$COLORFGBG</literal> environment variable to the default colors
      of your terminal for this to work; for example (for Bourne-like
      shells):</para>
      <screen>
set COLORFGBG="green;black"
export COLORFGBG
</screen>
      <note>
        <para>The
        <emphasis>S-Lang</emphasis> library requires you to use the
        <emphasis>lightgray</emphasis> and
        <emphasis>brown</emphasis> keywords instead of
        <emphasis>white</emphasis> and
        <emphasis>yellow</emphasis> when setting this variable.</para>
      </note>
      <note>
        <para>The
        <command>uncolor</command> command can be applied to the index, header
        and body objects only. It removes entries from the list. You
        <emphasis>must</emphasis> specify the same pattern specified in the
        <command>color</command> command for it to be removed. The pattern
        <quote>*</quote>is a special token which means to clear the color list
        of all entries.</para>
      </note>
      <para>Mutt also recognizes the keywords
      <emphasis>color0</emphasis>,
      <emphasis>color1</emphasis>, ...,
      <emphasis>color</emphasis>
      <emphasis>N-1</emphasis>(
      <emphasis>N</emphasis> being the number of colors supported by your
      terminal). This is useful when you remap the colors for your display (for
      example by changing the color associated with
      <emphasis>color2</emphasis> for your xterm), since color names may then
      lose their normal meaning.</para>
      <anchor id="mono" />
      <para>If your terminal does not support color, it is still possible
      change the video attributes through the use of the
      <quote>mono</quote> command. Usage:</para>
      <cmdsynopsis>
        <command>mono</command>
        <arg choice="plain">
          <replaceable class="parameter">object</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <command>mono</command>
        <group choice="req">
          <arg choice="plain">
            <option>header</option>
          </arg>
          <arg choice="plain">
            <option>body</option>
          </arg>
        </group>
        <arg choice="plain">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <command>mono</command>
        <arg choice="plain">
          <option>index</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <command>unmono</command>
        <group choice="req">
          <arg choice="plain">
            <option>index-object</option>
          </arg>
          <arg choice="plain">
            <option>header</option>
          </arg>
          <arg choice="plain">
            <option>body</option>
          </arg>
        </group>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>For
      <emphasis>object</emphasis>, see the
      <command>color</command> command.
      <emphasis>attribute</emphasis> can be one of the following:</para>
      <itemizedlist>
        <listitem>
          <para>none</para>
        </listitem>
        <listitem>
          <para>bold</para>
        </listitem>
        <listitem>
          <para>underline</para>
        </listitem>
        <listitem>
          <para>reverse</para>
        </listitem>
        <listitem>
          <para>standout</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="msg-hdr-display">
      <title>Message Header Display</title>

      <sect2 id="hdr-folding">
        <title>Header Display</title>
        <para>When displaying a message in the pager, Mutt folds long header
        lines at
        <link linkend="wrap">$wrap</link> columns. Though there're precise rules
        about where to break and how, Mutt always folds headers using a tab for
        readability. (Note that the sending side is not affected by this, Mutt
        tries to implement standards compliant folding.)</para>
      </sect2>

      <sect2 id="ignore">
        <title>Selecting Headers</title>
        <para>Usage:</para>
        <cmdsynopsis>
          <command>ignore</command>
          <arg choice="plain">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
          <command>unignore</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable>*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable>pattern</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>Messages often have many header fields added by automatic
        processing systems, or which may not seem useful to display on the
        screen. This command allows you to specify header fields which you
        don't normally want to see in the pager.</para>
        <para>You do not need to specify the full header field name. For
        example,
        <quote>ignore content-</quote>will ignore all header fields that begin
        with the pattern
        <quote>content-</quote>.
        <quote>ignore *</quote>will ignore all headers.</para>
        <para>To remove a previously added token from the list, use the
        <quote>unignore</quote> command. The
        <quote>unignore</quote> command will make Mutt display headers with the
        given pattern. For example, if you do
        <quote>ignore x-</quote>it is possible to
        <quote>unignore x-mailer</quote>.</para>
        <para>
        <quote>unignore *</quote>will remove all tokens from the ignore
        list.</para>
        <example id="ex-header-weeding">
          <title>Header weeding</title>
          <screen>
<emphasis role="comment"># Sven's draconian header weeding</emphasis>
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>
        </example>
      </sect2>

      <sect2 id="hdr-order">
        <title>Ordering Displayed Headers</title>
        <para>Usage:</para>
        <cmdsynopsis>
          <command>hdr_order</command>
          <arg choice="plain">
            <replaceable class="parameter">header</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">header</replaceable>
          </arg>
          <command>unhdr_order</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable>*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable>header</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>With the
        <command>hdr_order</command> command you can specify an order in which
        Mutt will attempt to present these headers to you when viewing
        messages.</para>
        <para>
        <quote>
        <command>unhdr_order</command>*</quote>will clear all previous headers
        from the order list, thus removing the header order effects set by the
        system-wide startup file.</para>
        <example id="ex-hdr-order">
          <title>Configuring header display order</title>
          <screen>hdr_order From Date: From: To: Cc: Subject:</screen>
        </example>
      </sect2>
    </sect1>

    <sect1 id="alternates">
      <title>Alternative Addresses</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>alternates</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>regexp</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>regexp</replaceable>
        </arg>
        <command>unalternates</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>regexp</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>With various functions, Mutt will treat messages differently,
      depending on whether you sent them or whether you received them from
      someone else. For instance, when replying to a message that you sent to a
      different party, Mutt will automatically suggest to send the response to
      the original message's recipients — responding to yourself won't make
      much sense in many cases. (See
      <link linkend="reply-to">$reply_to</link>.)</para>
      <para>Many users receive e-mail under a number of different addresses. To
      fully use Mutt's features here, the program must be able to recognize
      what e-mail addresses you receive mail under. That's the purpose of the
      <command>alternates</command> command: It takes a list of regular
      expressions, each of which can identify an address under which you
      receive e-mail.</para>
      <para>As addresses are matched using regular expressions and not exact
      strict comparisons, you should make sure you specify your addresses as
      precise as possible to avoid mismatches. For example, if you
      specify:</para>
      <screen>alternates user@example</screen>
      <para>Mutt will consider
      <quote>
        <literal>some-user@example</literal>
      </quote>as being your address, too which may not be desired. As a
      solution, in such cases addresses should be specified as:</para>
      <screen>alternates '^user@example$'</screen>
      <para>The
      <literal>-group</literal> flag causes all of the subsequent regular
      expressions to be added to the named group.</para>
      <para>The
      <command>unalternates</command> command can be used to write exceptions to
      <command>alternates</command> patterns. If an address matches something in
      an
      <command>alternates</command> command, but you nonetheless do not think it
      is from you, you can list a more precise pattern under an
      <command>unalternates</command> command.</para>
      <para>To remove a regular expression from the
      <command>alternates</command> list, use the
      <command>unalternates</command> command with exactly the same
      <emphasis>regexp</emphasis>. Likewise, if the
      <emphasis>regexp</emphasis> for an
      <command>alternates</command> command matches an entry on the
      <command>unalternates</command> list, that
      <command>unalternates</command> entry will be removed. If the
      <emphasis>regexp</emphasis> for
      <command>unalternates</command> is
      <quote>*</quote>,
      <emphasis>all entries</emphasis> on
      <command>alternates</command> will be removed.</para>
    </sect1>

    <sect1 id="lists">
      <title>Mailing Lists</title>
      <anchor id="subscribe" />
      <para>Usage:</para>
      <cmdsynopsis>
        <command>lists</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <command>unlists</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">regexp</replaceable>
          </arg>
        </group>
        <command>subscribe</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <command>unsubscribe</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">regexp</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>Mutt has a few nice features for
      <link linkend="using-lists">handling mailing lists</link>. In order to
      take advantage of them, you must specify which addresses belong to
      mailing lists, and which mailing lists you are subscribed to. Mutt also
      has limited support for auto-detecting mailing lists: it supports parsing
      <literal>mailto:</literal>links in the common
      <literal>List-Post:</literal>header which has the same effect as
      specifying the list address via the
      <command>lists</command> command (except the group feature). Once you have
      done this, the
      <link linkend="list-reply">
        <literal>&lt;list-reply&gt;</literal>
      </link>function will work for all known lists. Additionally, when you
      send a message to a subscribed list, Mutt will add a Mail-Followup-To
      header to tell other users' mail user agents not to send copies of
      replies to your personal address.</para>
      <note>
        <para>The Mail-Followup-To header is a non-standard extension which is
        not supported by all mail user agents. Adding it is not bullet-proof
        against receiving personal CCs of list messages. Also note that the
        generation of the Mail-Followup-To header is controlled by the
        <link linkend="followup-to">$followup_to</link> configuration variable
        since it's common practice on some mailing lists to send Cc upon
        replies (which is more a group- than a list-reply).</para>
      </note>
      <para>More precisely, Mutt maintains lists of patterns for the addresses
      of known and subscribed mailing lists. Every subscribed mailing list is
      known. To mark a mailing list as known, use the
      <command>list</command> command. To mark it as subscribed, use
      <command>subscribe</command>.</para>
      <para>You can use regular expressions with both commands. To mark all
      messages sent to a specific bug report's address on Debian's bug tracking
      system as list mail, for instance, you could say</para>
      <screen>subscribe [0-9]+.*@bugs.debian.org</screen>
      <para>as it's often sufficient to just give a portion of the list's
      e-mail address.</para>
      <para>Specify as much of the address as you need to to remove ambiguity.
      For example, if you've subscribed to the Mutt mailing list, you will
      receive mail addressed to
      <literal>mutt-users@mutt.org</literal>. So, to tell Mutt that this is a
      mailing list, you could add
      <literal>lists mutt-users@</literal>to your initialization file. To tell
      Mutt that you are subscribed to it, add
      <literal>
      <command>subscribe</command> mutt-users</literal> to your initialization
      file instead. If you also happen to get mail from someone whose address
      is
      <literal>mutt-users@example.com</literal>, you could use
      <literal>
      <command>lists</command>^mutt-users@mutt\\.org$</literal>or
      <literal>
      <command>subscribe</command>^mutt-users@mutt\\.org$</literal>to match
      only mail from the actual list.</para>
      <para>The
      <literal>-group</literal> flag adds all of the subsequent regular
      expressions to the named
      <link linkend="addrgroup">address group</link> in addition to adding to
      the specified address list.</para>
      <para>The
      <quote>unlists</quote> command is used to remove a token from the list of
      known and subscribed mailing-lists. Use
      <quote>unlists *</quote>to remove all tokens.</para>
      <para>To remove a mailing list from the list of subscribed mailing lists,
      but keep it on the list of known mailing lists, use
      <command>unsubscribe</command>.</para>
    </sect1>

    <sect1 id="mbox-hook">
      <title>Using Multiple Spool Mailboxes</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>mbox-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]regexp</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command is used to move read messages from a specified mailbox
      to a different mailbox automatically when you quit or change folders.
      <emphasis>regexp</emphasis> is a regular expression specifying the mailbox
      to treat as a
      <quote>spool</quote> mailbox and
      <emphasis>mailbox</emphasis> specifies where mail should be saved when
      read.</para>
      <para>The regexp parameter has
      <link linkend="shortcuts">mailbox shortcut</link> expansion performed on
      the first character. See
      <xref linkend="mailbox-hook" />for more details.</para>
      <para>Note that execution of mbox-hooks is dependent on the
      <link linkend="move">$move</link> configuration variable. If set to
      <quote>no</quote>(the default), mbox-hooks will not be executed.</para>
      <para>Unlike some of the other
      <emphasis>hook</emphasis> commands, only the
      <emphasis>first</emphasis> matching regexp is used (it is not possible to
      save read mail in more than a single mailbox).</para>
    </sect1>

    <sect1 id="mailboxes">
      <title>Monitoring Incoming Mail</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>mailboxes</command>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <command>unmailboxes</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>This command specifies folders which can receive mail and which
      will be checked for new messages periodically.</para>
      <para>
      <emphasis>folder</emphasis> can either be a local file or directory
      (Mbox/Mmdf or Maildir/Mh). If Mutt was built with POP and/or IMAP
      support,
      <emphasis>folder</emphasis> can also be a POP/IMAP folder URL. The URL
      syntax is described in
      <xref linkend="url-syntax" />, POP and IMAP are described in
      <xref linkend="pop" />and
      <xref linkend="imap" />respectively.</para>
      <para>Mutt provides a number of advanced features for handling (possibly
      many) folders and new mail within them, please refer to
      <xref linkend="feature/new-mail" />for details (including in what situations and
      how often Mutt checks for new mail).</para>
      <para>The
      <quote>unmailboxes</quote> command is used to remove a token from the list
      of folders which receive mail. Use
      <quote>unmailboxes *</quote>to remove all tokens.</para>
      <note>
        <para>The folders in the
        <command>mailboxes</command> command are resolved when the command is
        executed, so if these names contain
        <link linkend="shortcuts">shortcut characters</link>(such as
        <quote>=</quote>and
        <quote>!</quote>), any variable definition that affects these
        characters (like
        <link linkend="folder">$folder</link> and
        <link linkend="spoolfile">$spoolfile</link>) should be set before the
        <command>mailboxes</command> command. If none of these shortcuts are
        used, a local path should be absolute as otherwise Mutt tries to find
        it relative to the directory from where Mutt was started which may not
        always be desired.</para>
      </note>
    </sect1>

    <sect1 id="my-hdr">
      <title>User-Defined Headers</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>my_hdr</command>
        <arg choice="plain">
          <replaceable class="parameter">string</replaceable>
        </arg>
        <command>unmy_hdr</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">field</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>The
      <command>my_hdr</command> command allows you to create your own header
      fields which will be added to every message you send and appear in the
      editor if
      <link linkend="edit-headers">$edit_headers</link> is set.</para>
      <para>For example, if you would like to add an
      <quote>Organization:</quote>header field to all of your outgoing
      messages, you can put the command something like shown in
      <xref linkend="ex-my-hdr" />in your
      <literal>.muttrc</literal>.</para>
      <example id="ex-my-hdr">
        <title>Defining custom headers</title>
        <screen>my_hdr Organization: A Really Big Company, Anytown, USA</screen>
      </example>
      <note>
        <para>Space characters are
        <emphasis>not</emphasis> allowed between the keyword and the colon (
        <quote>:</quote>). The standard for electronic mail (RFC2822) says that
        space is illegal there, so Mutt enforces the rule.</para>
      </note>
      <para>If you would like to add a header field to a single message, you
      should either set the
      <link linkend="edit-headers">$edit_headers</link> variable, or use the
      <literal>&lt;edit-headers&gt;</literal>function (default:
      <quote>E</quote>) in the compose menu so that you can edit the header of
      your message along with the body.</para>
      <para>To remove user defined header fields, use the
      <command>unmy_hdr</command> command. You may specify an asterisk (
      <quote>*</quote>) to remove all header fields, or the fields to remove.
      For example, to remove all
      <quote>To</quote> and
      <quote>Cc</quote> header fields, you could use:</para>
      <screen>unmy_hdr to cc</screen>
    </sect1>

    <sect1 id="save-hook">
      <title>Specify Default Save Mailbox</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>save-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command is used to override the default mailbox used when
      saving messages.
      <emphasis>mailbox</emphasis> will be used as the default if the message
      matches
      <emphasis>pattern</emphasis>, see
      <xref linkend="pattern-hook" />for information on the exact
      format.</para>
      <para>To provide more flexibility and good defaults, Mutt applies the
      expandos of
      <link linkend="index-format">$index_format</link> to
      <emphasis>mailbox</emphasis> after it was expanded.</para>
      <example id="ex-save-hook-exando">
        <title>Using %-expandos in
        <command>save-hook</command></title>
        <screen>
<emphasis role="comment"># default: save all to ~/Mail/&lt;author name&gt;</emphasis>
save-hook . ~/Mail/%F
<emphasis role="comment"># save from me@turing.cs.hmc.edu and me@cs.hmc.edu to $folder/elkins</emphasis>
save-hook me@(turing\\.)?cs\\.hmc\\.edu$ +elkins
<emphasis role="comment"># save from aol.com to $folder/spam</emphasis>
save-hook aol\\.com$ +spam
</screen>
      </example>
      <para>Also see the
      <link linkend="fcc-save-hook">
        <command>fcc-save-hook</command>
      </link>command.</para>
    </sect1>

    <sect1 id="fcc-hook">
      <title>Specify Default Fcc: Mailbox When Composing</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>fcc-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command is used to save outgoing mail in a mailbox other than
      <link linkend="record">$record</link>. Mutt searches the initial list of
      message recipients for the first matching
      <emphasis>pattern</emphasis> and uses
      <emphasis>mailbox</emphasis> as the default Fcc: mailbox. If no match is
      found the message will be saved to
      <link linkend="record">$record</link> mailbox.</para>
      <para>To provide more flexibility and good defaults, Mutt applies the
      expandos of
      <link linkend="index-format">$index_format</link> to
      <emphasis>mailbox</emphasis> after it was expanded.</para>
      <para>See
      <xref linkend="pattern-hook" />for information on the exact format of
      <emphasis>pattern</emphasis>.</para>
      <screen>fcc-hook [@.]aol\\.com$ +spammers</screen>
      <para>...will save a copy of all messages going to the aol.com domain to
      the `+spammers' mailbox by default. Also see the
      <link linkend="fcc-save-hook">
        <command>fcc-save-hook</command>
      </link>command.</para>
    </sect1>

    <sect1 id="fcc-save-hook">
      <title>Specify Default Save Filename and Default Fcc: Mailbox at
      Once</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>fcc-save-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command is a shortcut, equivalent to doing both a
      <link linkend="fcc-hook">
        <command>fcc-hook</command>
      </link>and a
      <link linkend="save-hook">
        <command>save-hook</command>
      </link>with its arguments, including %-expansion on
      <emphasis>mailbox</emphasis> according to
      <link linkend="index-format">$index_format</link>.</para>
    </sect1>

    <sect1 id="send-hook">
      <title>Change Settings Based Upon Message Recipients</title>
      <anchor id="reply-hook" />
      <anchor id="send2-hook" />
      <para>Usage:</para>
      <cmdsynopsis>
        <command>reply-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
        <command>send-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
        <command>send2-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>These commands can be used to execute arbitrary configuration
      commands based upon recipients of the message.
      <emphasis>pattern</emphasis> is used to match the message, see
      <xref linkend="pattern-hook" />for details.
      <emphasis>command</emphasis> is executed when
      <emphasis>pattern</emphasis> matches.</para>
      <para>
      <command>reply-hook</command> is matched against the message you are
      <emphasis>replying to</emphasis>, instead of the message you are
      <emphasis>sending</emphasis>.
      <command>send-hook</command> is matched against all messages, both
      <emphasis>new</emphasis> and
      <emphasis>replies</emphasis>.</para>
      <note>
        <para>
        <command>reply-hook</command>s are matched
        <emphasis>before</emphasis> the
        <command>send-hook</command>,
        <emphasis>regardless</emphasis> of the order specified in the user's
        configuration file. However, you can inhibit
        <command>send-hook</command> in the reply case by using the pattern
        <literal>'! ~Q'</literal>(
        <emphasis>not replied</emphasis>, see
        <xref linkend="pattern-hook" />) in the
        <command>send-hook</command> to tell when
        <command>reply-hook</command> have been executed.</para>
      </note>
      <para>
      <command>send2-hook</command> is matched every time a message is changed,
      either by editing it, or by using the compose menu to change its
      recipients or subject.
      <command>send2-hook</command> is executed after
      <command>send-hook</command>, and can, e.g., be used to set parameters
      such as the
      <link linkend="sendmail">$sendmail</link> variable depending on the
      message's sender address.</para>
      <para>For each type of
      <command>send-hook</command> or
      <command>reply-hook</command>, when multiple matches occur, commands are
      executed in the order they are specified in the
      <literal>.muttrc</literal>(for that type of hook).</para>
      <para>Example:
      <literal>
      <command>send-hook</command> mutt "
      <command>set</command> mime_forward signature=''"</literal></para>
      <para>Another typical use for this command is to change the values of the
      <link linkend="attribution">$attribution</link>,
      <link linkend="attribution-locale">$attribution_locale</link>, and
      <link linkend="signature">$signature</link> variables in order to change
      the language of the attributions and signatures based upon the
      recipients.</para>
      <note>
        <para>
        <command>send-hook</command>'s are only executed once after getting the
        initial list of recipients. Adding a recipient after replying or
        editing the message will not cause any
        <command>send-hook</command> to be executed, similarly if
        <link linkend="autoedit">$autoedit</link> is set (as then the initial
        list of recipients is empty). Also note that
        <link linkend="my-hdr">
          <command>my_hdr</command>
        </link>commands which modify recipient headers, or the message's
        subject, don't have any effect on the current message when executed
        from a
        <command>send-hook</command>.</para>
      </note>
    </sect1>

    <sect1 id="message-hook">
      <title>Change Settings Before Formatting a Message</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>message-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command can be used to execute arbitrary configuration
      commands before viewing or formatting a message based upon information
      about the message.
      <emphasis>command</emphasis> is executed if the
      <emphasis>pattern</emphasis> matches the message to be displayed. When
      multiple matches occur, commands are executed in the order they are
      specified in the
      <literal>.muttrc</literal>.</para>
      <para>See
      <xref linkend="pattern-hook" />for information on the exact format of
      <emphasis>pattern</emphasis>.</para>
      <para>Example:</para>
      <screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>
    </sect1>

    <sect1 id="crypt-hook">
      <title>Choosing the Cryptographic Key of the Recipient</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>crypt-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">keyid</replaceable>
        </arg>
      </cmdsynopsis>
      <para>When encrypting messages with PGP/GnuPG or OpenSSL, you may want to
      associate a certain key with a given e-mail address automatically, either
      because the recipient's public key can't be deduced from the destination
      address, or because, for some reasons, you need to override the key Mutt
      would normally use. The
      <command>crypt-hook</command> command provides a method by which you can
      specify the ID of the public key to be used when encrypting messages to a
      certain recipient. You may use multiple crypt-hooks with the same regexp;
      multiple matching crypt-hooks result in the use of multiple keyids for a
      recipient. During key selection, Mutt will confirm whether each
      crypt-hook is to be used (unless the
      <link linkend="crypt-confirmhook">$crypt_confirmhook</link> option is
      unset). If all crypt-hooks for a recipient are declined, Mutt will use
      the original recipient address for key selection instead.</para>
      <para>The meaning of
      <emphasis>keyid</emphasis> is to be taken broadly in this context: You can
      either put a numerical key ID or fingerprint here, an e-mail address, or
      even just a real name.</para>
    </sect1>

    <sect1 id="push">
      <title>Adding Key Sequences to the Keyboard Buffer</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>push</command>
        <arg choice="plain">
          <replaceable class="parameter">string</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command adds the named string to the beginning of the keyboard
      buffer. The string may contain control characters, key names and function
      names like the sequence string in the
      <link linkend="macro">macro</link> command. You may use it to
      automatically run a sequence of commands at startup, or when entering
      certain folders. For example,
      <xref linkend="ex-folder-hook-push" />shows how to automatically collapse
      all threads when entering a folder.</para>
      <example id="ex-folder-hook-push">
        <title>Embedding
        <command>push</command> in
        <command>folder-hook</command></title>
        <screen>folder-hook . 'push &lt;collapse-all&gt;'</screen>
      </example>
      <para>For using functions like shown in the example, it's important to
      use angle brackets (
      <quote>&lt;</quote>and
      <quote>&gt;</quote>) to make Mutt recognize the input as a function name.
      Otherwise it will simulate individual just keystrokes, i.e.
      <quote>
        <literal>push collapse-all</literal>
      </quote>would be interpreted as if you had typed
      <quote>c</quote>, followed by
      <quote>o</quote>, followed by
      <quote>l</quote>, ..., which is not desired and may lead to very
      unexpected behavior.</para>
      <para>Keystrokes can be used, too, but are less portable because of
      potentially changed key bindings. With default bindings, this is
      equivalent to the above example:</para>
      <screen>folder-hook . 'push \eV'</screen>
      <para>because it simulates that Esc+V was pressed (which is the default
      binding of
      <literal>&lt;collapse-all&gt;</literal>).</para>
    </sect1>

    <sect1 id="exec">
      <title>Executing Functions</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>exec</command>
        <arg choice="plain">
          <replaceable class="parameter">function</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">function</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command can be used to execute any function. Functions are
      listed in the
      <link linkend="functions">function reference</link>.
      <quote>
        <command>exec</command>
        <literal>function</literal>
      </quote>is equivalent to
      <quote>
        <literal>push &lt;function&gt;</literal>
      </quote>.</para>
    </sect1>

    <sect1 id="score-command">
      <title>Message Scoring</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>score</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">value</replaceable>
        </arg>
        <command>unscore</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>The
      <command>score</command> commands adds
      <emphasis>value</emphasis> to a message's score if
      <emphasis>pattern</emphasis> matches it.
      <emphasis>pattern</emphasis> is a string in the format described in the
      <link linkend="patterns">patterns</link> section (note: For efficiency
      reasons, patterns which scan information not available in the index, such
      as
      <literal>~b</literal>,
      <literal>~B</literal>,
      <literal>~h</literal>, or
      <literal>~X</literal> may not be used).
      <emphasis>value</emphasis> is a positive or negative integer. A message's
      final score is the sum total of all matching
      <command>score</command> entries. However, you may optionally prefix
      <emphasis>value</emphasis> with an equal sign (
      <quote>=</quote>) to cause evaluation to stop at a particular entry if
      there is a match. Negative final scores are rounded up to 0.</para>
      <para>The
      <command>unscore</command> command removes score entries from the list.
      You
      <emphasis>must</emphasis> specify the same pattern specified in the
      <command>score</command> command for it to be removed. The pattern
      <quote>*</quote>is a special token which means to clear the list of all
      score entries.</para>

      <para>Scoring occurs as the messages are read in, before the mailbox is
      sorted. Because of this, patterns which depend on threading, such as
      <emphasis>~=</emphasis>,
      <emphasis>~$</emphasis>, and
      <emphasis>~()</emphasis>, will not work by default. A workaround is to push
      the scoring command in a folder hook. This will cause the mailbox to be
      rescored after it is opened and input starts being processed:</para>
      <screen>
folder-hook . 'push "&lt;enter-command&gt;score ~= 10&lt;enter&gt;"'
</screen>
    </sect1>

    <sect1 id="spam">
      <title>Spam Detection</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>spam</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">format</replaceable>
        </arg>
        <command>nospam</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>Mutt has generalized support for external spam-scoring filters. By
      defining your spam patterns with the
      <command>spam</command> and
      <literal>nospam</literal> commands, you can
      <emphasis>limit</emphasis>,
      <emphasis>search</emphasis>, and
      <emphasis>sort</emphasis> your mail based on its spam attributes, as
      determined by the external filter. You also can display the spam
      attributes in your index display using the
      <literal>%H</literal> selector in the
      <link linkend="index-format">$index_format</link> variable. (Tip: try
      <literal>%?H?[%H] ?</literal>to display spam tags only when they are
      defined for a given message.)</para>
      <para>Your first step is to define your external filter's spam patterns
      using the
      <command>spam</command> command.
      <emphasis>pattern</emphasis> should be a regular expression that matches a
      header in a mail message. If any message in the mailbox matches this
      regular expression, it will receive a
      <quote>spam tag</quote> or
      <quote>spam attribute</quote>(unless it also matches a
      <command>nospam</command> pattern — see below.) The appearance of this
      attribute is entirely up to you, and is governed by the
      <emphasis>format</emphasis> parameter.
      <emphasis>format</emphasis> can be any static text, but it also can
      include back-references from the
      <emphasis>pattern</emphasis> expression. (A regular expression
      <quote>back-reference</quote> refers to a sub-expression contained within
      parentheses.)
      <literal>%1</literal> is replaced with the first back-reference in the
      regex,
      <literal>%2</literal> with the second, etc.</para>
      <para>To match spam tags, mutt needs the corresponding header information
      which is always the case for local and POP folders but not for IMAP in
      the default configuration. Depending on the spam header to be analyzed,
      <link linkend="imap-headers">$imap_headers</link> may need to be
      adjusted.</para>
      <para>If you're using multiple spam filters, a message can have more than
      one spam-related header. You can define
      <command>spam</command> patterns for each filter you use. If a message
      matches two or more of these patterns, and the
      <link linkend="spam-separator">$spam_separator</link> variable is set to a
      string, then the message's spam tag will consist of all the
      <emphasis>format</emphasis> strings joined together, with the value of
      <link linkend="spam-separator">$spam_separator</link> separating
      them.</para>
      <para>For example, suppose one uses DCC, SpamAssassin, and PureMessage,
      then the configuration might look like in
      <xref linkend="ex-spam" />.</para>
      <example id="ex-spam">
        <title>Configuring spam detection</title>
        <screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>
      </example>
      <para>If then a message is received that DCC registered with
      <quote>many</quote> hits under the
      <quote>Fuz2</quote> checksum, and that PureMessage registered with a 97%
      probability of being spam, that message's spam tag would read
      <literal>90+/DCC-Fuz2, 97/PM</literal>. (The four characters before
      <quote>=many</quote> in a DCC report indicate the checksum used — in this
      case,
      <quote>Fuz2</quote>.)</para>
      <para>If the
      <link linkend="spam-separator">$spam_separator</link> variable is unset,
      then each spam pattern match supersedes the previous one. Instead of
      getting joined
      <emphasis>format</emphasis> strings, you'll get only the last one to
      match.</para>
      <para>The spam tag is what will be displayed in the index when you use
      <literal>%H</literal> in the
      <link linkend="index-format">$index_format</link> variable. It's also the
      string that the
      <literal>~H</literal> pattern-matching expression matches against for
      <literal>&lt;search&gt;</literal>and
      <literal>&lt;limit&gt;</literal>functions. And it's what sorting by spam
      attribute will use as a sort key.</para>
      <para>That's a pretty complicated example, and most people's actual
      environments will have only one spam filter. The simpler your
      configuration, the more effective Mutt can be, especially when it comes
      to sorting.</para>
      <para>Generally, when you sort by spam tag, Mutt will sort
      <emphasis>lexically</emphasis>— that is, by ordering strings
      alphanumerically. However, if a spam tag begins with a number, Mutt will
      sort numerically first, and lexically only when two numbers are equal in
      value. (This is like UNIX's
      <literal>sort -n</literal>.) A message with no spam attributes at all —
      that is, one that didn't match
      <emphasis>any</emphasis> of your
      <command>spam</command> patterns — is sorted at lowest priority. Numbers
      are sorted next, beginning with 0 and ranging upward. Finally,
      non-numeric strings are sorted, with
      <quote>a</quote> taking lower priority than
      <quote>z</quote>. Clearly, in general, sorting by spam tags is most
      effective when you can coerce your filter to give you a raw number. But
      in case you can't, Mutt can still do something useful.</para>
      <para>The
      <command>nospam</command> command can be used to write exceptions to
      <command>spam</command> patterns. If a header pattern matches something in
      a
      <command>spam</command> command, but you nonetheless do not want it to
      receive a spam tag, you can list a more precise pattern under a
      <command>nospam</command> command.</para>
      <para>If the
      <emphasis>pattern</emphasis> given to
      <command>nospam</command> is exactly the same as the
      <emphasis>pattern</emphasis> on an existing
      <command>spam</command> list entry, the effect will be to remove the entry
      from the spam list, instead of adding an exception. Likewise, if the
      <emphasis>pattern</emphasis> for a
      <command>spam</command> command matches an entry on the
      <command>nospam</command> list, that nospam entry will be removed. If the
      <emphasis>pattern</emphasis> for
      <command>nospam</command> is
      <quote>*</quote>,
      <emphasis>all entries on both lists</emphasis> will be removed. This might
      be the default action if you use
      <command>spam</command> and
      <command>nospam</command> in conjunction with a
      <command>folder-hook</command>.</para>
      <para>You can have as many
      <command>spam</command> or
      <command>nospam</command> commands as you like. You can even do your own
      primitive
      <command>spam</command> detection within Mutt — for example, if you
      consider all mail from
      <literal>MAILER-DAEMON</literal> to be spam, you can use a
      <command>spam</command> command like this:</para>
      <screen>spam "^From: .*MAILER-DAEMON"       "999"</screen>
    </sect1>

    <sect1 id="set">
      <title>Setting and Querying Variables</title>

      <sect2 id="var-types">
        <title>Variable Types</title>
        <para>Mutt supports these types of configuration variables:</para>
        <variablelist>
          <varlistentry>
            <term>boolean</term>
            <listitem>
              <para>A boolean expression, either
              <quote>yes</quote> or
              <quote>no</quote>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>number</term>
            <listitem>
              <para>A signed integer number in the range -32768 to
              32767.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>string</term>
            <listitem>
              <para>Arbitrary text.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>path</term>
            <listitem>
              <para>A specialized string for representing paths including
              support for mailbox shortcuts (see
              <xref linkend="shortcuts" />) as well as tilde (
              <quote>~</quote>) for a user's home directory and more.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>quadoption</term>
            <listitem>
              <para>Like a boolean but triggers a prompt when set to
              <quote>ask-yes</quote> or
              <quote>ask-no</quote> with
              <quote>yes</quote> and
              <quote>no</quote> preselected respectively.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>sort order</term>
            <listitem>
              <para>A specialized string allowing only particular words as
              values depending on the variable.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>regular expression</term>
            <listitem>
              <para>A regular expression, see
              <xref linkend="regexp" />for an introduction.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>folder magic</term>
            <listitem>
              <para>Specifies the type of folder to use:
              <emphasis>mbox</emphasis>,
              <emphasis>mmdf</emphasis>,
              <emphasis>mh</emphasis> or
              <emphasis>maildir</emphasis>. Currently only used to determine
              the type for newly created folders.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>e-mail address</term>
            <listitem>
              <para>An e-mail address either with or without realname. The
              older
              <quote>
                <literal>user@example.org (Joe User)</literal>
              </quote>form is supported but strongly deprecated.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>user-defined</term>
            <listitem>
              <para>Arbitrary text, see
              <xref linkend="set-myvar" />for details.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="set-commands">
        <title>Commands</title>
        <para>The following commands are available to manipulate and query
        variables:</para>
        <para>Usage:</para>
        <cmdsynopsis>
          <command>set</command>
          <group choice="req">
            <arg choice="plain">
              <group choice="opt">
                <arg choice="plain">
                  <option>no</option>
                </arg>
                <arg choice="plain">
                  <option>inv</option>
                </arg>
              </group>
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">variable=value</replaceable>
            </arg>
          </group>
          <arg choice="opt" rep="repeat"></arg>
          <command>toggle</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <command>unset</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <command>reset</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
        </cmdsynopsis>
        <para>This command is used to set (and unset)
        <link linkend="variables">configuration variables</link>. There are
        four basic types of variables: boolean, number, string and quadoption.
        <emphasis>boolean</emphasis> variables can be
        <emphasis>set</emphasis>(true) or
        <emphasis>unset</emphasis>(false).
        <emphasis>number</emphasis> variables can be assigned a positive integer
        value.
        <emphasis>string</emphasis> variables consist of any number of printable
        characters and must be enclosed in quotes if they contain spaces or
        tabs. You may also use the escape sequences
        <quote>\n</quote> and
        <quote>\t</quote> for newline and tab, respectively.
        <emphasis>quadoption</emphasis> variables are used to control whether or
        not to be prompted for certain actions, or to specify a default action.
        A value of
        <emphasis>yes</emphasis> will cause the action to be carried out
        automatically as if you had answered yes to the question. Similarly, a
        value of
        <emphasis>no</emphasis> will cause the action to be carried out as if
        you had answered
        <quote>no.</quote>A value of
        <emphasis>ask-yes</emphasis> will cause a prompt with a default answer
        of
        <quote>yes</quote> and
        <emphasis>ask-no</emphasis> will provide a default answer of
        <quote>no.</quote></para>
        <para>Prefixing a variable with
        <quote>no</quote> will unset it. Example:
        <literal>
        <command>set</command> noaskbcc</literal>.</para>
        <para>For
        <emphasis>boolean</emphasis> variables, you may optionally prefix the
        variable name with
        <literal>inv</literal> to toggle the value (on or off). This is useful
        when writing macros. Example:
        <literal>
        <command>set</command> invsmart_wrap</literal>.</para>
        <para>The
        <command>toggle</command> command automatically prepends the
        <literal>inv</literal> prefix to all specified variables.</para>
        <para>The
        <command>unset</command> command automatically prepends the
        <literal>no</literal> prefix to all specified variables.</para>
        <para>Using the
        <literal>&lt;enter-command&gt;</literal>function in the
        <emphasis>index</emphasis> menu, you can query the value of a variable
        by prefixing the name of the variable with a question mark:</para>
        <screen>set ?allow_8bit</screen>
        <para>The question mark is actually only required for boolean and
        quadoption variables.</para>
        <para>The
        <command>reset</command> command resets all given variables to the
        compile time defaults (hopefully mentioned in this manual). If you use
        the command
        <command>set</command> and prefix the variable with
        <quote>&amp;</quote>this has the same behavior as the
        <command>reset</command> command.</para>
        <para>With the
        <command>reset</command> command there exists the special variable
        <quote>all</quote>, which allows you to reset all variables to their
        system defaults.</para>
      </sect2>

      <sect2 id="set-myvar">
        <title>User-Defined Variables</title>

        <sect3 id="set-myvar-intro">
          <title>Introduction</title>
          <para>Along with the variables listed in the
          <link linkend="variables">Configuration variables</link> section, Mutt
          supports user-defined variables with names starting with
          <literal>my_</literal> as in, for example,
          <literal>my_cfgdir</literal>.</para>
          <para>The
          <command>set</command> command either creates a custom
          <literal>my_</literal> variable or changes its value if it does exist
          already. The
          <command>unset</command> and
          <command>reset</command> commands remove the variable entirely.</para>
          <para>Since user-defined variables are expanded in the same way that
          environment variables are (except for the
          <link linkend="shell-escape">shell-escape</link> command and backtick
          expansion), this feature can be used to make configuration files more
          readable.</para>
        </sect3>

        <sect3 id="set-myvar-examples">
          <title>Examples</title>
          <para>The following example defines and uses the variable
          <literal>my_cfgdir</literal> to abbreviate the calls of the
          <link linkend="source">
            <command>source</command>
          </link>command:</para>
          <example id="ex-myvar1">
            <title>Using user-defined variables for config file
            readability</title>
            <screen>
set my_cfgdir = $HOME/mutt/config
source $my_cfgdir/hooks $my_cfgdir/macros
<emphasis role="comment"># more source commands...</emphasis>
</screen>
          </example>
          <para>A custom variable can also be used in macros to backup the
          current value of another variable. In the following example, the
          value of the
          <link linkend="delete">$delete</link> is changed temporarily while its
          original value is saved as
          <literal>my_delete</literal>. After the macro has executed all
          commands, the original value of
          <link linkend="delete">$delete</link> is restored.</para>
          <example id="ex-myvar2">
            <title>Using user-defined variables for backing up other config
            option values</title>
            <screen>
macro pager ,x '\
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;\
&lt;enter-command&gt;set delete=yes&lt;enter&gt;\
...\
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>
          </example>
          <para>Since Mutt expands such values already when parsing the
          configuration file(s), the value of
          <literal>$my_delete</literal> in the last example would be the value
          of
          <link linkend="delete">$delete</link> exactly as it was at that point
          during parsing the configuration file. If another statement would
          change the value for
          <link linkend="delete">$delete</link> later in the same or another
          file, it would have no effect on
          <literal>$my_delete</literal>. However, the expansion can be deferred
          to runtime, as shown in the next example, when escaping the dollar
          sign.</para>
          <example id="ex-myvar3">
            <title>Deferring user-defined variable expansion to runtime</title>
            <screen>
macro pager &lt;PageDown&gt; "\
&lt;enter-command&gt; set my_old_pager_stop=\$pager_stop pager_stop&lt;Enter&gt;\
&lt;next-page&gt;\
&lt;enter-command&gt; set pager_stop=\$my_old_pager_stop&lt;Enter&gt;\
&lt;enter-command&gt; unset my_old_pager_stop&lt;Enter&gt;"
</screen>
          </example>
          <para>Note that there is a space between
          <literal>&lt;enter-command&gt;</literal>and the
          <command>set</command> configuration command, preventing Mutt from
          recording the
          <command>macro</command>'s commands into its history.</para>
        </sect3>
      </sect2>

      <sect2 id="set-conversions">
        <title>Type Conversions</title>
        <para>Variables are always assigned string values which Mutt parses
        into its internal representation according to the type of the variable,
        for example an integer number for numeric types. For all queries
        (including $-expansion) the value is converted from its internal type
        back into string. As a result, any variable can be assigned any value
        given that its content is valid for the target. This also counts for
        custom variables which are of type string. In case of parsing errors,
        Mutt will print error messages.
        <xref linkend="ex-myvar4" />demonstrates type conversions.</para>
        <example id="ex-myvar4">
          <title>Type conversions using variables</title>
          <screen>
set my_lines = "5"                <emphasis role="comment"># value is string "5"</emphasis>
set pager_index_lines = $my_lines <emphasis role="comment"># value is integer 5</emphasis>
set my_sort = "date-received"     <emphasis role="comment"># value is string "date-received"</emphasis>
set sort = "last-$my_sort"        <emphasis role="comment"># value is sort last-date-received</emphasis>
set my_inc = $read_inc            <emphasis role="comment"># value is string "10" (default of $read_inc)</emphasis>
set my_foo = $my_inc
          <emphasis role="comment"># value is string "10"</emphasis>
</screen>
        </example>
        <para>These assignments are all valid. If, however, the value of
        <literal>$my_lines</literal> would have been
        <quote>five</quote>(or something else that cannot be parsed into a
        number), the assignment to
        <literal>$pager_index_lines</literal> would have produced an error
        message.</para>
        <para>Type conversion applies to all configuration commands which take
        arguments. But please note that every expanded value of a variable is
        considered just a single token. A working example is:</para>
        <screen>
set my_pattern = "~A"
set my_number = "10"
<emphasis role="comment"># same as: score ~A +10</emphasis>
score $my_pattern +$my_number</screen>
        <para>What does
        <emphasis>not</emphasis> work is:</para>
        <screen>
set my_mx = "+mailbox1 +mailbox2"
mailboxes $my_mx +mailbox3</screen>
        <para>because the value of
        <literal>$my_mx</literal> is interpreted as a single mailbox named
        <quote>+mailbox1 +mailbox2</quote> and not two distinct
        mailboxes.</para>
      </sect2>
    </sect1>

    <sect1 id="source">
      <title>Reading Initialization Commands From Another File</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>source</command>
        <arg choice="plain" rep="repeat">
          <replaceable class="parameter">file</replaceable>
        </arg>
      </cmdsynopsis>
      <para>This command allows the inclusion of initialization commands from
      other files. For example, I place all of my aliases in
      <literal>~/.mail_aliases</literal> so that I can make my
      <literal>~/.muttrc</literal> readable and keep my aliases private.</para>
      <para>If the filename begins with a tilde (
      <quote>~</quote>), it will be expanded to the path of your home
      directory.</para>
      <para>If the filename ends with a vertical bar (
      <quote>|</quote>), then
      <emphasis>filename</emphasis> is considered to be an executable program
      from which to read input (e.g.
      <literal>
      <command>source</command>~/bin/myscript|</literal>).</para>
    </sect1>

    <sect1 id="unhook">
      <title>Removing Hooks</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>unhook</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">hook-type</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>This command permits you to flush hooks you have previously
      defined. You can either remove all hooks by giving the
      <quote>*</quote>character as an argument, or you can remove all hooks of
      a specific type by saying something like
      <literal>
      <command>unhook</command> send-hook</literal>.</para>
    </sect1>

    <sect1 id="formatstrings">
      <title>Format Strings</title>

      <sect2 id="formatstrings-basics">
        <title>Basic usage</title>
        <para>Format strings are a general concept you'll find in several
        locations through the Mutt configuration, especially in the
        <link linkend="index-format">$index_format</link>,
        <link linkend="pager-format">$pager_format</link>,
        <link linkend="status-format">$status_format</link>, and other related
        variables. These can be very straightforward, and it's quite possible
        you already know how to use them.</para>
        <para>The most basic format string element is a percent symbol followed
        by another character. For example,
        <literal>%s</literal> represents a message's Subject: header in the
        <link linkend="index-format">$index_format</link> variable. The
        <quote>expandos</quote> available are documented with each format
        variable, but there are general modifiers available with all formatting
        expandos, too. Those are our concern here.</para>
        <para>Some of the modifiers are borrowed right out of C (though you
        might know them from Perl, Python, shell, or another language). These
        are the
        <literal>[-]m.n</literal> modifiers, as in
        <literal>%-12.12s</literal>. As with such programming languages, these
        modifiers allow you to specify the minimum and maximum size of the
        resulting string, as well as its justification. If the
        <quote>-</quote>sign follows the percent, the string will be
        left-justified instead of right-justified. If there's a number
        immediately following that, it's the minimum amount of space the
        formatted string will occupy — if it's naturally smaller than that, it
        will be padded out with spaces. If a decimal point and another number
        follow, that's the maximum space allowable — the string will not be
        permitted to exceed that width, no matter its natural size. Each of
        these three elements is optional, so that all these are legal format
        strings:
        <literal>%-12s</literal>,
        <literal>%4c</literal>,
        <literal>%.15F</literal> and
        <literal>%-12.15L</literal>.</para>
        <para>Mutt adds some other modifiers to format strings. If you use an
        equals symbol (
        <literal>=</literal>) as a numeric prefix (like the minus above), it
        will force the string to be centered within its minimum space range.
        For example,
        <literal>%=14y</literal> will reserve 14 characters for the %y expansion
        — that's the set of message keywords (formerly X-Label). If the
        expansion results in a string less than 14 characters, it will be
        centered in a 14-character space. If the X-Label for a message were
        <quote>test</quote>, that expansion would look like
        <quote>
        &#160;&#160;&#160;&#160;&#160;test&#160;&#160;&#160;&#160;&#160;</quote>.</para>
        <para>There are two very little-known modifiers that affect the way
        that an expando is replaced. If there is an underline (
        <quote>_</quote>) character between any format modifiers (as above) and
        the expando letter, it will expands in all lower case. And if you use a
        colon (
        <quote>:</quote>), it will replace all decimal points with
        underlines.</para>
      </sect2>

      <sect2 id="formatstrings-conditionals">
        <title>Conditionals</title>
        <para>Depending on the format string variable, some of its sequences
        can be used to optionally print a string if their value is nonzero. For
        example, you may only want to see the number of flagged messages if
        such messages exist, since zero is not particularly meaningful. To
        optionally print a string based upon one of the above sequences, the
        following construct is used:</para>
        <screen>%?&lt;sequence_char&gt;?&lt;optional_string&gt;?</screen>
        <para>where
        <emphasis>sequence_char</emphasis> is an expando, and
        <emphasis>optional_string</emphasis> is the string you would like
        printed if
        <emphasis>sequence_char</emphasis> is nonzero.
        <emphasis>optional_string</emphasis> may contain other sequences as well
        as normal text, but you may not nest optional strings.</para>
        <para>Here is an example illustrating how to optionally print the
        number of new messages in a mailbox in
        <link linkend="status-format">$status_format</link>:</para>
        <screen>%?n?%n new messages.?</screen>
        <para>You can also switch between two strings using the following
        construct:</para>
        <screen>%?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?</screen>
        <para>If the value of
        <emphasis>sequence_char</emphasis> is non-zero,
        <emphasis>if_string</emphasis> will be expanded, otherwise
        <emphasis>else_string</emphasis> will be expanded.</para>
        <para>The conditional sequences can also be nested by using the %&lt;
        and &gt; operators. The %? notation can still be used but requires
        quoting. For example:</para>
        <screen>
%&lt;x?true&amp;false&gt;
%&lt;x?%&lt;y?%&lt;z?xyz&amp;xy&gt;&amp;x&gt;&amp;none&gt;
</screen>
        <para>For more examples, see
        <xref linkend="feature/nested-if" /></para>
      </sect2>

      <sect2 id="formatstrings-filters">
        <title>Filters</title>
        <para>Any format string ending in a vertical bar (
        <quote>|</quote>) will be expanded and piped through the first word in
        the string, using spaces as separator. The string returned will be used
        for display. If the returned string ends in %, it will be passed
        through the formatter a second time. This allows the filter to generate
        a replacement format string including % expandos.</para>
        <para>All % expandos in a format string are expanded before the script
        is called so that:</para>
        <example id="ex-fmtpipe">
          <title>Using external filters in format strings</title>
          <screen>set status_format="script.sh '%r %f (%L)'|"</screen>
        </example>
        <para>will make Mutt expand
        <literal>%r</literal>,
        <literal>%f</literal> and
        <literal>%L</literal> before calling the script. The example also shows
        that arguments can be quoted: the script will receive the expanded
        string between the single quotes as the only argument.</para>
        <para>A practical example is the
        <literal>mutt_xtitle</literal> script installed in the
        <literal>samples</literal> subdirectory of the Mutt documentation: it
        can be used as filter for
        <link linkend="status-format">$status_format</link> to set the current
        terminal's title, if supported.</para>
      </sect2>

      <sect2 id="formatstrings-padding">
        <title>Padding</title>
        <para>In most format strings, Mutt supports different types of padding
        using special %-expandos:</para>
        <variablelist>
          <varlistentry>
            <term>
              <literal>%|X</literal>
            </term>
            <listitem>
              <para>When this occurs, Mutt will fill the rest of the line with
              the character
              <literal>X</literal>. For example, filling the rest of the line
              with dashes is done by setting:</para>
              <screen>set status_format = "%v on %h: %B: %?n?%n&amp;no? new messages %|-"</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>%&gt;X</literal>
            </term>
            <listitem>
              <para>Since the previous expando stops at the end of line, there
              must be a way to fill the gap between two items via the
              <literal>%&gt;X</literal> expando: it puts as many characters
              <literal>X</literal> in between two items so that the rest of the
              line will be right-justified. For example, to not put the version
              string and hostname the above example on the left but on the
              right and fill the gap with spaces, one might use (note the space
              after
              <literal>%&gt;</literal>):</para>
              <screen>set status_format = "%B: %?n?%n&amp;no? new messages %&gt; (%v on %h)"</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>%*X</literal>
            </term>
            <listitem>
              <para>Normal right-justification will print everything to the
              left of the
              <literal>%&gt;</literal>, displaying padding and whatever lies to
              the right only if there's room. By contrast,
              <quote>soft-fill</quote> gives priority to the right-hand side,
              guaranteeing space to display it and showing padding only if
              there's still room. If necessary, soft-fill will eat text
              leftwards to make room for rightward text. For example, to
              right-justify the subject making sure as much as possible of it
              fits on screen, one might use (note two spaces after
              <literal>%*</literal>: the second ensures there's a space between
              the truncated right-hand side and the subject):</para>
              <screen>set index_format="%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?)%*  %s"</screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="formatstrings-conditional-dates">
        <title>Conditional Dates</title>
        <para>This feature allows the format of dates in the index to vary based
        on how recent the message is. This is especially useful in combination
        with the <link linkend="feature/nested-if">nested-if feature</link>.</para>
        <para>For example, using
        <literal>
        %&lt;[y?%&lt;[d?%[%H:%M]&amp;%[%m/%d]&gt;&amp;%[%y.%m]&gt;</literal>for
        the date in the
        <literal>$index_format</literal> will produce a display like:</para>
        <screen>
   1   + 14.12 Grace Hall      (   13) Gulliver's Travels
   2   + 10/02 Callum Harrison (   48) Huckleberry Finn
   3     12:17 Rhys Lee        (   42) The Lord Of The Rings
</screen>
      </sect2>
    </sect1>

    <sect1 id="mailto-allow">
      <title>Control allowed header fields in a mailto: URL</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>mailto_allow</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">header-field</replaceable>
          </arg>
        </group>
        <command>unmailto_allow</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">header-field</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>As a security measure, Mutt will only add user-approved header
      fields from a
      <literal>mailto:</literal>URL. This is necessary since Mutt will handle
      certain header fields, such as
      <literal>Attach:</literal>, in a special way. The
      <literal>mailto_allow</literal> and
      <literal>unmailto_allow</literal> commands allow the user to modify the
      list of approved headers.</para>
      <para>Mutt initializes the default list to contain only the
      <literal>Subject</literal> and
      <literal>Body</literal> header fields, which are the only requirement
      specified by the
      <literal>mailto:</literal>specification in RFC2368, and
      the <literal>Cc</literal>, <literal>In-Reply-To</literal>,
      <literal>References</literal> headers to aid with replies to
      mailing lists.</para>
    </sect1>
  </chapter>

  <chapter id="guide/advancedusage">
    <title>Advanced Usage</title>

    <sect1 id="charset-handling">
      <title>Character Set Handling</title>
      <para>A
      <quote>character set</quote> is basically a mapping between bytes and
      glyphs and implies a certain character encoding scheme. For example, for
      the ISO 8859 family of character sets, an encoding of 8bit per character
      is used. For the Unicode character set, different character encodings may
      be used, UTF-8 being the most popular. In UTF-8, a character is
      represented using a variable number of bytes ranging from 1 to 4.</para>
      <para>Since Mutt is a command-line tool run from a shell, and delegates
      certain tasks to external tools (such as an editor for composing/editing
      messages), all of these tools need to agree on a character set and
      encoding. There exists no way to reliably deduce the character set a
      plain text file has. Interoperability is gained by the use of
      well-defined environment variables. The full set can be printed by
      issuing
      <literal>locale</literal> on the command line.</para>
      <para>Upon startup, Mutt determines the character set on its own using
      routines that inspect locale-specific environment variables. Therefore,
      it is generally not necessary to set the
      <literal>$charset</literal> variable in Mutt. It may even be
      counter-productive as Mutt uses system and library functions that derive
      the character set themselves and on which Mutt has no influence. It's
      safest to let Mutt work out the locale setup itself.</para>
      <para>If you happen to work with several character sets on a regular
      basis, it's highly advisable to use Unicode and an UTF-8 locale. Unicode
      can represent nearly all characters in a message at the same time. When
      not using a Unicode locale, it may happen that you receive messages with
      characters not representable in your locale. When displaying such a
      message, or replying to or forwarding it, information may get lost
      possibly rendering the message unusable (not only for you but also for
      the recipient, this breakage is not reversible as lost information cannot
      be guessed).</para>
      <para>A Unicode locale makes all conversions superfluous which eliminates
      the risk of conversion errors. It also eliminates potentially wrong
      expectations about the character set between Mutt and external
      programs.</para>
      <para>The terminal emulator used also must be properly configured for the
      current locale. Terminal emulators usually do
      <emphasis>not</emphasis> derive the locale from environment variables,
      they need to be configured separately. If the terminal is incorrectly
      configured, Mutt may display random and unexpected characters (question
      marks, octal codes, or just random glyphs), format strings may not work
      as expected, you may not be abled to enter non-ascii characters, and
      possible more. Data is always represented using bytes and so a correct
      setup is very important as to the machine, all character sets
      <quote>look</quote> the same.</para>
      <para>Warning: A mismatch between what system and library functions think
      the locale is and what Mutt was told what the locale is may make it
      behave badly with non-ascii input: it will fail at seemingly random
      places. This warning is to be taken seriously since not only local mail
      handling may suffer: sent messages may carry wrong character set
      information the
      <emphasis>receiver</emphasis> has too deal with. The need to set
      <literal>$charset</literal> directly in most cases points at terminal and
      environment variable setup problems, not Mutt problems.</para>
      <para>A list of officially assigned and known character sets can be found
      at
      <ulink url="http://www.iana.org/assignments/character-sets">IANA</ulink>,
      a list of locally supported locales can be obtained by running
      <literal>locale -a</literal>.</para>
    </sect1>

    <sect1 id="regexp">
      <title>Regular Expressions</title>
      <para>All string patterns in Mutt including those in more complex
      <link linkend="patterns">patterns</link> must be specified using regular
      expressions (regexp) in the
      <quote>POSIX extended</quote> syntax (which is more or less the syntax
      used by egrep and GNU awk). For your convenience, we have included below
      a brief description of this syntax.</para>
      <para>The search is case sensitive if the pattern contains at least one
      upper case letter, and case insensitive otherwise.</para>
      <note>
        <para>
        <quote>\</quote>must be quoted if used for a regular expression in an
        initialization command:
        <quote>\\</quote>.</para>
      </note>
      <para>A regular expression is a pattern that describes a set of strings.
      Regular expressions are constructed analogously to arithmetic
      expressions, by using various operators to combine smaller
      expressions.</para>
      <note>
        <para>The regular expression can be enclosed/delimited by either " or '
        which is useful if the regular expression includes a white-space
        character. See
        <xref linkend="muttrc-syntax" />for more information on " and '
        delimiter processing. To match a literal " or ' you must preface it
        with \ (backslash).</para>
      </note>
      <para>The fundamental building blocks are the regular expressions that
      match a single character. Most characters, including all letters and
      digits, are regular expressions that match themselves. Any metacharacter
      with special meaning may be quoted by preceding it with a
      backslash.</para>
      <para>The period
      <quote>.</quote>matches any single character. The caret
      <quote>^</quote>and the dollar sign
      <quote>$</quote>are metacharacters that respectively match the empty
      string at the beginning and end of a line.</para>
      <para>A list of characters enclosed by
      <quote>[</quote>and
      <quote>]</quote>matches any single character in that list; if the first
      character of the list is a caret
      <quote>^</quote>then it matches any character
      <emphasis>not</emphasis> in the list. For example, the regular expression
      <emphasis>[0123456789]</emphasis>matches any single digit. A range of
      ASCII characters may be specified by giving the first and last
      characters, separated by a hyphen
      <quote>-</quote>. Most metacharacters lose their special meaning inside
      lists. To include a literal
      <quote>]</quote>place it first in the list. Similarly, to include a
      literal
      <quote>^</quote>place it anywhere but first. Finally, to include a
      literal hyphen
      <quote>-</quote>place it last.</para>
      <para>Certain named classes of characters are predefined. Character
      classes consist of
      <quote>[:</quote>, a keyword denoting the class, and
      <quote>:]</quote>. The following classes are defined by the POSIX
      standard in
      <xref linkend="posix-regex-char-classes" /></para>

      <table id="posix-regex-char-classes">
        <title>POSIX regular expression character classes</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Character class</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>[:alnum:]</entry>
              <entry>Alphanumeric characters</entry>
            </row>
            <row>
              <entry>[:alpha:]</entry>
              <entry>Alphabetic characters</entry>
            </row>
            <row>
              <entry>[:blank:]</entry>
              <entry>Space or tab characters</entry>
            </row>
            <row>
              <entry>[:cntrl:]</entry>
              <entry>Control characters</entry>
            </row>
            <row>
              <entry>[:digit:]</entry>
              <entry>Numeric characters</entry>
            </row>
            <row>
              <entry>[:graph:]</entry>
              <entry>Characters that are both printable and visible. (A space
              is printable, but not visible, while an
              <quote>a</quote> is both)</entry>
            </row>
            <row>
              <entry>[:lower:]</entry>
              <entry>Lower-case alphabetic characters</entry>
            </row>
            <row>
              <entry>[:print:]</entry>
              <entry>Printable characters (characters that are not control
              characters)</entry>
            </row>
            <row>
              <entry>[:punct:]</entry>
              <entry>Punctuation characters (characters that are not letter,
              digits, control characters, or space characters)</entry>
            </row>
            <row>
              <entry>[:space:]</entry>
              <entry>Space characters (such as space, tab and formfeed, to name
              a few)</entry>
            </row>
            <row>
              <entry>[:upper:]</entry>
              <entry>Upper-case alphabetic characters</entry>
            </row>
            <row>
              <entry>[:xdigit:]</entry>
              <entry>Characters that are hexadecimal digits</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>A character class is only valid in a regular expression inside the
      brackets of a character list.</para>
      <note>
        <para>Note that the brackets in these class names are part of the
        symbolic names, and must be included in addition to the brackets
        delimiting the bracket list. For example,
        <emphasis>[[:digit:]]</emphasis>is equivalent to
        <emphasis>[0-9]</emphasis>.</para>
      </note>
      <para>Two additional special sequences can appear in character lists.
      These apply to non-ASCII character sets, which can have single symbols
      (called collating elements) that are represented with more than one
      character, as well as several characters that are equivalent for
      collating or sorting purposes:</para>
      <variablelist>
        <varlistentry>
          <term>Collating Symbols</term>
          <listitem>
            <para>A collating symbol is a multi-character collating element
            enclosed in
            <quote>[.</quote>and
            <quote>.]</quote>. For example, if
            <quote>ch</quote> is a collating element, then
            <emphasis>[[.ch.]]</emphasis>is a regexp that matches this
            collating element, while
            <emphasis>[ch]</emphasis>is a regexp that matches either
            <quote>c</quote> or
            <quote>h</quote>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Equivalence Classes</term>
          <listitem>
            <para>An equivalence class is a locale-specific name for a list of
            characters that are equivalent. The name is enclosed in
            <quote>[=</quote>and
            <quote>=]</quote>. For example, the name
            <quote>e</quote> might be used to represent all of
            <quote>e</quote> with grave (
            <quote>è</quote>),
            <quote>e</quote> with acute (
            <quote>é</quote>) and
            <quote>e</quote>. In this case,
            <emphasis>[[=e=]]</emphasis>is a regexp that matches any of:
            <quote>e</quote> with grave (
            <quote>è</quote>),
            <quote>e</quote> with acute (
            <quote>é</quote>) and
            <quote>e</quote>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>A regular expression matching a single character may be followed by
      one of several repetition operators described in
      <xref linkend="regex-repeat" />.</para>

      <table id="regex-repeat">
        <title>Regular expression repetition operators</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>?</entry>
              <entry>The preceding item is optional and matched at most
              once</entry>
            </row>
            <row>
              <entry>*</entry>
              <entry>The preceding item will be matched zero or more
              times</entry>
            </row>
            <row>
              <entry>+</entry>
              <entry>The preceding item will be matched one or more
              times</entry>
            </row>
            <row>
              <entry>{n}</entry>
              <entry>The preceding item is matched exactly
              <emphasis>n</emphasis> times</entry>
            </row>
            <row>
              <entry>{n,}</entry>
              <entry>The preceding item is matched
              <emphasis>n</emphasis> or more times</entry>
            </row>
            <row>
              <entry>{,m}</entry>
              <entry>The preceding item is matched at most
              <emphasis>m</emphasis> times</entry>
            </row>
            <row>
              <entry>{n,m}</entry>
              <entry>The preceding item is matched at least
              <emphasis>n</emphasis> times, but no more than
              <emphasis>m</emphasis> times</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Two regular expressions may be concatenated; the resulting regular
      expression matches any string formed by concatenating two substrings that
      respectively match the concatenated subexpressions.</para>
      <para>Two regular expressions may be joined by the infix operator
      <quote>|</quote>; the resulting regular expression matches any string
      matching either subexpression.</para>
      <para>Repetition takes precedence over concatenation, which in turn takes
      precedence over alternation. A whole subexpression may be enclosed in
      parentheses to override these precedence rules.</para>
      <note>
        <para>If you compile Mutt with the included regular expression engine,
        the following operators may also be used in regular expressions as
        described in
        <xref linkend="regex-gnu-ext" />.</para>
      </note>

      <table id="regex-gnu-ext">
        <title>GNU regular expression extensions</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Expression</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>\\y</entry>
              <entry>Matches the empty string at either the beginning or the
              end of a word</entry>
            </row>
            <row>
              <entry>\\B</entry>
              <entry>Matches the empty string within a word</entry>
            </row>
            <row>
              <entry>\\&lt;</entry>
              <entry>Matches the empty string at the beginning of a
              word</entry>
            </row>
            <row>
              <entry>\\&gt;</entry>
              <entry>Matches the empty string at the end of a word</entry>
            </row>
            <row>
              <entry>\\w</entry>
              <entry>Matches any word-constituent character (letter, digit, or
              underscore)</entry>
            </row>
            <row>
              <entry>\\W</entry>
              <entry>Matches any character that is not word-constituent</entry>
            </row>
            <row>
              <entry>\\`</entry>
              <entry>Matches the empty string at the beginning of a buffer
              (string)</entry>
            </row>
            <row>
              <entry>\\'</entry>
              <entry>Matches the empty string at the end of a buffer</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Please note however that these operators are not defined by POSIX,
      so they may or may not be available in stock libraries on various
      systems.</para>
    </sect1>

    <sect1 id="patterns">
      <title>Patterns: Searching, Limiting and Tagging</title>

      <sect2 id="patterns-modifier">
        <title>Pattern Modifier</title>
        <para>Many of Mutt's commands allow you to specify a pattern to match (
        <literal>limit</literal>,
        <literal>tag-pattern</literal>,
        <literal>delete-pattern</literal>, etc.).
        <xref linkend="tab-patterns" />shows several ways to select
        messages.</para>

        <table id="tab-patterns">
          <title>Pattern modifiers</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Pattern modifier</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>~A</entry>
                <entry>all messages</entry>
              </row>
              <row>
                <entry>~b
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contain
                <emphasis>EXPR</emphasis> in the message body</entry>
              </row>
              <row>
                <entry>=b
                <emphasis>STRING</emphasis></entry>
                <entry>messages which contain
                <emphasis>STRING</emphasis> in the message body. If IMAP is
                enabled, searches for
                <emphasis>STRING</emphasis> on the server, rather than
                downloading each message and searching it locally.</entry>
              </row>
              <row>
                <entry>~B
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contain
                <emphasis>EXPR</emphasis> in the whole message</entry>
              </row>
              <row>
                <entry>=B
                <emphasis>STRING</emphasis></entry>
                <entry>messages which contain
                <emphasis>STRING</emphasis> in the whole message. If IMAP is
                enabled, searches for
                <emphasis>STRING</emphasis> on the server, rather than
                downloading each message and searching it locally.</entry>
              </row>
              <row>
                <entry>~c
                <emphasis>EXPR</emphasis></entry>
                <entry>messages carbon-copied to
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>%c
                <emphasis>GROUP</emphasis></entry>
                <entry>messages carbon-copied to any member of
                <emphasis>GROUP</emphasis></entry>
              </row>
              <row>
                <entry>~C
                <emphasis>EXPR</emphasis></entry>
                <entry>messages either to: or cc:
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>%C
                <emphasis>GROUP</emphasis></entry>
                <entry>messages either to: or cc: to any member of
                <emphasis>GROUP</emphasis></entry>
              </row>
              <row>
                <entry>~d [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with
                <quote>date-sent</quote> in a Date range</entry>
              </row>
              <row>
                <entry>~D</entry>
                <entry>deleted messages</entry>
              </row>
              <row>
                <entry>~e
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contains
                <emphasis>EXPR</emphasis> in the
                <quote>Sender</quote> field</entry>
              </row>
              <row>
                <entry>%e
                <emphasis>GROUP</emphasis></entry>
                <entry>messages which contain a member of
                <emphasis>GROUP</emphasis> in the
                <quote>Sender</quote> field</entry>
              </row>
              <row>
                <entry>~E</entry>
                <entry>expired messages</entry>
              </row>
              <row>
                <entry>~F</entry>
                <entry>flagged messages</entry>
              </row>
              <row>
                <entry>~f
                <emphasis>EXPR</emphasis></entry>
                <entry>messages originating from
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>%f
                <emphasis>GROUP</emphasis></entry>
                <entry>messages originating from any member of
                <emphasis>GROUP</emphasis></entry>
              </row>
              <row>
                <entry>~g</entry>
                <entry>cryptographically signed messages</entry>
              </row>
              <row>
                <entry>~G</entry>
                <entry>cryptographically encrypted messages</entry>
              </row>
              <row>
                <entry>~h
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contain
                <emphasis>EXPR</emphasis> in the message header</entry>
              </row>
              <row>
                <entry>=h
                <emphasis>STRING</emphasis></entry>
                <entry>messages which contain
                <emphasis>STRING</emphasis> in the message header. If IMAP is
                enabled, searches for
                <emphasis>STRING</emphasis> on the server, rather than
                downloading each message and searching it locally;
                <emphasis>STRING</emphasis> must be of the form
                <quote>header: substring</quote>(see below).</entry>
              </row>
              <row>
                <entry>~H
                <emphasis>EXPR</emphasis></entry>
                <entry>messages with a spam attribute matching
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>~i
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which match
                <emphasis>EXPR</emphasis> in the
                <quote>Message-ID</quote> field</entry>
              </row>
              <row>
                <entry>~k</entry>
                <entry>messages which contain PGP key material</entry>
              </row>
              <row>
                <entry>~L
                <emphasis>EXPR</emphasis></entry>
                <entry>messages either originated or received by
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>%L
                <emphasis>GROUP</emphasis></entry>
                <entry>message either originated or received by any member of
                <emphasis>GROUP</emphasis></entry>
              </row>
              <row>
                <entry>~l</entry>
                <entry>messages addressed to a known mailing list</entry>
              </row>
              <row>
                <entry>~m [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with numbers in the range
                <emphasis>MIN</emphasis> to
                <emphasis>MAX</emphasis>***)</entry>
              </row>
              <row>
                <entry>~m &lt;[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with numbers less than
                <emphasis>MAX</emphasis>***)</entry>
              </row>
              <row>
                <entry>~m &gt;[
                <emphasis>MIN</emphasis>]</entry>
                <entry>messages with numbers greater than
                <emphasis>MIN</emphasis>***)</entry>
              </row>
              <row>
                <entry>~m [
                <emphasis>M</emphasis>]</entry>
                <entry>just message number
                <emphasis>M</emphasis>***)</entry>
              </row>
              <row>
                <entry>~m [
                <emphasis>MIN</emphasis>],[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with offsets (from selected message) in the
                range
                <emphasis>MIN</emphasis> to
                <emphasis>MAX</emphasis>***)</entry>
              </row>
              <row>
                <entry>~n [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with a score in the range
                <emphasis>MIN</emphasis> to
                <emphasis>MAX</emphasis>*)</entry>
              </row>
              <row>
                <entry>~N</entry>
                <entry>new messages</entry>
              </row>
              <row>
                <entry>~O</entry>
                <entry>old messages</entry>
              </row>
              <row>
                <entry>~p</entry>
                <entry>messages addressed to you (consults
                <command>alternates</command>)</entry>
              </row>
              <row>
                <entry>~P</entry>
                <entry>messages from you (consults
                <command>alternates</command>)</entry>
              </row>
              <row>
                <entry>~Q</entry>
                <entry>messages which have been replied to</entry>
              </row>
              <row>
                <entry>~r [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with
                <quote>date-received</quote> in a Date range</entry>
              </row>
              <row>
                <entry>~R</entry>
                <entry>read messages</entry>
              </row>
              <row>
                <entry>~s
                <emphasis>EXPR</emphasis></entry>
                <entry>messages having
                <emphasis>EXPR</emphasis> in the
                <quote>Subject</quote> field.</entry>
              </row>
              <row>
                <entry>~S</entry>
                <entry>superseded messages</entry>
              </row>
              <row>
                <entry>~t
                <emphasis>EXPR</emphasis></entry>
                <entry>messages addressed to
                <emphasis>EXPR</emphasis></entry>
              </row>
              <row>
                <entry>~T</entry>
                <entry>tagged messages</entry>
              </row>
              <row>
                <entry>~u</entry>
                <entry>messages addressed to a subscribed mailing list</entry>
              </row>
              <row>
                <entry>~U</entry>
                <entry>unread messages</entry>
              </row>
              <row>
                <entry>~v</entry>
                <entry>messages part of a collapsed thread.</entry>
              </row>
              <row>
                <entry>~V</entry>
                <entry>cryptographically verified messages</entry>
              </row>
              <row>
                <entry>~x
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contain
                <emphasis>EXPR</emphasis> in the
                <quote>References</quote> or
                <quote>In-Reply-To</quote> field</entry>
              </row>
              <row>
                <entry>~X [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with
                <emphasis>MIN</emphasis> to
                <emphasis>MAX</emphasis> attachments *)</entry>
              </row>
              <row>
                <entry>~y
                <emphasis>EXPR</emphasis></entry>
                <entry>messages which contain
                <emphasis>EXPR</emphasis> in their keywords</entry>
              </row>
              <row>
                <entry>~z [
                <emphasis>MIN</emphasis>]-[
                <emphasis>MAX</emphasis>]</entry>
                <entry>messages with a size in the range
                <emphasis>MIN</emphasis> to
                <emphasis>MAX</emphasis>*) **)</entry>
              </row>
              <row>
                <entry>=/
                <emphasis>STRING</emphasis></entry>
                <entry>IMAP custom server-side search for
                <emphasis>STRING</emphasis>. Currently only defined for Gmail.
                See: <link linkend="gmail-patterns">GMail Patterns</link>
                </entry>
              </row>
              <row>
                <entry>~=</entry>
                <entry>duplicated messages (see
                <link linkend="duplicate-threads">
                $duplicate_threads</link>)</entry>
              </row>
              <row>
                <entry>~#</entry>
                <entry>broken threads (see
                  <link linkend="strict-threads">
                    $strict_threads</link>)</entry>
              </row>
              <row>
                <entry>~$</entry>
                <entry>unreferenced messages (requires threaded view)</entry>
              </row>
              <row>
                <entry>~(
                <emphasis>PATTERN</emphasis>)</entry>
                <entry>messages in threads containing messages matching
                <emphasis>PATTERN</emphasis>, e.g. all threads containing
                messages from you: ~(~P)</entry>
              </row>
              <row>
                <entry>~&lt;(
                <emphasis>PATTERN</emphasis>)</entry>
                <entry>messages whose immediate parent matches
                <emphasis>PATTERN</emphasis>, e.g. replies to your messages:
                ~&lt;(~P)</entry>
              </row>
              <row>
                <entry>~&gt;(
                <emphasis>PATTERN</emphasis>)</entry>
                <entry>messages having an immediate child matching
                <emphasis>PATTERN</emphasis>, e.g. messages you replied to:
                ~&gt;(~P)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Where
        <emphasis>EXPR</emphasis> is a
        <link linkend="regexp">regular expression</link>, and
        <emphasis>GROUP</emphasis> is an
        <link linkend="addrgroup">address group</link>.</para>
        <para>*) The forms
        <quote>&lt;[
        <emphasis>MAX</emphasis>]</quote>,
        <quote>&gt;[
        <emphasis>MIN</emphasis>]</quote>,
        <quote>[
        <emphasis>MIN</emphasis>]-</quote>and
        <quote>-[
        <emphasis>MAX</emphasis>]</quote>are allowed, too.</para>
        <para>**) The suffixes
        <quote>K</quote> and
        <quote>M</quote> are allowed to specify kilobyte and megabyte
        respectively.</para>
        <para>***) The message number ranges (introduced by
        <literal>~m</literal>) are even more general and powerful than the
        other types of ranges. Read on and see
        <xref linkend="message-ranges" />below.</para>
        <para>Special attention has to be paid when using regular expressions
        inside of patterns. Specifically, Mutt's parser for these patterns will
        strip one level of backslash (
        <quote>\</quote>), which is normally used for quoting. If it is your
        intention to use a backslash in the regular expression, you will need
        to use two backslashes instead (
        <quote>\\</quote>). You can force Mutt to treat
        <emphasis>EXPR</emphasis> as a simple substring instead of a regular
        expression by using = instead of ~ in the pattern name. For example,
        <literal>=b *.*</literal>will find all messages that contain the
        literal string
        <quote>*.*</quote>. Simple string matches are less powerful than
        regular expressions but can be considerably faster. This is especially
        true for IMAP folders, because string matches can be performed on the
        server instead of by fetching every message. IMAP treats
        <literal>=h</literal> specially: it must be of the form
        <quote>header: substring</quote> and will not partially match header
        names. The substring part may be omitted if you simply wish to find
        messages containing a particular header without regard to its
        value.</para>
        <para>Patterns matching lists of addresses (notably c, C, p, P and t)
        match if there is at least one match in the whole list. If you want to
        make sure that all elements of that list match, you need to prefix your
        pattern with
        <quote>^</quote>. This example matches all mails which only has
        recipients from Germany.</para>
        <example id="ex-recips">
          <title>Matching all addresses in address lists</title>
          <screen>^~C \.de$</screen>
        </example>
        <para>You can restrict address pattern matching to aliases that you
        have defined with the "@" modifier. This example matches messages whose
        recipients are all from Germany, and who are known to your alias
        list.</para>
        <example id="ex-restrict-to-aliases">
          <title>Matching restricted to aliases</title>
          <screen>^@~C \.de$</screen>
        </example>
        <para>To match any defined alias, use a regular expression that matches
        any string. This example matches messages whose senders are known
        aliases.</para>
        <example id="ex-match-alias">
          <title>Matching any defined alias</title>
          <screen>@~f .</screen>
        </example>

        <sect3 id="message-ranges">
          <title>Message Ranges</title>
          <para>If a message number range (from now on: MNR) contains a comma (
          <literal>,</literal>), it is a
          <emphasis>relative</emphasis> MNR. That means the numbers denote
          <emphasis>offsets</emphasis> from the highlighted message. For
          example:</para>

          <table id="relative-mnrs">
            <title>Relative Message Number Ranges</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Pattern</entry>
                  <entry>Explanation</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>~m -2,2</literal>
                  </entry>
                  <entry>Previous 2, highlighted and next 2 emails</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m 0,1</literal>
                  </entry>
                  <entry>Highlighted and next email</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>In addition to numbers, either side of the range can also
          contain one of the special characters (shortcuts)
          <literal>.^$</literal>. The meaning is:</para>

          <table id="mnrs-shortcuts">
            <title>Message Number Shortcuts</title>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>Shortcut</entry>
                  <entry>Explanation</entry>
                  <entry>Example</entry>
                  <entry>Meaning</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>.</literal>
                  </entry>
                  <entry>Current / Highlighted</entry>
                  <entry>
                    <literal>~m -3,.</literal>
                  </entry>
                  <entry>Previous 3 emails plus the highlighted one</entry>
                </row>
                <row>
                  <entry>
                    <literal>$</literal>
                  </entry>
                  <entry>Last</entry>
                  <entry>
                    <literal>~m .,$</literal>
                  </entry>
                  <entry>Highlighted email and all the later ones</entry>
                </row>
                <row>
                  <entry>
                    <literal>^</literal>
                  </entry>
                  <entry>First</entry>
                  <entry>
                    <literal>~m ^,1</literal>
                  </entry>
                  <entry>Highlighted, next and all preceding ones</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>Lastly, you can also leave either side of the range blank, to
          make it extend as far as possible. For example,
          <literal>~m ,1</literal> has the same meaning as the last example in
          <xref linkend="mnrs-shortcuts" />.</para>
          <para>Otherwise, if a MNR
          <emphasis>doesn't</emphasis> contain a comma, the meaning is similar
          to other ranges, except that the shortcuts are still available.
          Examples:</para>

          <table id="mnrs-absolute">
            <title>Absolute Message Number Ranges</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Pattern</entry>
                  <entry>Explanation</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>~m 3-10</literal>
                  </entry>
                  <entry>Emails 3 to 10</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m -10</literal>
                  </entry>
                  <entry>Emails 1 to 10</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m 10-</literal>
                  </entry>
                  <entry>Emails 10 to last</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m &lt;3</literal>
                  </entry>
                  <entry>First and second email</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m ^-2</literal>
                  </entry>
                  <entry>First and second email</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m &gt;1</literal>
                  </entry>
                  <entry>Everything but first email</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m 2-$</literal>
                  </entry>
                  <entry>Everything but first email</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m 2</literal>
                  </entry>
                  <entry>Just the second email</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>
      </sect2>

      <sect2 id="simple-searches">
        <title>Simple Searches</title>
        <para>Mutt supports two versions of so called
        <quote>simple searches</quote>. These are issued if the query entered
        for searching, limiting and similar operations does not seem to contain
        a valid pattern modifier (i.e. it does not contain one of these
        characters:
        <quote>~</quote>,
        <quote>=</quote>or
        <quote>%</quote>). If the query is supposed to contain one of these
        special characters, they must be escaped by prepending a backslash (
        <quote>\</quote>).</para>
        <para>The first type is by checking whether the query string equals a
        keyword case-insensitively from
        <xref linkend="tab-simplesearch-keywords" />: If that is the case, Mutt
        will use the shown pattern modifier instead. If a keyword would
        conflict with your search keyword, you need to turn it into a regular
        expression to avoid matching the keyword table. For example, if you
        want to find all messages matching
        <quote>flag</quote>(using
        <link linkend="simple-search">$simple_search</link>) but don't want to
        match flagged messages, simply search for
        <quote>
          <literal>[f]lag</literal>
        </quote>.</para>

        <table id="tab-simplesearch-keywords">
          <title>Simple search keywords</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Pattern modifier</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>all</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>.</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>^</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>del</entry>
                <entry>~D</entry>
              </row>
              <row>
                <entry>flag</entry>
                <entry>~F</entry>
              </row>
              <row>
                <entry>new</entry>
                <entry>~N</entry>
              </row>
              <row>
                <entry>old</entry>
                <entry>~O</entry>
              </row>
              <row>
                <entry>repl</entry>
                <entry>~Q</entry>
              </row>
              <row>
                <entry>read</entry>
                <entry>~R</entry>
              </row>
              <row>
                <entry>tag</entry>
                <entry>~T</entry>
              </row>
              <row>
                <entry>unread</entry>
                <entry>~U</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The second type of simple search is to build a complex search
        pattern using
        <link linkend="simple-search">$simple_search</link> as a template. Mutt
        will insert your query properly quoted and search for the composed
        complex query.</para>
      </sect2>

      <sect2 id="complex-patterns">
        <title>Nesting and Boolean Operators</title>
        <para>Logical AND is performed by specifying more than one criterion.
        For example:</para>
        <screen>~t mutt ~f elkins</screen>
        <para>would select messages which contain the word
        <quote>mutt</quote> in the list of recipients
        <emphasis>and</emphasis> that have the word
        <quote>elkins</quote> in the
        <quote>From</quote> header field.</para>
        <para>Mutt also recognizes the following operators to create more
        complex search patterns:</para>
        <itemizedlist>
          <listitem>
            <para>! — logical NOT operator</para>
          </listitem>
          <listitem>
            <para>| — logical OR operator</para>
          </listitem>
          <listitem>
            <para>() — logical grouping operator</para>
          </listitem>
        </itemizedlist>
        <para>Here is an example illustrating a complex search pattern. This
        pattern will select all messages which do not contain
        <quote>mutt</quote> in the
        <quote>To</quote> or
        <quote>Cc</quote> field and which are from
        <quote>elkins</quote>.</para>
        <example id="ex-pattern-bool">
          <title>Using boolean operators in patterns</title>
          <screen>!(~t mutt|~c mutt) ~f elkins</screen>
        </example>
        <para>Here is an example using white space in the regular expression
        (note the
        <quote>'</quote>and
        <quote>"</quote>delimiters). For this to match, the mail's subject must
        match the
        <quote>^Junk +From +Me$</quote>and it must be from either
        <quote>Jim +Somebody</quote> or
        <quote>Ed +SomeoneElse</quote>:</para>
        <screen>'~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'</screen>
        <note>
          <para>If a regular expression contains parenthesis, or a vertical bar
          ("|"), you
          <emphasis>must</emphasis> enclose the expression in double or single
          quotes since those characters are also used to separate different
          parts of Mutt's pattern language. For example:
          <literal>~f "me@(mutt\.org|cs\.hmc\.edu)"</literal>Without the
          quotes, the parenthesis wouldn't end. This would be separated to two
          OR'd patterns:
          <emphasis>~f me@(mutt\.org</emphasis> and
          <emphasis>cs\.hmc\.edu)</emphasis>. They are never what you
          want.</para>
        </note>
      </sect2>

      <sect2 id="date-patterns">
        <title>Searching by Date</title>
        <para>Mutt supports two types of dates,
        <emphasis>absolute</emphasis> and
        <emphasis>relative</emphasis>.</para>

        <sect3 id="date-absolute">
          <title>Absolute Dates</title>
          <para>Dates
          <emphasis>must</emphasis> be in DD/MM/YY format (month and year are
          optional, defaulting to the current month and year). An example of a
          valid range of dates is:</para>
          <screen>Limit to messages matching: ~d 20/1/95-31/10</screen>
          <para>If you omit the minimum (first) date, and just specify
          <quote>-DD/MM/YY</quote>, all messages
          <emphasis>before</emphasis> the given date will be selected. If you
          omit the maximum (second) date, and specify
          <quote>DD/MM/YY-</quote>, all messages
          <emphasis>after</emphasis> the given date will be selected. If you
          specify a single date with no dash (
          <quote>-</quote>), only messages sent on the given date will be
          selected.</para>
          <para>You can add error margins to absolute dates. An error margin is
          a sign (+ or -), followed by a digit, followed by one of the units in
          <xref linkend="tab-date-units" />. As a special case, you can replace
          the sign by a
          <quote>*</quote>character, which is equivalent to giving identical
          plus and minus error margins.</para>

          <table id="tab-date-units">
            <title>Date units</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Unit</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>y</entry>
                  <entry>Years</entry>
                </row>
                <row>
                  <entry>m</entry>
                  <entry>Months</entry>
                </row>
                <row>
                  <entry>w</entry>
                  <entry>Weeks</entry>
                </row>
                <row>
                  <entry>d</entry>
                  <entry>Days</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>Example: To select any messages two weeks around January 15,
          2001, you'd use the following pattern:</para>
          <screen>Limit to messages matching: ~d 15/1/2001*2w</screen>
        </sect3>

        <sect3 id="dates-relative">
          <title>Relative Dates</title>
          <para>This type of date is relative to the current date, and may be
          specified as:</para>
          <itemizedlist>
            <listitem>
              <para>&gt;
              <emphasis>offset</emphasis> for messages older than
              <emphasis>offset</emphasis> units</para>
            </listitem>
            <listitem>
              <para>&lt;
              <emphasis>offset</emphasis> for messages newer than
              <emphasis>offset</emphasis> units</para>
            </listitem>
            <listitem>
              <para>=
              <emphasis>offset</emphasis> for messages exactly
              <emphasis>offset</emphasis> units old</para>
            </listitem>
          </itemizedlist>
          <para>
          <emphasis>offset</emphasis> is specified as a positive number with one
          of the units from
          <xref linkend="tab-date-units" />.</para>
          <para>Example: to select messages less than 1 month old, you would
          use</para>
          <screen>Limit to messages matching: ~d &lt;1m</screen>
          <note>
            <para>All dates used when searching are relative to the
            <emphasis>local</emphasis> time zone, so unless you change the
            setting of your
            <link linkend="index-format">$index_format</link> to include a
            <literal>%[...]</literal>format, these are
            <emphasis>not</emphasis> the dates shown in the main index.</para>
          </note>
        </sect3>
      </sect2>
      <sect2 id="gmail-patterns">
        <title>GMail Patterns</title>
        <para>
          <literal>=/ "search terms"</literal> invokes server-side search,
          passing along the search terms provided. Search results are
          constrained by IMAP to be within the current folder. At present this
          only supports Gmail's search API IMAP extension. The search language
          is entirely up to the mail provider and changes at their discretion.
          Using <literal>~/</literal> will silently fail.
        </para>
        <para>
          For up-to-date information about searching, see:
          <ulink url="https://support.google.com/mail/answer/7190?hl=en">GMail's Support Page</ulink>.
          You will need to (once) use a web-browser to visit Settings/Labels
          and enable "Show in IMAP" for "All Mail". When searching, visit that
          folder in mutt to most closely match Gmail search semantics.
        </para>
        <table id="gmail-example-patterns">
          <title>GMail Example Patterns</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Pattern</entry>
                <entry>Matches</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>=/ "list:foo.example.org has:attachment is:important"</literal>
                </entry>
                <entry>the foo.example.org mailing-list per Gmail's
                  definitions, and has an attachment, and has been marked as
                  important</entry>
              </row>
              <row>
                <entry>
                  <literal>=/ "{has:purple-star has:yellow-star} older_than:2m"</literal>
                </entry>
                <entry>is older than two months and has either a purple-star or
                  a yellow-star</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>

    <sect1 id="markmsg">
      <title>Marking Messages</title>
      <para>There are times that it's useful to ask Mutt to "remember" which
      message you're currently looking at, while you move elsewhere in your
      mailbox. You can do this with the
      <quote>mark-message</quote> operator, which is bound to the
      <quote>~</quote>key by default. Press this key to enter an identifier for
      the marked message. When you want to return to this message, press
      <quote>'</quote>and the name that you previously entered.</para>
      <para>(Message marking is really just a shortcut for defining a macro
      that returns you to the current message by searching for its Message-ID.
      You can choose a different prefix by setting the
      <link linkend="mark-macro-prefix">
      $mark_macro_prefix</link> variable.)</para>
    </sect1>

    <sect1 id="tags">
      <title>Using Tags</title>
      <para>Sometimes it is desirable to perform an operation on a group of
      messages all at once rather than one at a time. An example might be to
      save messages to a mailing list to a separate folder, or to delete all
      messages with a given subject. To tag all messages matching a pattern,
      use the
      <literal>&lt;tag-pattern&gt;</literal>function, which is bound to
      <quote>shift-T</quote> by default. Or you can select individual messages
      by hand using the
      <literal>&lt;tag-message&gt;</literal>function, which is bound to
      <quote>t</quote> by default. See
      <link linkend="patterns">patterns</link> for Mutt's pattern matching
      syntax.</para>
      <para>Once you have tagged the desired messages, you can use the
      <quote>tag-prefix</quote> operator, which is the
      <quote>;</quote>(semicolon) key by default. When the
      <quote>tag-prefix</quote> operator is used, the
      <emphasis>next</emphasis> operation will be applied to all tagged messages
      if that operation can be used in that manner. If the
      <link linkend="auto-tag">$auto_tag</link> variable is set, the next
      operation applies to the tagged messages automatically, without requiring
      the
      <quote>tag-prefix</quote>.</para>
      <para>In
      <link linkend="macro">
      <command>macro</command>s</link>or
      <link linkend="push">
        <command>push</command>
      </link>commands, you can use the
      <literal>&lt;tag-prefix-cond&gt;</literal>operator. If there are no
      tagged messages, Mutt will
      <quote>eat</quote> the rest of the macro to abort it's execution. Mutt
      will stop
      <quote>eating</quote> the macro when it encounters the
      <literal>&lt;end-cond&gt;</literal>operator; after this operator the rest
      of the macro will be executed as normal.</para>
    </sect1>

    <sect1 id="hooks">
      <title>Using Hooks</title>
      <para>A
      <emphasis>hook</emphasis> is a concept found in many other programs which
      allows you to execute arbitrary commands before performing some
      operation. For example, you may wish to tailor your configuration based
      upon which mailbox you are reading, or to whom you are sending mail. In
      the Mutt world, a
      <emphasis>hook</emphasis> consists of a
      <link linkend="regexp">regular expression</link> or
      <link linkend="patterns">pattern</link> along with a configuration
      option/command. See:
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="account-hook">
              <command>account-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="append-hook">
              <command>append-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="charset-hook">
              <command>charset-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="close-hook">
              <command>close-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="crypt-hook">
              <command>crypt-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="fcc-hook">
              <command>fcc-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="fcc-save-hook">
              <command>fcc-save-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="folder-hook">
              <command>folder-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="iconv-hook">
              <command>iconv-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="mbox-hook">
              <command>mbox-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="message-hook">
              <command>message-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="open-hook">
              <command>open-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="reply-hook">
              <command>reply-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="save-hook">
              <command>save-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="send-hook">
              <command>send-hook</command>
            </link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="send2-hook">
              <command>send2-hook</command>
            </link>
          </para>
        </listitem>
      </itemizedlist>for specific details on each type of
      <emphasis>hook</emphasis> available.</para>
      <note>
        <para>If a hook changes configuration settings, these changes remain
        effective until the end of the current Mutt session. As this is
        generally not desired, a
        <quote>default</quote> hook needs to be added before all other hooks of
        that type to restore configuration defaults.</para>
      </note>
      <example id="ex-default-hook">
        <title>Specifying a
        <quote>default</quote> hook</title>
        <screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\.b$' my_hdr from: c@c.c
</screen>
      </example>
      <para>In
      <xref linkend="ex-default-hook" />, by default the value of
      <link linkend="from">$from</link> and
      <link linkend="realname">$realname</link> is not overridden. When sending
      messages either To: or Cc: to
      <literal>&lt;b@b.b&gt;</literal>, the From: header is changed to
      <literal>&lt;c@c.c&gt;</literal>.</para>

      <sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
        <title>Message Matching in Hooks</title>
        <para>Hooks that act upon messages (
        <command>message-hook</command>,
        <command>reply-hook</command>,
        <command>send-hook</command>,
        <command>send2-hook</command>,
        <command>save-hook</command>,
        <command>fcc-hook</command>) are evaluated in a slightly different
        manner. For the other types of hooks, a
        <link linkend="regexp">regular expression</link> is sufficient. But in
        dealing with messages a finer grain of control is needed for matching
        since for different purposes you want to match different
        criteria.</para>
        <para>Mutt allows the use of the
        <link linkend="patterns">search pattern</link> language for matching
        messages in hook commands. This works in exactly the same way as it
        would when
        <emphasis>limiting</emphasis> or
        <emphasis>searching</emphasis> the mailbox, except that you are
        restricted to those operators which match information Mutt extracts
        from the header of the message (i.e., from, to, cc, date, subject,
        etc.).</para>
        <para>For example, if you wanted to set your return address based upon
        sending mail to a specific address, you could do something like:</para>
        <screen>send-hook '~t ^me@cs\.hmc\.edu$' 'my_hdr From: Mutt User &lt;user@host&gt;'</screen>
        <para>which would execute the given command when sending mail to
        <emphasis>me@cs.hmc.edu</emphasis>.</para>
        <para>However, it is not required that you write the pattern to match
        using the full searching language. You can still specify a simple
        <emphasis>regular expression</emphasis> like the other hooks, in which
        case Mutt will translate your pattern into the full language, using the
        translation specified by the
        <link linkend="default-hook">$default_hook</link> variable. The pattern
        is translated at the time the hook is declared, so the value of
        <link linkend="default-hook">$default_hook</link> that is in effect at
        that time will be used.</para>
      </sect2>

      <sect2 id="mailbox-hook" xreflabel="Mailbox Matching in Hooks">
        <title>Mailbox Matching in Hooks</title>
        <para>Hooks that match against mailboxes (
        <command>folder-hook</command>,
        <command>mbox-hook</command>) apply both
        <link linkend="regexp">regular expression</link> syntax as well as
        <link linkend="shortcuts">mailbox shortcut</link> expansion on the
        regexp parameter. There is some overlap between these, so special
        attention should be paid to the first character of the regexp.</para>
        <screen>
# Here, ^ will expand to "the current mailbox" not "beginning of string":
folder-hook ^/home/user/Mail/bar "set sort=threads"
# If you want ^ to be interpreted as "beginning of string", one workaround
# is to enclose the regexp in parenthesis:
folder-hook (^/home/user/Mail/bar) "set sort=threads"
# This will expand to the default save folder for the alias "imap.example.com", which
# is probably not what you want:
folder-hook @imap.example.com "set sort=threads"
# A workaround is to use parenthesis or a backslash:
folder-hook (@imap.example.com) "set sort=threads"
folder-hook '\@imap.example.com' "set sort=threads"
</screen>
        <para>Keep in mind that mailbox shortcut expansion on the regexp
        parameter takes place when the hook is initially parsed, not when the
        hook is matching against a mailbox. When Mutt starts up and is reading
        the .muttrc, some mailbox shortcuts may not be usable. For example, the
        "current mailbox" shortcut, ^, will expand to an empty string because
        no mailbox has been opened yet. Mutt will issue an error for this case
        or if the mailbox shortcut results in an empty regexp.</para>
      </sect2>
    </sect1>

    <sect1 id="setenv">
      <title>Managing the Environment</title>
      <para>You can alter the environment that Mutt passes on to its child
      processes using the
      <quote>setenv</quote> and
      <quote>unsetenv</quote> operators. (N.B. These follow Mutt-style syntax,
      not shell-style!) You can also query current environment values by
      prefixing a
      <quote>?</quote>character.</para>
      <screen>
setenv TERM vt100
setenv ORGANIZATION "The Mutt Development Team"
unsetenv DISPLAY
setenv ?LESS
</screen>
    </sect1>

    <sect1 id="query">
      <title>External Address Queries</title>
      <para>Mutt supports connecting to external directory databases such as
      LDAP, ph/qi, bbdb, or NIS through a wrapper script which connects to Mutt
      using a simple interface. Using the
      <link linkend="query-command">$query_command</link> variable, you specify
      the wrapper command to use. For example:</para>
      <screen>set query_command = "mutt_ldap_query.pl %s"</screen>
      <para>The wrapper script should accept the query on the command-line. It
      should return a one line message, then each matching response on a single
      line, each line containing a tab separated address then name then some
      other optional information. On error, or if there are no matching
      addresses, return a non-zero exit code and a one line error
      message.</para>
      <para>An example multiple response output:</para>
      <screen>
Searching database ... 20 entries ... 3 matching:
me@cs.hmc.edu           Michael Elkins  mutt dude
blong@fiction.net       Brandon Long    mutt and more
roessler@does-not-exist.org        Thomas Roessler mutt pgp
</screen>
      <para>There are two mechanisms for accessing the query function of Mutt.
      One is to do a query from the index menu using the
      <literal>&lt;query&gt;</literal>function (default: Q). This will prompt
      for a query, then bring up the query menu which will list the matching
      responses. From the query menu, you can select addresses to create
      aliases, or to mail. You can tag multiple addresses to mail, start a new
      query, or have a new query appended to the current responses.</para>
      <para>The other mechanism for accessing the query function is for address
      completion, similar to the alias completion. In any prompt for address
      entry, you can use the
      <literal>&lt;complete-query&gt;</literal>function (default: ^T) to run a
      query based on the current address you have typed. Like aliases, Mutt
      will look for what you have typed back to the last space or comma. If
      there is a single response for that query, Mutt will expand the address
      in place. If there are multiple responses, Mutt will activate the query
      menu. At the query menu, you can select one or more addresses to be added
      to the prompt.</para>
    </sect1>

    <sect1 id="mailbox-formats">
      <title>Mailbox Formats</title>
      <para>Mutt supports reading and writing of four different local mailbox
      formats: mbox, MMDF, MH and Maildir. The mailbox type is auto detected,
      so there is no need to use a flag for different mailbox types. When
      creating new mailboxes, Mutt uses the default specified with the
      <link linkend="mbox-type">$mbox_type</link> variable. A short description
      of the formats follows.</para>
      <para>
      <emphasis>mbox</emphasis>. This is a widely used mailbox format for UNIX.
      All messages are stored in a single file. Each message has a line of the
      form:</para>
      <screen>From me@cs.hmc.edu Fri, 11 Apr 1997 11:44:56 PST</screen>
      <para>to denote the start of a new message (this is often referred to as
      the
      <quote>From_</quote> line). The mbox format requires mailbox locking, is
      prone to mailbox corruption with concurrently writing clients or
      misinterpreted From_ lines. Depending on the environment, new mail
      detection can be unreliable. Mbox folders are fast to open and easy to
      archive.</para>
      <para>
      <emphasis>MMDF</emphasis>. This is a variant of the
      <emphasis>mbox</emphasis> format. Each message is surrounded by lines
      containing
      <quote>^A^A^A^A</quote>(four times control-A's). The same problems as for
      mbox apply (also with finding the right message separator as four
      control-A's may appear in message bodies).</para>
      <para>
      <emphasis>MH</emphasis>. A radical departure from
      <emphasis>mbox</emphasis> and
      <emphasis>MMDF</emphasis>, a mailbox consists of a directory and each
      message is stored in a separate file. The filename indicates the message
      number (however, this is may not correspond to the message number Mutt
      displays). Deleted messages are renamed with a comma (
      <quote>,</quote>) prepended to the filename. Mutt detects this type of
      mailbox by looking for either
      <literal>.mh_sequences</literal> or
      <literal>.xmhcache</literal> files (needed to distinguish normal
      directories from MH mailboxes). MH is more robust with concurrent clients
      writing the mailbox, but still may suffer from lost flags; message
      corruption is less likely to occur than with mbox/mmdf. It's usually
      slower to open compared to mbox/mmdf since many small files have to be
      read (Mutt provides
      <xref linkend="header-caching" />to greatly speed this process up).
      Depending on the environment, MH is not very disk-space efficient.</para>
      <para>
      <emphasis>Maildir</emphasis>. The newest of the mailbox formats, used by
      the Qmail MTA (a replacement for sendmail). Similar to
      <emphasis>MH</emphasis>, except that it adds three subdirectories of the
      mailbox:
      <emphasis>tmp</emphasis>,
      <emphasis>new</emphasis> and
      <emphasis>cur</emphasis>. Filenames for the messages are chosen in such a
      way they are unique, even when two programs are writing the mailbox over
      NFS, which means that no file locking is needed and corruption is very
      unlikely. Maildir maybe slower to open without caching in Mutt, it too is
      not very disk-space efficient depending on the environment. Since no
      additional files are used for metadata (which is embedded in the message
      filenames) and Maildir is locking-free, it's easy to sync across
      different machines using file-level synchronization tools.</para>
    </sect1>

    <sect1 id="shortcuts">
      <title>Mailbox Shortcuts</title>
      <para>There are a number of built in shortcuts which refer to specific
      mailboxes. These shortcuts can be used anywhere you are prompted for a
      file or mailbox path or in path-related configuration variables. Note
      that these only work at the beginning of a string.</para>

      <table id="tab-mailbox-shortcuts">
        <title>Mailbox shortcuts</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Shortcut</entry>
              <entry>Refers to...</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>!</literal>
              </entry>
              <entry>your
              <link linkend="spoolfile">$spoolfile</link>(incoming)
              mailbox</entry>
            </row>
            <row>
              <entry>
                <literal>&gt;</literal>
              </entry>
              <entry>your
              <link linkend="mbox">$mbox</link> file</entry>
            </row>
            <row>
              <entry>
                <literal>&lt;</literal>
              </entry>
              <entry>your
              <link linkend="record">$record</link> file</entry>
            </row>
            <row>
              <entry>
                <literal>^</literal>
              </entry>
              <entry>the current mailbox</entry>
            </row>
            <row>
              <entry>
              <literal>-</literal>or
              <literal>!!</literal></entry>
              <entry>the file you've last visited</entry>
            </row>
            <row>
              <entry>
                <literal>~</literal>
              </entry>
              <entry>your home directory</entry>
            </row>
            <row>
              <entry>
              <literal>=</literal>or
              <literal>+</literal></entry>
              <entry>your
              <link linkend="folder">$folder</link> directory</entry>
            </row>
            <row>
              <entry>
                <emphasis>@alias</emphasis>
              </entry>
              <entry>to the
              <link linkend="save-hook">default save folder</link> as determined
              by the address of the alias</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>For example, to store a copy of outgoing messages in the folder
      they were composed in, a
      <link linkend="folder-hook">
        <command>folder-hook</command>
      </link>can be used to set
      <link linkend="record">$record</link>:</para>
      <screen>folder-hook . 'set record=^'</screen>
    </sect1>

    <sect1 id="using-lists">
      <title>Handling Mailing Lists</title>
      <para>Mutt has a few configuration options that make dealing with large
      amounts of mail easier. The first thing you must do is to let Mutt know
      what addresses you consider to be mailing lists (technically this does
      not have to be a mailing list, but that is what it is most often used
      for), and what lists you are subscribed to. This is accomplished through
      the use of the
      <link linkend="lists">
      <command>lists</command> and
      <command>subscribe</command></link>commands in your
      <literal>.muttrc</literal>.</para>
      <para>Now that Mutt knows what your mailing lists are, it can do several
      things, the first of which is the ability to show the name of a list
      through which you received a message (i.e., of a subscribed list) in the
      <emphasis>index</emphasis> menu display. This is useful to distinguish
      between personal and list mail in the same mailbox. In the
      <link linkend="index-format">$index_format</link> variable, the expando
      <quote>%L</quote> will print the string
      <quote>To &lt;list&gt;</quote>when
      <quote>list</quote> appears in the
      <quote>To</quote> field, and
      <quote>Cc &lt;list&gt;</quote>when it appears in the
      <quote>Cc</quote> field (otherwise it prints the name of the
      author).</para>
      <para>Often times the
      <quote>To</quote> and
      <quote>Cc</quote> fields in mailing list messages tend to get quite large.
      Most people do not bother to remove the author of the message they reply
      to from the list, resulting in two or more copies being sent to that
      person. The
      <literal>&lt;list-reply&gt;</literal>function, which by default is bound
      to
      <quote>L</quote> in the
      <emphasis>index</emphasis> menu and
      <emphasis>pager</emphasis>, helps reduce the clutter by only replying to
      the known mailing list addresses instead of all recipients (except as
      specified by
      <literal>Mail-Followup-To</literal>, see below).</para>
      <para>Mutt also supports the
      <literal>Mail-Followup-To</literal> header. When you send a message to a
      list of recipients which includes one or several subscribed mailing
      lists, and if the
      <link linkend="followup-to">$followup_to</link> option is set, Mutt will
      generate a Mail-Followup-To header which contains all the recipients to
      whom you send this message, but not your address. This indicates that
      group-replies or list-replies (also known as
      <quote>followups</quote>) to this message should only be sent to the
      original recipients of the message, and not separately to you - you'll
      receive your copy through one of the mailing lists you are subscribed
      to.</para>
      <para>Conversely, when group-replying or list-replying to a message which
      has a
      <literal>Mail-Followup-To</literal> header, Mutt will respect this header
      if the
      <link linkend="honor-followup-to">$honor_followup_to</link> configuration
      variable is set. Using
      <link linkend="list-reply">list-reply</link> will in this case also make
      sure that the reply goes to the mailing list, even if it's not specified
      in the list of recipients in the
      <literal>Mail-Followup-To</literal>.</para>
      <note>
        <para>When header editing is enabled, you can create a
        <literal>Mail-Followup-To</literal> header manually. Mutt will only
        auto-generate this header if it doesn't exist when you send the
        message.</para>
      </note>
      <para>The other method some mailing list admins use is to generate a
      <quote>Reply-To</quote> field which points back to the mailing list
      address rather than the author of the message. This can create problems
      when trying to reply directly to the author in private, since most mail
      clients will automatically reply to the address given in the
      <quote>Reply-To</quote> field. Mutt uses the
      <link linkend="reply-to">$reply_to</link> variable to help decide which
      address to use. If set to
      <emphasis>ask-yes</emphasis> or
      <emphasis>ask-no</emphasis>, you will be prompted as to whether or not
      you would like to use the address given in the
      <quote>Reply-To</quote> field, or reply directly to the address given in
      the
      <quote>From</quote> field. When set to
      <emphasis>yes</emphasis>, the
      <quote>Reply-To</quote> field will be used when present.</para>
      <para>You can change or delete the
      <quote>X-Label:</quote>field within Mutt using the
      <quote>edit-label</quote> command, bound to the
      <quote>y</quote> key by default. This works for tagged messages, too.
      While in the edit-label function, pressing the &lt;complete&gt; binding
      (TAB, by default) will perform completion against all labels currently in
      use.</para>
      <para>Lastly, Mutt has the ability to
      <link linkend="sort">sort</link> the mailbox into
      <link linkend="threads">threads</link>. A thread is a group of messages
      which all relate to the same subject. This is usually organized into a
      tree-like structure where a message and all of its replies are
      represented graphically. If you've ever used a threaded news client, this
      is the same concept. It makes dealing with large volume mailing lists
      easier because you can easily delete uninteresting threads and quickly
      find topics of value.</para>
    </sect1>

    <sect1 id="using-keywords">
      <title>Keyword Management</title>
      <para>Mutt has supported textual labels (usually known as X-Labels after
      the header that we use to store them) for many years. Since we initially
      added support for X-Labels, however, the larger community has evolved
      more common ways of using and managing such labels, often known as
      <quote>keywords</quote> or
      <quote>tags</quote>.</para>
      <para>If you are new to Mutt or to using keywords in Mutt, you only need
      to know that the &lt;edit-label&gt; binding will edit keywords, and that
      you can search for keywords using the
      <literal>~y</literal> pattern, and use the
      <literal>%y</literal> expando to display it in your
      <literal>$index_format</literal>. You also can sort by keyword. Keywords
      that you set will be stored to the
      <literal>X-Label:</literal>header by default.</para>
      <para>If you've been using X-Labels for a while, things have grown
      slightly. Mutt still supports X-Labels much as it has since 2000, but the
      scope of this support has expanded to support three additional
      header-based techniques for storing keyword metadata on messages:</para>
      <variablelist>
        <varlistentry>
          <term>X-Keywords</term>
          <listitem>
            <para>Informal design; space-delimited keywords</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>X-Mozilla-Keys</term>
          <listitem>
            <para>Informal design used by Mozilla-based agents; space-delimited
            keywords</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Keywords</term>
          <listitem>
            <para>Standardized in RFC2822 (2001); comma-space-delimited
            keywords</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>X-Label</term>
          <listitem>
            <para>Mutt-specific design; freeform text (but see
            <link linkend="xlabel-delimiter">$xlabel_delimiter</link>)</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>With X-Label, mutt's only notion of a message keyword was the
      literal string value of the X-Label header. Under the new, integrated
      support, each message may have a list of distinct message keywords. When
      reading keywords from one of the headers in the list above, the header
      value is split on the indicated delimiter (space or comma-space) for
      X-Keywords:, X-Mozilla-Keys:, and Keywords:. By default, X-Label: is
      parsed as a single keyword. By setting $xlabel_delimiter, you can force
      splitting of X-Label: as well.</para>
      <para>Two boolean variables control how keywords are saved when writing
      messages to a mailbox. The default settings preserve backward
      compatibility within mutt completely, but by changing these values you
      can transition to more standard keyword storage.
      <link linkend="keywords-legacy">$keywords_legacy</link>, if set, will
      tell mutt to use only "legacy" headers -- i.e.,
      <literal>X-Keywords:</literal>,
      <literal>X-Mozilla-Keys</literal>,
      <literal>Keywords</literal>, or
      <literal>X-Label:</literal>. Keywords will be saved to whichever header
      was in use by the message the keyword was read from. If
      <link linkend="keywords-standard">$keywords_standard</link> is set,
      keywords will be saved without exception to the standard
      <literal>Keywords:</literal>header. (If both are set, both will be used;
      if both are unset, legacy headers are used.) Additionally,
      <link linkend="xlabel-delimiter">$xlabel_delimiter</link> is used to
      format the X-Label: header on saves.</para>
      <para>To migrate completely to the new standard, unset
      <literal>$keywords_legacy</literal> and set
      <literal>$keywords_standard</literal>, and set
      <literal>$xlabel_delimiter</literal> either to what you currently use to
      delimit keywords in X-Labels, or to
      <quote>,&#160;</quote>(comma space).</para>
      <para>Note that it is common practice to insert
      <literal>X-Label:</literal>or other keyword headers from proxmail or
      other mail filters. This is a useful trick for categorizing messages en
      masse as they are delivered to your inbox, and it is fully compatible
      with the new keywords code.</para>
    </sect1>

    <sect1 id="display-munging">
      <title>Display Munging</title>
      <para>Working within the confines of a console or terminal window, it is
      often useful to be able to modify certain information elements in a
      non-destructive way -- to change how they display, without changing the
      stored value of the information itself. This is especially so of message
      subjects, which may often be polluted with extraneous metadata that
      either is reproduced elsewhere, or is of secondary interest.</para>
      <cmdsynopsis>
        <command>subjectrx</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">replacement</replaceable>
        </arg>
        <command>unsubjectrx</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
      <literal>subjectrx</literal> specifies a regular expression
      <quote>pattern</quote> which, if detected in a message subject, causes the
      subject to be replaced with the
      <quote>replacement</quote> value. The replacement is subject to
      substitutions in the same way as for the
      <link linkend="spam">spam</link> command:
      <literal>%L</literal> for the text to the left of the match,
      <literal>%R</literal> for text to the right of the match, and
      <literal>%1</literal> for the first subgroup in the match (etc). If you
      simply want to erase the match, set it to
      <quote>%L%R</quote>. Any number of
      <literal>subjectrx</literal> commands may coexist.</para>
      <para>Note this well: the
      <quote>replacement</quote> value replaces the entire subject, not just the
      match!</para>
      <para>
      <literal>unsubjectrx</literal> removes a given subjectrx from the
      substitution list. If
      <literal>*</literal>is used as the pattern, all substitutions will be
      removed.</para>
      <example id="ex-subjectrx">
        <title>Subject Munging</title>
        <screen>
# Erase [rt #12345] tags from Request Tracker (RT) e-mails
subjectrx '\[rt #[0-9]+\] *' '%L%R'
# Servicedesk is another RT that sends more complex subjects.

# Keep the ticket number.

subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'
# Strip out annoying [listname] prefixes in subjects
subjectrx '\[[^\]]*\]:? *' '%L%R'
</screen>
      </example>
    </sect1>

    <sect1 id="new-mail">
      <title>New Mail Detection</title>
      <para>Mutt supports setups with multiple folders, allowing all of them to
      be monitored for new mail (see
      <xref linkend="mailboxes" />for details).</para>

      <sect2 id="new-mail-formats">
        <title>How New Mail Detection Works</title>
        <para>For Mbox and Mmdf folders, new mail is detected by comparing
        access and/or modification times of files: Mutt assumes a folder has
        new mail if it wasn't accessed after it was last modified. Utilities
        like
        <literal>biff</literal> or
        <literal>frm</literal> or any other program which accesses the mailbox
        might cause Mutt to never detect new mail for that mailbox if they do
        not properly reset the access time. Other possible causes of Mutt not
        detecting new mail in these folders are backup tools (updating access
        times) or filesystems mounted without access time update support (for
        Linux systems, see the
        <literal>relatime</literal> option).</para>
        <note>
          <para>Contrary to older Mutt releases, it now maintains the new mail
          status of a folder by properly resetting the access time if the
          folder contains at least one message which is neither read, nor
          deleted, nor marked as old.</para>
        </note>
        <para>In cases where new mail detection for Mbox or Mmdf folders
        appears to be unreliable, the
        <link linkend="check-mbox-size">$check_mbox_size</link> option can be
        used to make Mutt track and consult file sizes for new mail detection
        instead which won't work for size-neutral changes.</para>
        <para>New mail for Maildir is assumed if there is one message in the
        <literal>new/</literal>subdirectory which is not marked deleted (see
        <link linkend="maildir-trash">$maildir_trash</link>). For MH folders, a
        mailbox is considered having new mail if there's at least one message
        in the
        <quote>unseen</quote> sequence as specified by
        <link linkend="mh-seq-unseen">$mh_seq_unseen</link>. Optionally,
        <link linkend="new-mail-command">$new_mail_command</link> can be
        configured to execute an external program every time new mail is
        detected in the current inbox.</para>
        <para>Mutt does not poll POP3 folders for new mail, it only
        periodically checks the currently opened folder (if it's a POP3
        folder).</para>
        <para>For IMAP, by default Mutt uses recent message counts provided by
        the server to detect new mail. If the
        <link linkend="imap-idle">$imap_idle</link> option is set, it'll use the
        IMAP IDLE extension if advertised by the server.</para>
        <para>The
        <link linkend="mail-check-recent">$mail_check_recent</link> option
        changes whether Mutt will notify you of new mail in an already visited
        mailbox. When set (the default) it will only notify you of new mail
        received since the last time you opened the mailbox. When unset, Mutt
        will notify you of any new mail in the mailbox.</para>
      </sect2>

      <sect2 id="new-mail-polling">
        <title>Polling For New Mail</title>
        <para>When in the index menu and being idle (also see
        <link linkend="feature/timeout">$timeout</link>), Mutt periodically checks for
        new mail in all folders which have been configured via the
        <command>mailboxes</command> command. The interval depends on the folder
        type: for local/IMAP folders it consults
        <link linkend="mail-check">$mail_check</link> and
        <link linkend="pop-checkinterval">$pop_checkinterval</link> for POP
        folders.</para>
        <para>Outside the index menu the directory browser supports checking
        for new mail using the
        <literal>&lt;check-new&gt;</literal>function which is unbound by
        default. Pressing TAB will bring up a menu showing the files specified
        by the
        <command>mailboxes</command> command, and indicate which contain new
        messages. Mutt will automatically enter this mode when invoked from the
        command line with the
        <literal>-y</literal> option.</para>
        <para>For the pager, index and directory browser menus, Mutt contains
        the
        <literal>&lt;buffy-list&gt;</literal>function (bound to
        <quote>.</quote>by default) which will print a list of folders with new
        mail in the command line at the bottom of the screen.</para>
        <para>For the index, by default Mutt displays the number of mailboxes
        with new mail in the status bar, please refer to the
        <link linkend="status-format">$status_format</link> variable for
        details.</para>
        <para>When changing folders, Mutt fills the prompt with the first
        folder from the mailboxes list containing new mail (if any), pressing
        <literal>&lt;Space&gt;</literal>will cycle through folders with new
        mail. The (by default unbound) function
        <literal>&lt;next-unread-mailbox&gt;</literal>in the index can be used
        to immediately open the next folder with unread mail (if any).</para>
      </sect2>

      <sect2 id="calc-mailbox-counts">
        <title>Calculating Mailbox Message Counts</title>
        <para>If
        <link linkend="mail-check-stats">$mail_check_stats</link> is set, Mutt
        will periodically calculate the unread, flagged, and total message
        counts for each mailbox watched by the
        <command>mailboxes</command> command. This calculation takes place at
        the same time as new mail polling, but is controlled by a separate
        timer:
        <link linkend="mail-check-stats-interval">
        $mail_check_stats_interval</link>.</para>
        <para>The sidebar can display these message counts. See
        <link linkend="sidebar-format">$sidebar_format</link>.</para>
      </sect2>
    </sect1>

    <sect1 id="editing-threads">
      <title>Editing Threads</title>
      <para>Mutt has the ability to dynamically restructure threads that are
      broken either by misconfigured software or bad behavior from some
      correspondents. This allows to clean your mailboxes from these annoyances
      which make it hard to follow a discussion.</para>

      <sect2 id="link-threads">
        <title>Linking Threads</title>
        <para>Some mailers tend to
        <quote>forget</quote> to correctly set the
        <quote>In-Reply-To:</quote>and
        <quote>References:</quote>headers when replying to a message. This
        results in broken discussions because Mutt has not enough information
        to guess the correct threading. You can fix this by tagging the reply,
        then moving to the parent message and using the
        <literal>&lt;link-threads&gt;</literal>function (bound to &amp; by
        default). The reply will then be connected to this parent
        message.</para>
        <para>You can also connect multiple children at once, tagging them and
        using the
        <literal>&lt;tag-prefix&gt;</literal>command (
        <quote>;</quote>) or the
        <link linkend="auto-tag">$auto_tag</link> option.</para>
      </sect2>

      <sect2 id="break-threads">
        <title>Breaking Threads</title>
        <para>On mailing lists, some people are in the bad habit of starting a
        new discussion by hitting
        <quote>reply</quote> to any message from the list and changing the
        subject to a totally unrelated one. You can fix such threads by using
        the
        <literal>&lt;break-thread&gt;</literal>function (bound by default to
        #), which will turn the subthread starting from the current message
        into a whole different thread.</para>
      </sect2>
    </sect1>

    <sect1 id="dsn">
      <title>Delivery Status Notification (DSN) Support</title>
      <para>RFC1894 defines a set of MIME content types for relaying
      information about the status of electronic mail messages. These can be
      thought of as
      <quote>return receipts.</quote></para>
      <para>To support DSN, there are two variables.
      <link linkend="dsn-notify">$dsn_notify</link> is used to request receipts
      for different results (such as failed message, message delivered, etc.).
      <link linkend="dsn-return">$dsn_return</link> requests how much of your
      message should be returned with the receipt (headers or full
      message).</para>
      <para>When using
      <link linkend="sendmail">$sendmail</link> for mail delivery, you need to
      use either Berkeley sendmail 8.8.x (or greater) a MTA supporting DSN
      command line options compatible to Sendmail: The -N and -R options can be
      used by the mail client to make requests as to what type of status
      messages should be returned. Please consider your MTA documentation
      whether DSN is supported.</para>
      <para>For SMTP delivery using
      <link linkend="smtp-url">$smtp_url</link>, it depends on the capabilities
      announced by the server whether Mutt will attempt to request DSN or
      not.</para>
    </sect1>

    <sect1 id="urlview">
      <title>Start a WWW Browser on URLs</title>
      <para>If a message contains URLs, it is efficient to get a menu with all
      the URLs and start a WWW browser on one of them. This functionality is
      provided by the external urlview program which can be retrieved at
      <ulink url="ftp://ftp.mutt.org/mutt/contrib/">
      ftp://ftp.mutt.org/mutt/contrib/</ulink>and the configuration
      commands:</para>
      <screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>
    </sect1>

    <sect1 id="misc-topics">
      <title>Miscellany</title>
      <para>This section documents various features that fit nowhere
      else.</para>
      <variablelist>
        <varlistentry>
          <term>Address normalization</term>
          <listitem>
            <para>Mutt normalizes all e-mail addresses to the simplest form
            possible. If an address contains a realname, the form
            <emphasis>Joe User &lt;joe@example.com&gt;</emphasis>is used and
            the pure e-mail address without angle brackets otherwise, i.e. just
            <emphasis>joe@example.com</emphasis>.</para>
            <para>This normalization affects all headers Mutt generates
            including aliases.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Initial folder selection</term>
          <listitem>
            <para>The folder Mutt opens at startup is determined as follows:
            the folder specified in the
            <literal>$MAIL</literal> environment variable if present. Otherwise,
            the value of
            <literal>$MAILDIR</literal> is taken into account. If that isn't
            present either, Mutt takes the user's mailbox in the mailspool as
            determined at compile-time (which may also reside in the home
            directory). The
            <link linkend="spoolfile">$spoolfile</link> setting overrides this
            selection. Highest priority has the mailbox given with the
            <literal>-f</literal> command line option.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>
  </chapter>

  <chapter id="guide/mimesupport">
    <title>Mutt's MIME Support</title>
    <para>Quite a bit of effort has been made to make Mutt the premier
    text-mode MIME MUA. Every effort has been made to provide the functionality
    that the discerning MIME user requires, and the conformance to the
    standards wherever possible. When configuring Mutt for MIME, there are two
    extra types of configuration files which Mutt uses. One is the
    <literal>mime.types</literal> file, which contains the mapping of file
    extensions to IANA MIME types. The other is the
    <literal>mailcap</literal> file, which specifies the external commands to
    use for handling specific MIME types.</para>

    <sect1 id="using-mime">
      <title>Using MIME in Mutt</title>

      <sect2 id="mime-overview">
        <title>MIME Overview</title>
        <para>MIME is short for
        <quote>Multipurpose Internet Mail Extension</quote> and describes
        mechanisms to internationalize and structure mail messages. Before the
        introduction of MIME, messages had a single text part and were limited
        to us-ascii header and content. With MIME, messages can have
        attachments (and even attachments which itself have attachments and
        thus form a tree structure), nearly arbitrary characters can be used
        for sender names, recipients and subjects.</para>
        <para>Besides the handling of non-ascii characters in message headers,
        to Mutt the most important aspect of MIME are so-called MIME types.
        These are constructed using a
        <emphasis>major</emphasis> and
        <emphasis>minor</emphasis> type separated by a forward slash. These
        specify details about the content that follows. Based upon these, Mutt
        decides how to handle this part. The most popular major type is
        <quote>
          <literal>text</literal>
        </quote>with minor types for plain text, HTML and various other
        formats. Major types also exist for images, audio, video and of course
        general application data (e.g. to separate cryptographically signed
        data with a signature, send office documents, and in general arbitrary
        binary data). There's also the
        <literal>multipart</literal> major type which represents the root of a
        subtree of MIME parts. A list of supported MIME types can be found in
        <xref linkend="supported-mime-types" />.</para>
        <para>MIME also defines a set of encoding schemes for transporting MIME
        content over the network:
        <literal>7bit</literal>,
        <literal>8bit</literal>,
        <literal>quoted-printable</literal>,
        <literal>base64</literal> and
        <literal>binary</literal>. There're some rules when to choose what for
        encoding headers and/or body (if needed), and Mutt will in general make
        a good choice.</para>
        <para>Mutt does most of MIME encoding/decoding behind the scenes to
        form messages conforming to MIME on the sending side. On reception, it
        can be flexibly configured as to how what MIME structure is displayed
        (and if it's displayed): these decisions are based on the content's
        MIME type. There are three areas/menus in dealing with MIME: the pager
        (while viewing a message), the attachment menu and the compose
        menu.</para>
      </sect2>

      <sect2 id="mime-pager">
        <title>Viewing MIME Messages in the Pager</title>
        <para>When you select a message from the index and view it in the
        pager, Mutt decodes as much of a message as possible to a text
        representation. Mutt internally supports a number of MIME types,
        including the
        <literal>text</literal> major type (with all minor types), the
        <literal>message/rfc822</literal>(mail messages) type and some
        <literal>multipart</literal> types. In addition, it recognizes a variety
        of PGP MIME types, including PGP/MIME and
        <literal>application/pgp</literal>.</para>
        <para>Mutt will denote attachments with a couple lines describing them.
        These lines are of the form:</para>
        <screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>
        <para>Where the
        <emphasis>Description</emphasis> is the description or filename given
        for the attachment, and the
        <emphasis>Encoding</emphasis> is one of the already mentioned content
        encodings.</para>
        <para>If Mutt cannot deal with a MIME type, it will display a message
        like:</para>
        <screen>[-- image/gif is unsupported (use 'v' to view this part) --]</screen>
      </sect2>

      <sect2 id="attach-menu">
        <title>The Attachment Menu</title>
        <para>The default binding for
        <literal>&lt;view-attachments&gt;</literal>is
        <quote>v</quote>, which displays the attachment menu for a message. The
        attachment menu displays a list of the attachments in a message. From
        the attachment menu, you can save, print, pipe, delete, and view
        attachments. You can apply these operations to a group of attachments
        at once, by tagging the attachments and by using the
        <literal>&lt;tag-prefix&gt;</literal>operator. You can also reply to
        the current message from this menu, and only the current attachment (or
        the attachments tagged) will be quoted in your reply. You can view
        attachments as text, or view them using the mailcap viewer definition
        (the mailcap mechanism is explained later in detail).</para>
        <para>Finally, you can apply the usual message-related functions (like
        <link linkend="resend-message">
          <literal>&lt;resend-message&gt;</literal>
        </link>, and the
        <literal>&lt;reply&gt;</literal>and
        <literal>&lt;forward&gt;</literal>functions) to attachments of type
        <literal>message/rfc822</literal>.</para>
        <para>See table
        <xref linkend="tab-attachment-bindings" />for all available
        functions.</para>
      </sect2>

      <sect2 id="compose-menu">
        <title>The Compose Menu</title>
        <para>The compose menu is the menu you see before you send a message.
        It allows you to edit the recipient list, the subject, and other
        aspects of your message. It also contains a list of the attachments of
        your message, including the main body. From this menu, you can print,
        copy, filter, pipe, edit, compose, review, and rename an attachment or
        a list of tagged attachments. You can also modifying the attachment
        information, notably the type, encoding and description.</para>
        <para>Attachments appear as follows by default:</para>
        <screen>
- 1 [text/plain, 7bit, 1K]           /tmp/mutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/mutt-0.85.tar.gz &lt;no description&gt;
</screen>
        <para>The
        <quote>-</quote>denotes that Mutt will delete the file after sending
        (or postponing, or canceling) the message. It can be toggled with the
        <literal>&lt;toggle-unlink&gt;</literal>command (default: u). The next
        field is the MIME content-type, and can be changed with the
        <literal>&lt;edit-type&gt;</literal>command (default: ^T). The next
        field is the encoding for the attachment, which allows a binary message
        to be encoded for transmission on 7bit links. It can be changed with
        the
        <literal>&lt;edit-encoding&gt;</literal>command (default: ^E). The next
        field is the size of the attachment, rounded to kilobytes or megabytes.
        The next field is the filename, which can be changed with the
        <literal>&lt;rename-file&gt;</literal>command (default: R). The final
        field is the description of the attachment, and can be changed with the
        <literal>&lt;edit-description&gt;</literal>command (default: d). See
        <link linkend="attach-format">$attach_format</link> for a full list of
        available expandos to format this display to your needs.</para>
      </sect2>
    </sect1>

    <sect1 id="mime-types">
      <title>MIME Type Configuration with
      <literal>mime.types</literal></title>
      <para>To get most out of MIME, it's important that a MIME part's content
      type matches the content as closely as possible so that the recipient's
      client can automatically select the right viewer for the content.
      However, there's no reliable for Mutt to know how to detect every
      possible file type. Instead, it uses a simple plain text mapping file
      that specifies what file extension corresponds to what MIME type. This
      file is called
      <literal>mime.types</literal>.</para>
      <para>When you add an attachment to your mail message, Mutt searches your
      personal
      <literal>mime.types</literal> file at
      <literal>$HOME/.mime.types</literal>, and then the system
      <literal>mime.types</literal> file at
      <literal>/usr/local/share/mutt/mime.types</literal> or
      <literal>/etc/mime.types</literal></para>
      <para>Each line starts with the full MIME type, followed by a space and
      space-separated list of file extensions. For example you could
      use:</para>
      <example id="ex-mime-types">
        <title>
          <literal>mime.types</literal>
        </title>
        <screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>
      </example>
      <para>A sample
      <literal>mime.types</literal> file comes with the Mutt distribution, and
      should contain most of the MIME types you are likely to use.</para>
      <para>If Mutt can not determine the MIME type by the extension of the
      file you attach, it will look at the file. If the file is free of binary
      information, Mutt will assume that the file is plain text, and mark it as
      <literal>text/plain</literal>. If the file contains binary information,
      then Mutt will mark it as
      <literal>application/octet-stream</literal>. You can change the MIME type
      that Mutt assigns to an attachment by using the
      <literal>&lt;edit-type&gt;</literal>command from the compose menu
      (default: ^T), see
      <xref linkend="supported-mime-types" />for supported major types. Mutt
      recognizes all of these if the appropriate entry is found in the
      <literal>mime.types</literal> file. Non-recognized mime types should only
      be used if the recipient of the message is likely to be expecting such
      attachments.</para>

      <table id="supported-mime-types">
        <title>Supported MIME types</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>MIME major type</entry>
              <entry>Standard</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>application</literal>
              </entry>
              <entry>yes</entry>
              <entry>General application data</entry>
            </row>
            <row>
              <entry>
                <literal>audio</literal>
              </entry>
              <entry>yes</entry>
              <entry>Audio data</entry>
            </row>
            <row>
              <entry>
                <literal>image</literal>
              </entry>
              <entry>yes</entry>
              <entry>Image data</entry>
            </row>
            <row>
              <entry>
                <literal>message</literal>
              </entry>
              <entry>yes</entry>
              <entry>Mail messages, message status information</entry>
            </row>
            <row>
              <entry>
                <literal>model</literal>
              </entry>
              <entry>yes</entry>
              <entry>VRML and other modeling data</entry>
            </row>
            <row>
              <entry>
                <literal>multipart</literal>
              </entry>
              <entry>yes</entry>
              <entry>Container for other MIME parts</entry>
            </row>
            <row>
              <entry>
                <literal>text</literal>
              </entry>
              <entry>yes</entry>
              <entry>Text data</entry>
            </row>
            <row>
              <entry>
                <literal>video</literal>
              </entry>
              <entry>yes</entry>
              <entry>Video data</entry>
            </row>
            <row>
              <entry>
                <literal>chemical</literal>
              </entry>
              <entry>no</entry>
              <entry>Mostly molecular data</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>MIME types are not arbitrary, they need to be assigned by
      <ulink url="http://www.iana.org/assignments/media-types/">
      IANA</ulink>.</para>
    </sect1>

    <sect1 id="mailcap">
      <title>MIME Viewer Configuration with Mailcap</title>
      <para>Mutt supports RFC 1524 MIME Configuration, in particular the Unix
      specific format specified in Appendix A of RFC 1524. This file format is
      commonly referred to as the
      <quote>mailcap</quote> format. Many MIME compliant programs utilize the
      mailcap format, allowing you to specify handling for all MIME types in
      one place for all programs. Programs known to use this format include
      Firefox, lynx and metamail.</para>
      <para>In order to handle various MIME types that Mutt doesn't have
      built-in support for, it parses a series of external configuration files
      to find an external handler. The default search string for these files is
      a colon delimited list containing the following files:</para>
      <orderedlist>
        <listitem>
          <para>
            <literal>$HOME/.mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$PKGDATADIR/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$SYSCONFDIR/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/etc/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/usr/etc/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/usr/local/etc/mailcap</literal>
          </para>
        </listitem>
      </orderedlist>
      <para>where
      <literal>$HOME</literal> is your home directory. The
      <literal>$PKGDATADIR</literal> and the
      <literal>$SYSCONFDIR</literal> directories depend on where Mutt is
      installed: the former is the default for shared data, the latter for
      system configuration files.</para>
      <para>The default search path can be obtained by running the following
      command:</para>
      <screen>mutt -nF /dev/null -Q mailcap_path</screen>
      <para>In particular, the metamail distribution will install a mailcap
      file, usually as
      <literal>/usr/local/etc/mailcap</literal>, which contains some baseline
      entries.</para>

      <sect2 id="mailcap-basics">
        <title>The Basics of the Mailcap File</title>
        <para>A mailcap file consists of a series of lines which are comments,
        blank, or definitions.</para>
        <para>A comment line consists of a # character followed by anything you
        want.</para>
        <para>A blank line is blank.</para>
        <para>A definition line consists of a content type, a view command, and
        any number of optional fields. Each field of a definition line is
        divided by a semicolon
        <quote>;</quote>character.</para>
        <para>The content type is specified in the MIME standard
        <quote>type/subtype</quote> notation. For example,
        <literal>text/plain</literal>,
        <literal>text/html</literal>,
        <literal>image/gif</literal>, etc. In addition, the mailcap format
        includes two formats for wildcards, one using the special
        <quote>*</quote>subtype, the other is the implicit wild, where you only
        include the major type. For example,
        <literal>image/*</literal>, or
        <literal>video</literal> will match all image types and video types,
        respectively.</para>
        <para>The view command is a Unix command for viewing the type
        specified. There are two different types of commands supported. The
        default is to send the body of the MIME message to the command on
        stdin. You can change this behavior by using
        <literal>%s</literal> as a parameter to your view command. This will
        cause Mutt to save the body of the MIME message to a temporary file,
        and then call the view command with the
        <literal>%s</literal> replaced by the name of the temporary file. In
        both cases, Mutt will turn over the terminal to the view program until
        the program quits, at which time Mutt will remove the temporary file if
        it exists. This means that mailcap does
        <emphasis>not</emphasis> work out of the box with programs which detach
        themselves from the terminal right after starting, like
        <literal>open</literal> on Mac OS X. In order to nevertheless use these
        programs with mailcap, you probably need custom shell scripts.</para>
        <para>So, in the simplest form, you can send a
        <literal>text/plain</literal> message to the external pager more on
        standard input:</para>
        <screen>text/plain; more</screen>
        <para>Or, you could send the message as a file:</para>
        <screen>text/plain; more %s</screen>
        <para>Perhaps you would like to use lynx to interactively view a
        <literal>text/html</literal> message:</para>
        <screen>text/html; lynx %s</screen>
        <para>In this case, lynx does not support viewing a file from standard
        input, so you must use the
        <literal>%s</literal> syntax.</para>
        <note>
          <para>
            <emphasis>Some older versions of lynx contain a bug where they will
            check the mailcap file for a viewer for
            <literal>text/html</literal>. They will find the line which calls
            lynx, and run it. This causes lynx to continuously spawn itself to
            view the object.</emphasis>
          </para>
        </note>
        <para>On the other hand, maybe you don't want to use lynx
        interactively, you just want to have it convert the
        <literal>text/html</literal> to
        <literal>text/plain</literal>, then you can use:</para>
        <screen>text/html; lynx -dump %s | more</screen>
        <para>Perhaps you wish to use lynx to view
        <literal>text/html</literal> files, and a pager on all other text
        formats, then you would use the following:</para>
        <screen>
text/html; lynx %s
text/*; more
</screen>
      </sect2>

      <sect2 id="secure-mailcap">
        <title>Secure Use of Mailcap</title>
        <para>The interpretation of shell meta-characters embedded in MIME
        parameters can lead to security problems in general. Mutt tries to
        quote parameters in expansion of
        <literal>%s</literal> syntaxes properly, and avoids risky characters by
        substituting them, see the
        <link linkend="mailcap-sanitize">
        $mailcap_sanitize</link> variable.</para>
        <para>Although Mutt's procedures to invoke programs with mailcap seem
        to be safe, there are other applications parsing mailcap, maybe taking
        less care of it. Therefore you should pay attention to the following
        rules:</para>
        <para>
        <emphasis>Keep the %-expandos away from shell quoting.</emphasis>Don't
        quote them with single or double quotes. Mutt does this for you, the
        right way, as should any other program which interprets mailcap. Don't
        put them into backtick expansions. Be highly careful with evil
        statements, and avoid them if possible at all. Trying to fix broken
        behavior with quotes introduces new leaks — there is no alternative to
        correct quoting in the first place.</para>
        <para>If you have to use the %-expandos' values in context where you
        need quoting or backtick expansions, put that value into a shell
        variable and reference the shell variable where necessary, as in the
        following example (using
        <literal>$charset</literal> inside the backtick expansion is safe, since
        it is not itself subject to any further expansion):</para>
        <screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>
      </sect2>

      <sect2 id="advanced-mailcap">
        <title>Advanced Mailcap Usage</title>

        <sect3 id="optional-mailcap-fields">
          <title>Optional Fields</title>
          <para>In addition to the required content-type and view command
          fields, you can add semi-colon
          <quote>;</quote>separated fields to set flags and other options. Mutt
          recognizes the following optional fields:</para>
          <variablelist>
            <varlistentry>
              <term>copiousoutput</term>
              <listitem>
                <para>This flag tells Mutt that the command passes possibly
                large amounts of text on standard output. This causes Mutt to
                invoke a pager (either the internal pager or the external pager
                defined by the pager variable) on the output of the view
                command. Without this flag, Mutt assumes that the command is
                interactive. One could use this to replace the pipe to
                <literal>more</literal> in the
                <literal>lynx -dump</literal> example in the Basic
                section:</para>
                <screen>text/html; lynx -dump %s ; copiousoutput</screen>
                <para>This will cause lynx to format the
                <literal>text/html</literal> output as
                <literal>text/plain</literal> and Mutt will use your standard
                pager to display the results.</para>
                <para>Mutt will set the
                <literal>COLUMNS</literal> environment variable to the width of
                the pager. Some programs make use of this environment variable
                automatically. Others provide a command line argument that can
                use this to set the output width:</para>
                <screen>text/html; lynx -dump -width ${COLUMNS:-80} %s; copiousoutput</screen>
                <para>Note that when using the built-in pager,
                <emphasis>only</emphasis> entries with this flag will be
                considered a handler for a MIME type — all other entries will
                be ignored.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>needsterminal</term>
              <listitem>
                <para>Mutt uses this flag when viewing attachments with
                <link linkend="auto-view">
                  <command>auto_view</command>
                </link>, in order to decide whether it should honor the setting
                of the
                <link linkend="wait-key">$wait_key</link> variable or not. When
                an attachment is viewed using an interactive program, and the
                corresponding mailcap entry has a
                <emphasis>needsterminal</emphasis> flag, Mutt will use
                <link linkend="wait-key">$wait_key</link> and the exit status of
                the program to decide if it will ask you to press a key after
                the external program has exited. In all other situations it
                will not prompt you for a key.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>compose=&lt;command&gt;</term>
              <listitem>
                <para>This flag specifies the command to use to create a new
                attachment of a specific MIME type. Mutt supports this from the
                compose menu.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>composetyped=&lt;command&gt;</term>
              <listitem>
                <para>This flag specifies the command to use to create a new
                attachment of a specific MIME type. This command differs from
                the compose command in that Mutt will expect standard MIME
                headers on the data. This can be used to specify parameters,
                filename, description, etc. for a new attachment. Mutt supports
                this from the compose menu.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>print=&lt;command&gt;</term>
              <listitem>
                <para>This flag specifies the command to use to print a
                specific MIME type. Mutt supports this from the attachment and
                compose menus.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>edit=&lt;command&gt;</term>
              <listitem>
                <para>This flag specifies the command to use to edit a specific
                MIME type. Mutt supports this from the compose menu, and also
                uses it to compose new attachments. Mutt will default to the
                defined
                <link linkend="editor">$editor</link> for text
                attachments.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>nametemplate=&lt;template&gt;</term>
              <listitem>
                <para>This field specifies the format for the file denoted by
                <literal>%s</literal> in the command fields. Certain programs
                will require a certain file extension, for instance, to
                correctly view a file. For instance, lynx will only interpret a
                file as
                <literal>text/html</literal> if the file ends in
                <literal>.html</literal>. So, you would specify lynx as a
                <literal>text/html</literal> viewer with a line in the mailcap
                file like:</para>
                <screen>text/html; lynx %s; nametemplate=%s.html</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>test=&lt;command&gt;</term>
              <listitem>
                <para>This field specifies a command to run to test whether
                this mailcap entry should be used. The command is defined with
                the command expansion rules defined in the next section. If the
                command returns 0, then the test passed, and Mutt uses this
                entry. If the command returns non-zero, then the test failed,
                and Mutt continues searching for the right entry. Note that the
                content-type must match before Mutt performs the test. For
                example:</para>
                <screen>
text/html; firefox -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>
                <para>In this example, Mutt will run the program
                <literal>RunningX</literal> which will return 0 if the X Window
                manager is running, and non-zero if it isn't. If
                <literal>RunningX</literal> returns 0, then Mutt will run
                firefox to display the
                <literal>text/html</literal> object. If RunningX doesn't return
                0, then Mutt will go on to the next entry and use lynx to
                display the
                <literal>text/html</literal> object.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect3>

        <sect3 id="mailcap-search-order">
          <title>Search Order</title>
          <para>When searching for an entry in the mailcap file, Mutt will
          search for the most useful entry for its purpose. For instance, if
          you are attempting to print an
          <literal>image/gif</literal>, and you have the following entries in
          your mailcap file, Mutt will search for an entry with the print
          command:</para>
          <screen>
image/*;        xv %s
image/gif;      ; print= anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
</screen>
          <para>Mutt will skip the
          <literal>image/*</literal>entry and use the
          <literal>image/gif</literal> entry with the print command.</para>
          <para>In addition, you can use this with
          <link linkend="auto-view">
            <command>auto_view</command>
          </link>to denote two commands for viewing an attachment, one to be
          viewed automatically, the other to be viewed interactively from the
          attachment menu using the
          <literal>&lt;view-mailcap&gt;</literal>function (bound to
          <quote>m</quote> by default). In addition, you can then use the test
          feature to determine which viewer to use interactively depending on
          your environment.</para>
          <screen>
text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>
          <para>For
          <link linkend="auto-view">
            <command>auto_view</command>
          </link>, Mutt will choose the third entry because of the
          <literal>copiousoutput</literal> tag. For interactive viewing, Mutt
          will run the program
          <literal>RunningX</literal> to determine if it should use the first
          entry. If the program returns non-zero, Mutt will use the second
          entry for interactive viewing. The last entry is for inline display
          in the pager and the
          <literal>&lt;view-attach&gt;</literal>function in the attachment
          menu.</para>
          <para>Entries with the
          <literal>copiousoutput</literal> tag should always be specified as the
          last one per type. For non-interactive use, the last entry will then
          actually be the first matching one with the tag set. For
          non-interactive use, only
          <literal>copiousoutput</literal>-tagged entries are considered. For
          interactive use, Mutt ignores this tag and treats all entries
          equally. Therefore, if not specified last, all following entries
          without this tag would never be considered for
          <literal>&lt;view-attach&gt;</literal>because the
          <literal>copiousoutput</literal> before them matched already.</para>
        </sect3>

        <sect3 id="mailcap-command-expansion">
          <title>Command Expansion</title>
          <para>The various commands defined in the mailcap files are passed to
          the
          <literal>/bin/sh</literal> shell using the
          <literal>system(3)</literal>function. Before the command is passed to
          <literal>/bin/sh -c</literal>, it is parsed to expand various special
          parameters with information from Mutt. The keywords Mutt expands
          are:</para>
          <variablelist>
            <varlistentry>
              <term>%s</term>
              <listitem>
                <para>As seen in the basic mailcap section, this variable is
                expanded to a filename specified by the calling program. This
                file contains the body of the message to view/print/edit or
                where the composing program should place the results of
                composition. In addition, the use of this keyword causes Mutt
                to not pass the body of the message to the view/print/edit
                program on stdin.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>%t</term>
              <listitem>
                <para>Mutt will expand
                <literal>%t</literal> to the text representation of the content
                type of the message in the same form as the first parameter of
                the mailcap definition line, i.e.
                <literal>text/html</literal> or
                <literal>image/gif</literal>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>%{&lt;parameter&gt;}</term>
              <listitem>
                <para>Mutt will expand this to the value of the specified
                parameter from the Content-Type: line of the mail message. For
                instance, if your mail message contains:</para>
                <screen>Content-Type: text/plain; charset=iso-8859-1</screen>
                <para>then Mutt will expand
                <literal>%{charset}</literal>to
                <quote>iso-8859-1</quote>. The default metamail mailcap file
                uses this feature to test the charset to spawn an xterm using
                the right charset to view the message.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>\%</term>
              <listitem>
                <para>This will be replaced by a literal
                <literal>%</literal>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>Mutt does not currently support the
          <literal>%F</literal> and
          <literal>%n</literal> keywords specified in RFC 1524. The main purpose
          of these parameters is for multipart messages, which is handled
          internally by Mutt.</para>
        </sect3>
      </sect2>

      <sect2 id="mailcap-example">
        <title>Example Mailcap Files</title>
        <para>This mailcap file is fairly simple and standard:</para>
        <screen>
<emphasis role="comment"># I'm always running X :)</emphasis>
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null
<emphasis role="comment"># I'm always running firefox (if my computer had more memory, maybe)</emphasis>
text/html;      firefox -remote 'openURL(%s)'
</screen>
        <para>This mailcap file shows quite a number of examples:</para>
        <screen>
<emphasis role="comment"># Use xanim to view all videos   Xanim produces a header on startup,
# send that to /dev/null so I don't see it</emphasis>
video/*;        xanim %s &gt; /dev/null
<emphasis role="comment"># Send html to a running firefox by remote</emphasis>
text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox
<emphasis role="comment"># If I'm not running firefox but I am running X, start firefox on the
# object</emphasis>
text/html;      firefox %s; test=RunningX
<emphasis role="comment"># Else use lynx to view it as text</emphasis>
text/html;      lynx %s
<emphasis role="comment"># This version would convert the text/html to text/plain</emphasis>
text/html;      lynx -dump %s; copiousoutput
<emphasis role="comment"># I use enscript to print text in two columns to a page</emphasis>
text/*;         more %s; print=enscript -2Gr %s
<emphasis role="comment"># Firefox adds a flag to tell itself to view jpegs internally</emphasis>
image/jpeg;xv %s; x-mozilla-flags=internal
<emphasis role="comment"># Use xv to view images if I'm running X</emphasis>
<emphasis role="comment"># In addition, this uses the \ to extend the line and set my editor</emphasis>
<emphasis role="comment"># for images</emphasis>
image/*;xv %s; test=RunningX; \
        edit=xpaint %s
<emphasis role="comment"># Convert images to text using the netpbm tools</emphasis>
image/*;  (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm |
pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput
<emphasis role="comment"># Send excel spreadsheets to my NT box</emphasis>
application/ms-excel; open.pl %s
</screen>
      </sect2>
    </sect1>

    <sect1 id="auto-view">
      <title>MIME Autoview</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>auto_view</command>
        <arg choice="plain">
          <replaceable>mimetype</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>mimetype</replaceable>
        </arg>
        <command>unauto_view</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>mimetype</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>In addition to explicitly telling Mutt to view an attachment with
      the MIME viewer defined in the mailcap file from the attachments menu,
      Mutt has support for automatically viewing MIME attachments while in the
      pager.</para>
      <para>For this to work, you must define a viewer in the mailcap file
      which uses the
      <literal>copiousoutput</literal> option to denote that it is
      non-interactive. Usually, you also use the entry to convert the
      attachment to a text representation which you can view in the
      pager.</para>
      <para>You then use the
      <command>auto_view</command> configuration command to list the
      content-types that you wish to view automatically. For instance, if you
      set it to:</para>
      <screen>
auto_view text/html application/x-gunzip \
  application/postscript image/gif application/x-tar-gz
</screen>
      <para>...Mutt would try to find corresponding entries for rendering
      attachments of these types as text. A corresponding mailcap could look
      like:</para>
      <screen>
text/html;      lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;        anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz; gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>
      <para>
      <command>unauto_view</command> can be used to remove previous entries from
      the
      <command>auto_view</command> list. This can be used with
      <link linkend="message-hook">
        <command>message-hook</command>
      </link>to autoview messages based on size, etc.
      <quote>
      <command>unauto_view</command>*</quote>will remove all previous
      entries.</para>
    </sect1>

    <sect1 id="alternative-order">
      <title>MIME Multipart/Alternative</title>
      <para>The
      <literal>multipart/alternative</literal> container type only has child
      MIME parts which represent the same content in an alternative way. This
      is often used to send HTML messages which contain an alternative plain
      text representation.</para>
      <para>Mutt has some heuristics for determining which attachment of a
      <literal>multipart/alternative</literal> type to display:</para>
      <orderedlist>
        <listitem>
          <para>First, Mutt will check the
          <command>alternative_order</command> list to determine if one of the
          available types is preferred. It consists of a number of MIME types
          in order, including support for implicit and explicit wildcards. For
          example:</para>
          <screen>
alternative_order text/enriched text/plain text \
  application/postscript image/*
</screen>
        </listitem>
        <listitem>
          <para>Next, Mutt will check if any of the types have a defined
          <link linkend="auto-view">
            <command>auto_view</command>
          </link>, and use that.</para>
        </listitem>
        <listitem>
          <para>Failing that, Mutt will look for any text type.</para>
        </listitem>
        <listitem>
          <para>As a last attempt, Mutt will look for any type it knows how to
          handle.</para>
        </listitem>
      </orderedlist>
      <para>To remove a MIME type from the
      <command>alternative_order</command> list, use the
      <command>unalternative_order</command> command.</para>
    </sect1>

    <sect1 id="attachments">
      <title>Attachment Searching and Counting</title>
      <para>If you ever lose track of attachments in your mailboxes, Mutt's
      attachment-counting and -searching support might be for you. You can make
      your message index display the number of qualifying attachments in each
      message, or search for messages by attachment count. You also can
      configure what kinds of attachments qualify for this feature with the
      <command>attachments</command> and
      <command>unattachments</command> commands.</para>
      <para>In order to provide this information, Mutt needs to fully
      MIME-parse all messages affected first. This can slow down operation
      especially for remote mail folders such as IMAP because all messages have
      to be downloaded first regardless whether the user really wants to view
      them or not though using
      <xref linkend="body-caching" />usually means to download the message just
      once.</para>
      <para>The syntax is:</para>
      <cmdsynopsis>
        <command>attachments</command>
        <arg choice="plain">
          <replaceable>{ + | - }disposition</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <command>unattachments</command>
        <arg choice="plain">
          <replaceable>{ + | - }disposition</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <command>attachments</command>
        <arg choice="plain">
          <replaceable>?</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
      <emphasis>disposition</emphasis> is the attachment's Content-Disposition
      type — either
      <literal>inline</literal> or
      <literal>attachment</literal>. You can abbreviate this to
      <literal>I</literal> or
      <literal>A</literal>.</para>
      <para>Disposition is prefixed by either a
      <quote>+</quote>symbol or a
      <quote>-</quote>symbol. If it's a
      <quote>+</quote>, you're saying that you want to allow this disposition
      and MIME type to qualify. If it's a
      <quote>-</quote>, you're saying that this disposition and MIME type is an
      exception to previous
      <quote>+</quote>rules. There are examples below of how this is
      useful.</para>
      <para>
      <emphasis>mime-type</emphasis> is the MIME type of the attachment you want
      the command to affect. A MIME type is always of the format
      <literal>major/minor</literal>, where
      <literal>major</literal> describes the broad category of document you're
      looking at, and
      <literal>minor</literal> describes the specific type within that category.
      The major part of mime-type must be literal text (or the special token
      <quote>
        <literal>*</literal>
      </quote>), but the minor part may be a regular expression. (Therefore,
      <quote>
        <literal>*/.*</literal>
      </quote>matches any MIME type.)</para>
      <para>The MIME types you give to the
      <command>attachments</command> directive are a kind of pattern. When you
      use the
      <command>attachments</command> directive, the patterns you specify are
      added to a list. When you use
      <command>unattachments</command>, the pattern is removed from the list.
      The patterns are not expanded and matched to specific MIME types at this
      time — they're just text in a list. They're only matched when actually
      evaluating a message.</para>
      <para>Some examples might help to illustrate. The examples that are not
      commented out define the default configuration of the lists.</para>
      <example id="ex-attach-count">
        <title>Attachment counting</title>
        <screen>
<emphasis role="comment">
# Removing a pattern from a list removes that pattern literally. It
# does not remove any type matching the pattern.

#
#  attachments   +A */.*
#  attachments   +A image/jpeg
#  unattachments +A */.*
#
# This leaves "attached" image/jpeg files on the allowed attachments
# list. It does not remove all items, as you might expect, because the
# second */.* is not a matching expression at this time.

#
# Remember: "unattachments" only undoes what "attachments" has done!

# It does not trigger any matching on actual messages.

# Qualify any MIME part with an "attachment" disposition, EXCEPT for
# text/x-vcard and application/pgp parts. (PGP parts are already known
# to mutt, and can be searched for with ~g, ~G, and ~k.)
#
# I've added x-pkcs7 to this, since it functions (for S/MIME)
# analogously to PGP signature attachments. S/MIME isn't supported
# in a stock mutt build, but we can still treat it specially here.

#
</emphasis>
attachments   +A */.*
attachments   -A text/x-vcard application/pgp.*
attachments   -A application/x-pkcs7-.*
<emphasis role="comment">
# Discount all MIME parts with an "inline" disposition, unless they're
# text/plain. (Why inline a text/plain part unless it's external to the
# message flow?)
</emphasis>
attachments   +I text/plain
<emphasis role="comment">
# These two lines make Mutt qualify MIME containers.  (So, for example,
# a message/rfc822 forward will count as an attachment.)  The first
# line is unnecessary if you already have "attach-allow */.*", of
# course.  These are off by default!  The MIME elements contained
# within a message/* or multipart/* are still examined, even if the
# containers themselves don't qualify.

#attachments  +A message/.* multipart/.*
#attachments  +I message/.* multipart/.*
</emphasis>
<emphasis role="comment">## You probably don't really care to know about deleted attachments.</emphasis>
attachments   -A message/external-body
attachments   -I message/external-body
</screen>
      </example>
      <para>Entering the command
      <quote>
      <command>attachments</command>?</quote>as a command will list your
      current settings in Muttrc format, so that it can be pasted
      elsewhere.</para>
    </sect1>

    <sect1 id="mime-lookup">
      <title>MIME Lookup</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>mime_lookup</command>
        <arg choice="plain">
          <replaceable>mimetype</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>mimetype</replaceable>
        </arg>
        <command>unmime_lookup</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>mimetype</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>Mutt's
      <command>mime_lookup</command> list specifies a list of MIME types that
      should
      <emphasis>not</emphasis> be treated according to their mailcap entry. This
      option is designed to deal with binary types such as
      <literal>application/octet-stream</literal>. When an attachment's MIME
      type is listed in
      <command>mime_lookup</command>, then the extension of the filename will
      be compared to the list of extensions in the
      <literal>mime.types</literal> file. The MIME type associated with this
      extension will then be used to process the attachment according to the
      rules in the mailcap file and according to any other configuration
      options (such as
      <command>auto_view</command>) specified. Common usage would be:</para>
      <screen>mime_lookup application/octet-stream application/X-Lotus-Manuscript</screen>
      <para>In addition, the
      <literal>unmime_lookup</literal> command may be used to disable this
      feature for any particular MIME type if it had been set, for example, in
      a global
      <literal>.muttrc</literal>.</para>
    </sect1>
  </chapter>

  <chapter id="guide/optionalfeatures">
    <title>Optional Features</title>

    <sect1 id="optionalfeatures-notes">
      <title>General Notes</title>

      <sect2 id="compile-time-features">
        <title>Enabling/Disabling Features</title>
        <para>Mutt supports several of optional features which can be enabled
        or disabled at compile-time by giving the
        <emphasis>configure</emphasis> script certain arguments. These are
        listed in the
        <quote>Optional features</quote> section of the
        <emphasis>configure --help</emphasis> output.</para>
        <para>Which features are enabled or disabled can later be determined
        from the output of
        <literal>mutt -v</literal>. If a compile option starts with
        <quote>+</quote>it is enabled and disabled if prefixed with
        <quote>-</quote>. For example, if Mutt was compiled using GnuTLS for
        encrypted communication instead of OpenSSL,
        <literal>mutt -v</literal> would contain:</para>
        <screen>-openssl +gnutls</screen>
      </sect2>

      <sect2 id="url-syntax">
        <title>URL Syntax</title>
        <para>Mutt optionally supports the IMAP, POP3 and SMTP protocols which
        require to access servers using URLs. The canonical syntax for
        specifying URLs in Mutt is (an item enclosed in
        <literal>[]</literal>means it is optional and may be omitted):</para>
        <screen>proto[s]://[username[:password]@]server[:port][/path]</screen>
        <para>
        <emphasis>proto</emphasis> is the communication protocol:
        <literal>imap</literal> for IMAP,
        <literal>pop</literal> for POP3 and
        <literal>smtp</literal> for SMTP. If
        <quote>s</quote> for
        <quote>secure communication</quote> is appended, Mutt will attempt to
        establish an encrypted communication using SSL or TLS.</para>
        <para>Since all protocols supported by Mutt support/require
        authentication, login credentials may be specified in the URL. This has
        the advantage that multiple IMAP, POP3 or SMTP servers may be specified
        (which isn't possible using, for example,
        <link linkend="imap-user">$imap_user</link>). The username may contain
        the
        <quote>@</quote>symbol being used by many mail systems as part of the
        login name. The special characters
        <quote>/</quote>(
        <literal>%2F</literal>),
        <quote>:</quote>(
        <literal>%3A</literal>) and
        <quote>%</quote>(
        <literal>%25</literal>) have to be URL-encoded in usernames using the
        <literal>%</literal>-notation.</para>
        <para>A password can be given, too but is not recommended if the URL is
        specified in a configuration file on disk.</para>
        <para>If no port number is given, Mutt will use the system's default
        for the given protocol (usually consulting
        <literal>/etc/services</literal>).</para>
        <para>The optional path is only relevant for IMAP and ignored
        elsewhere.</para>
        <example id="ex-url">
          <title>URLs</title>
          <screen>
pops://host/
imaps://user@host/INBOX/Sent
smtp://user@host:587/
</screen>
        </example>
      </sect2>
    </sect1>

    <sect1 id="ssl">
      <title>SSL/TLS Support</title>
      <para>If Mutt is compiled with IMAP, POP3 and/or SMTP support, it can
      also be compiled with support for SSL or TLS using either OpenSSL or
      GnuTLS ( by running the
      <emphasis>configure</emphasis> script with the
      <emphasis>--enable-ssl=...</emphasis>option for OpenSSL or
      <emphasis>--enable-gnutls=...</emphasis>for GnuTLS). Mutt can then
      attempt to encrypt communication with remote servers if these protocols
      are suffixed with
      <quote>s</quote> for
      <quote>secure communication</quote>.</para>
    </sect1>

    <sect1 id="pop">
      <title>POP3 Support</title>
      <para>Mutt has POP3 support and has the ability to work with mailboxes
      located on a remote POP3 server and fetch mail for local
      browsing.</para>
      <para>Remote POP3 servers can be accessed using URLs with the
      <literal>pop</literal> protocol for unencrypted and
      <literal>pops</literal> for encrypted communication, see
      <xref linkend="url-syntax" />for details.</para>
      <para>Polling for new mail is more expensive over POP3 than locally. For
      this reason the frequency at which Mutt will check for mail remotely can
      be controlled by the
      <link linkend="pop-checkinterval">$pop_checkinterval</link> variable,
      which defaults to every 60 seconds.</para>
      <para>POP is read-only which doesn't allow for some features like editing
      messages or changing flags. However, using
      <xref linkend="header-caching" />and
      <xref linkend="body-caching" />Mutt simulates the new/old/read flags as
      well as flagged and replied. Mutt applies some logic on top of remote
      messages but cannot change them so that modifications of flags are lost
      when messages are downloaded from the POP server (either by Mutt or other
      tools).</para>
      <anchor id="fetch-mail" />
      <para>Another way to access your POP3 mail is the
      <literal>&lt;fetch-mail&gt;</literal>function (default: G). It allows to
      connect to
      <link linkend="pop-host">$pop_host</link>, fetch all your new mail and
      place it in the local
      <link linkend="spoolfile">$spoolfile</link>. After this point, Mutt runs
      exactly as if the mail had always been local.</para>
      <note>
        <para>If you only need to fetch all messages to a local mailbox you
        should consider using a specialized program, such as
        <literal>fetchmail(1)</literal>,
        <literal>getmail(1)</literal>or similar.</para>
      </note>
    </sect1>

    <sect1 id="imap">
      <title>IMAP Support</title>
      <para>Mutt has IMAP support and has the ability to work with folders
      located on a remote IMAP server.</para>
      <para>You can access the remote inbox by selecting the folder by its URL
      (see
      <xref linkend="url-syntax" />for details) using the
      <literal>imap</literal> or
      <literal>imaps</literal> protocol. Alternatively, a pine-compatible
      notation is also supported, i.e.
      <literal>
      {[username@]imapserver[:port][/ssl]}path/to/folder</literal></para>
      <para>Note that not all servers use
      <quote>/</quote>as the hierarchy separator. Mutt should correctly notice
      which separator is being used by the server and convert paths
      accordingly.</para>
      <para>When browsing folders on an IMAP server, you can toggle whether to
      look at only the folders you are subscribed to, or all folders with the
      <emphasis>toggle-subscribed</emphasis> command. See also the
      <link linkend="imap-list-subscribed">
      $imap_list_subscribed</link> variable.</para>
      <para>Polling for new mail on an IMAP server can cause noticeable delays.
      So, you'll want to carefully tune the
      <link linkend="mail-check">$mail_check</link> and
      <link linkend="feature/timeout">$timeout</link> variables. Reasonable values
      are:</para>
      <screen>
set mail_check=90
set timeout=15
</screen>
      <para>with relatively good results even over slow modem lines.</para>
      <note>
        <para>Note that if you are using mbox as the mail store on UW servers
        prior to v12.250, the server has been reported to disconnect a client
        if another client selects the same folder.</para>
      </note>

      <sect2 id="imap-browser">
        <title>The IMAP Folder Browser</title>
        <para>As of version 1.2, Mutt supports browsing mailboxes on an IMAP
        server. This is mostly the same as the local file browser, with the
        following differences:</para>
        <itemizedlist>
          <listitem>
            <para>In lieu of file permissions, Mutt displays the string
            <quote>IMAP</quote>, possibly followed by the symbol
            <quote>+</quote>, indicating that the entry contains both messages
            and subfolders. On Cyrus-like servers folders will often contain
            both messages and subfolders.</para>
          </listitem>
          <listitem>
            <para>For the case where an entry can contain both messages and
            subfolders, the selection key (bound to
            <literal>enter</literal> by default) will choose to descend into the
            subfolder view. If you wish to view the messages in that folder,
            you must use
            <literal>view-file</literal> instead (bound to
            <literal>space</literal> by default).</para>
          </listitem>
          <listitem>
            <para>You can create, delete and rename mailboxes with the
            <literal>&lt;create-mailbox&gt;</literal>,
            <literal>&lt;delete-mailbox&gt;</literal>, and
            <literal>&lt;rename-mailbox&gt;</literal>commands (default
            bindings:
            <literal>C</literal>,
            <literal>d</literal> and
            <literal>r</literal>, respectively). You may also
            <literal>&lt;subscribe&gt;</literal>and
            <literal>&lt;unsubscribe&gt;</literal>to mailboxes (normally these
            are bound to
            <literal>s</literal> and
            <literal>u</literal>, respectively).</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="imap-authentication">
        <title>Authentication</title>
        <para>Mutt supports four authentication methods with IMAP servers:
        SASL, GSSAPI, CRAM-MD5, and LOGIN. There is also support for
        the pseudo-protocol ANONYMOUS, which allows you to log in to a public
        IMAP server without having an account. To use ANONYMOUS, simply make
        your username blank or
        <quote>anonymous</quote>.</para>
        <para>SASL is a special super-authenticator, which selects among
        several protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and
        DIGEST-MD5) the most secure method available on your host and the
        server. Using some of these methods (including DIGEST-MD5 and possibly
        GSSAPI), your entire session will be encrypted and invisible to those
        teeming network snoops. It is the best option if you have it. To use
        it, you must have the Cyrus SASL library installed on your system and
        compile Mutt with the
        <emphasis>--with-sasl</emphasis> flag.</para>
        <para>Mutt will try whichever methods are compiled in and available on
        the server, in the following order: SASL, ANONYMOUS, GSSAPI, CRAM-MD5,
        LOGIN.</para>
        <para>There are a few variables which control authentication:</para>
        <itemizedlist>
          <listitem>
            <para>
            <link linkend="imap-user">$imap_user</link>- controls the username
            under which you request authentication on the IMAP server, for all
            authenticators. This is overridden by an explicit username in the
            mailbox path (i.e. by using a mailbox name of the form
            <literal>{user@host}</literal>).</para>
          </listitem>
          <listitem>
            <para>
            <link linkend="imap-pass">$imap_pass</link>- a password which you
            may preset, used by all authentication methods where a password is
            needed.</para>
          </listitem>
          <listitem>
            <para>
            <link linkend="imap-authenticators">$imap_authenticators</link>- a
            colon-delimited list of IMAP authentication methods to try, in the
            order you wish to try them. If specified, this overrides Mutt's
            default (attempt everything, in the order listed above).</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="smtp">
      <title>SMTP Support</title>
      <para>Besides supporting traditional mail delivery through a
      sendmail-compatible program, Mutt supports delivery through SMTP.</para>
      <para>If the configuration variable
      <link linkend="smtp-url">$smtp_url</link> is set, Mutt will contact the
      given SMTP server to deliver messages; if it is unset, Mutt will use the
      program specified by
      <link linkend="sendmail">$sendmail</link>.</para>
      <para>For details on the URL syntax, please see
      <xref linkend="url-syntax" />.</para>
      <para>The built-in SMTP support supports encryption (the
      <literal>smtps</literal> protocol using SSL or TLS) as well as SMTP
      authentication using SASL. The authentication mechanisms for SASL are
      specified in
      <link linkend="smtp-authenticators">$smtp_authenticators</link> defaulting
      to an empty list which makes Mutt try all available methods from
      most-secure to least-secure.</para>
    </sect1>

    <sect1 id="account-hook">
      <title>Managing Multiple Accounts</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>account-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">regexp</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>If you happen to have accounts on multiple IMAP, POP and/or SMTP
      servers, you may find managing all the authentication settings
      inconvenient and error-prone. The
      <link linkend="account-hook">
        <command>account-hook</command>
      </link>command may help. This hook works like
      <link linkend="folder-hook">
        <command>folder-hook</command>
      </link>but is invoked whenever Mutt needs to access a remote mailbox
      (including inside the folder browser), not just when you open the
      mailbox. This includes (for example) polling for new mail, storing Fcc
      messages and saving messages to a folder. As a consequence,
      <link linkend="account-hook">
        <command>account-hook</command>
      </link>should only be used to set connection-related settings such as
      passwords or tunnel commands but not settings such as sender address or
      name (because in general it should be considered unpredictable which
      <link linkend="account-hook">
        <command>account-hook</command>
      </link>was last used).</para>
      <para>Some examples:</para>
      <screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>
      <para>To manage multiple accounts with, for example, different values of
      <link linkend="record">$record</link> or sender addresses,
      <link linkend="folder-hook">
        <command>folder-hook</command>
      </link>has to be be used together with the
      <link linkend="mailboxes">
        <command>mailboxes</command>
      </link>command.</para>
      <example id="ex-multiaccount">
        <title>Managing multiple accounts</title>
        <screen>
mailboxes imap://user@host1/INBOX
folder-hook imap://user@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'
mailboxes imap://user@host2/INBOX
folder-hook imap://user@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'
</screen>
      </example>
      <para>In example
      <xref linkend="ex-multiaccount" />the folders are defined using
      <link linkend="mailboxes">
        <command>mailboxes</command>
      </link>so Mutt polls them for new mail. Each
      <link linkend="folder-hook">
        <command>folder-hook</command>
      </link>triggers when one mailbox below each IMAP account is opened and
      sets
      <link linkend="folder">$folder</link> to the account's root folder. Next,
      it sets
      <link linkend="record">$record</link> to the
      <emphasis>INBOX/Sent</emphasis> folder below the newly set
      <link linkend="folder">$folder</link>. Please notice that the value the
      <quote>+</quote>
      <link linkend="shortcuts">mailbox shortcut</link> refers to depends on the
      <emphasis>current</emphasis> value of
      <link linkend="folder">$folder</link> and therefore has to be set
      separately per account. Setting other values like
      <link linkend="from">$from</link> or
      <link linkend="signature">$signature</link> is analogous to setting
      <link linkend="record">$record</link>.</para>
    </sect1>

    <sect1 id="caching">
      <title>Local Caching</title>
      <para>Mutt contains two types of local caching:
      <emphasis>(1)</emphasis>the so-called
      <quote>header caching</quote> and
      <emphasis>(2)</emphasis>the so-called
      <quote>body caching</quote> which are both described in this
      section.</para>
      <para>Header caching is optional as it depends on external libraries,
      body caching is always enabled if Mutt is compiled with POP and/or IMAP
      support as these use it (body caching requires no external
      library).</para>

      <sect2 id="header-caching">
        <title>Header Caching</title>
        <para>Mutt provides optional support for caching message headers for
        the following types of folders: IMAP, POP, Maildir and MH. Header
        caching greatly speeds up opening large folders because for remote
        folders, headers usually only need to be downloaded once. For Maildir
        and MH, reading the headers from a single file is much faster than
        looking at possibly thousands of single files (since Maildir and MH use
        one file per message.)</para>
        <para>Header caching can be enabled by configuring one of the database
        backends.  One of tokyocabinet, kyotocabinet, qdbm, gdbm, lmdb or
        bdb.</para>
        <para>If enabled,
        <link linkend="header-cache">$header_cache</link> can be used to either
        point to a file or a directory. If set to point to a file, one database
        file for all folders will be used (which may result in lower
        performance), but one file per folder if it points to a
        directory.</para>
        <para>Additionally,
        <link linkend="header-cache-backend">$header_cache_backend</link> can be
        used to specify which backend to use. The list of available backends
        can be specified at configure time with a set of --with-&lt;backend&gt;
        options. Currently, the following backends are supported: tokyocabinet,
        kyotocabinet, qdbm, gdbm, bdb, lmdb.</para>
      </sect2>

      <sect2 id="body-caching">
        <title>Body Caching</title>
        <para>Both cache methods can be combined using the same directory for
        storage (and for IMAP/POP even provide meaningful file names) which
        simplifies manual maintenance tasks.</para>
        <para>In addition to caching message headers only, Mutt can also cache
        whole message bodies. This results in faster display of messages for
        POP and IMAP folders because messages usually have to be downloaded
        only once.</para>
        <para>For configuration, the variable
        <link linkend="message-cachedir">$message_cachedir</link> must point to
        a directory. There, Mutt will create a hierarchy of subdirectories
        named like the account and mailbox path the cache is for.</para>
      </sect2>

      <sect2 id="cache-dirs">
        <title>Cache Directories</title>
        <para>For using both, header and body caching,
        <link linkend="header-cache">$header_cache</link> and
        <link linkend="message-cachedir">$message_cachedir</link> can be safely
        set to the same value.</para>
        <para>In a header or body cache directory, Mutt creates a directory
        hierarchy named like:
        <literal>proto:user@hostname</literal> where
        <literal>proto</literal> is either
        <quote>pop</quote> or
        <quote>imap.</quote>Within there, for each folder, Mutt stores messages
        in single files and header caches in files with the
        <quote>.hcache</quote> extension. All files can be removed as needed if
        the consumed disk space becomes an issue as Mutt will silently fetch
        missing items again. Pathnames are always stored in UTF-8
        encoding.</para>
        <para>For Maildir and MH, the header cache files are named after the
        MD5 checksum of the path.</para>
      </sect2>

      <sect2 id="maint-cache">
        <title>Maintenance</title>
        <para>Mutt does not (yet) support maintenance features for header cache
        database files so that files have to be removed in case they grow too
        big. It depends on the database library used for header caching whether
        disk space freed by removing messages is re-used.</para>
        <para>For body caches, Mutt can keep the local cache in sync with the
        remote mailbox if the
        <link linkend="message-cache-clean">$message_cache_clean</link> variable
        is set. Cleaning means to remove messages from the cache which are no
        longer present in the mailbox which only happens when other mail
        clients or instances of Mutt using a different body cache location
        delete messages (Mutt itself removes deleted messages from the cache
        when syncing a mailbox). As cleaning can take a noticeable amount of
        time, it should not be set in general but only occasionally.</para>
      </sect2>
    </sect1>

    <sect1 id="sending-mixmaster">
      <title>Sending Anonymous Messages via Mixmaster</title>
      <para>You may also have compiled Mutt to co-operate with Mixmaster, an
      anonymous remailer. Mixmaster permits you to send your messages
      anonymously using a chain of remailers. Mixmaster support in Mutt is for
      mixmaster version 2.04 or later.</para>
      <para>To use it, you'll have to obey certain restrictions. Most
      important, you cannot use the
      <literal>Cc</literal> and
      <literal>Bcc</literal> headers. To tell Mutt to use mixmaster, you have to
      select a remailer chain, using the mix function on the compose
      menu.</para>
      <para>The chain selection screen is divided into two parts. In the
      (larger) upper part, you get a list of remailers you may use. In the
      lower part, you see the currently selected chain of remailers.</para>
      <para>You can navigate in the chain using the
      <literal>&lt;chain-prev&gt;</literal>and
      <literal>&lt;chain-next&gt;</literal>functions, which are by default
      bound to the left and right arrows and to the
      <literal>h</literal> and
      <literal>l</literal> keys (think vi keyboard bindings). To insert a
      remailer at the current chain position, use the
      <literal>&lt;insert&gt;</literal>function. To append a remailer behind
      the current chain position, use
      <literal>&lt;select-entry&gt;</literal>or
      <literal>&lt;append&gt;</literal>. You can also delete entries from the
      chain, using the corresponding function. Finally, to abandon your
      changes, leave the menu, or
      <literal>&lt;accept&gt;</literal>them pressing (by default) the
      <literal>Return</literal> key.</para>
      <para>Note that different remailers do have different capabilities,
      indicated in the %c entry of the remailer menu lines (see
      <link linkend="mix-entry-format">$mix_entry_format</link>). Most
      important is the
      <quote>middleman</quote> capability, indicated by a capital
      <quote>M</quote>: This means that the remailer in question cannot be used
      as the final element of a chain, but will only forward messages to other
      mixmaster remailers. For details on the other capabilities, please have a
      look at the mixmaster documentation.</para>
    </sect1>
  </chapter>

  <chapter id="feature/attach-headers-color">
    <title>Attach Headers Color Feature</title>
    <subtitle>Color attachment headers using regexp, just like mail
    bodies</subtitle>

    <sect1 id="attach-headers-color-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="attach-headers-color-intro">
      <title>Introduction</title>
      <para>This feature allows specifying regexps to color attachment
      headers just like the mail body would. The headers are the parts
      colored by the
      <literal>attachment</literal> color. Coloring them is useful to
      highlight the results of GPGME's signature checks or simply the
      mimetype or size of the attachment. Only the part matched by the regexp
      is colored.</para>
    </sect1>

    <sect1 id="attach-headers-color-usage">
      <title>Usage</title>
      <para>The
      <literal>attach_headers</literal> color should be used just like the
      <literal>body</literal> color.</para>
      <screen>color attach_headers foreground background pattern</screen>
    </sect1>

    <sect1 id="attach-headers-color-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the attach-headers-color feature.

# Color if the attachment is autoviewed</emphasis>
color   attach_headers     brightgreen     default        "Autoview"
<emphasis role="comment"># Color only the brackets around the headers</emphasis>
color   attach_headers     brightyellow    default        "^\\[--"
color   attach_headers     brightyellow    default        "--]$"
<emphasis role="comment"># Color the mime type and the size</emphasis>
color   attach_headers     green           default        "Type: [a-z]+/[a-z0-9\-]+"
color   attach_headers     green           default        "Size: [0-9\.]+[KM]"
<emphasis role="comment"># Color GPGME signature checks</emphasis>
color   attach_headers     brightgreen     default        "Good signature from.*"
color   attach_headers     brightred       default        "Bad signature from.*"
color   attach_headers     brightred       default        "BAD signature from.*"
color   attach_headers     brightred       default        "Note: This key has expired!"
color   attach_headers     brightmagenta   default        "Problem signature from.*"
color   attach_headers     brightmagenta   default        "WARNING: This key is not certified with a trusted signature!"
color   attach_headers     brightmagenta   default        "         There is no indication that the signature belongs to the owner."
color   attach_headers     brightmagenta   default        "can't handle these multiple signatures"
color   attach_headers     brightmagenta   default        "signature verification suppressed"
color   attach_headers     brightmagenta   default        "invalid node with packet of type"

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="attach-headers-color-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="color">Color command</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="regexp">Regular Expressions</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="attach-headers-color-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="attach-headers-color-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Guillaume Brogi
          <email>gui-gui@netcourrier.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/compose-to-sender">
    <title>Compose to Sender Feature</title>
    <subtitle>Send new mail to the sender of the current mail</subtitle>

    <sect1 id="compose-to-sender-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-10-02</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="compose-to-sender-intro">
      <title>Introduction</title>
      <para>The compose-to-sender feature adds a new command to start composing
      a new email to the sender of the current message. This is not a reply,
      but a new, separate, message.</para>
      <para>It works on tagged messages too, sending one email to all of the
      senders of the tagged messages.</para>
    </sect1>

    <sect1 id="compose-to-sender-functions">
      <title>Functions</title>
      <para>compose-to-sender adds the following function to Mutt. By
      default, it is not bound to a key.</para>

      <table id="table-compose-to-sender-functions">
        <title>compose-to-sender Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;compose-to-sender&gt;</literal>
              </entry>
              <entry>compose a new email to the sender of the current
              email</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="compose-to-sender-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the compose-to-sender feature.

# --------------------------------------------------------------------------
# FUNCTIONS - shown with an example mapping
# --------------------------------------------------------------------------
# Compose a new email (not a reply) to the sender</emphasis>
bind index,pager @ compose-to-sender

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="compose-to-sender-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="compose-to-sender-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Brian Medley</para>
        </listitem>
        <listitem>
          <para>Guillaume Brogi
          <email>gui-gui@netcourrier.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/compress">
    <title>Compressed Folders Feature</title>
    <subtitle>Read from/write to compressed mailboxes</subtitle>

    <sect1 id="compress-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-05-30</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="compress-intro">
      <title>Introduction</title>
      <para>The Compressed Folder feature allows Mutt to read mailbox files
      that are compressed. But it isn't limited to compressed files. It works
      well with encrypted files, too. In fact, if you can create a
      program/script to convert to and from your format, then Mutt can read
      it.</para>
      <para>The feature adds three hooks to Mutt:
      <literal>open-hook</literal>,
      <literal>close-hook</literal> and
      <literal>append-hook</literal>. They define commands to: uncompress a
      file; compress a file; append messages to an already compressed
      file.</para>
      <para>There are some examples of both compressed and encrypted files,
      later. For now, the documentation will just concentrate on compressed
      files.</para>
    </sect1>

    <sect1 id="compress-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>open-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">shell-command</replaceable>
        </arg>
        <command>close-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">shell-command</replaceable>
        </arg>
        <command>append-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">shell-command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>The shell-command must contain two placeholders for filenames:
      <literal>%f</literal> and
      <literal>%t</literal>. These represent
      <quote>from</quote> and
      <quote>to</quote> filenames. These placeholders should be placed inside
      single-quotes to prevent unintended shell expansions.</para>
      <para>If you need the exact string
      <quote>%f</quote> or
      <quote>%t</quote> in your command, simply double up the
      <quote>%</quote>character, e.g.
      <quote>%%f</quote> or
      <quote>%%t</quote>.</para>

      <table id="table-compress-optional">
        <title>Not all Hooks are Required</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry>Open</entry>
              <entry>Close</entry>
              <entry>Append</entry>
              <entry>Effect</entry>
              <entry>Useful if</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Open</entry>
              <entry>-</entry>
              <entry>-</entry>
              <entry>Folder is readonly</entry>
              <entry>The folder is just a backup</entry>
            </row>
            <row>
              <entry>Open</entry>
              <entry>Close</entry>
              <entry>-</entry>
              <entry>Folder is read/write, but the entire folder must be
              written if anything is changed</entry>
              <entry>Your compression format doesn't support
              appending</entry>
            </row>
            <row>
              <entry>Open</entry>
              <entry>Close</entry>
              <entry>Append</entry>
              <entry>Folder is read/write and emails can be efficiently added
              to the end</entry>
              <entry>Your compression format supports appending</entry>
            </row>
            <row>
              <entry>Open</entry>
              <entry>-</entry>
              <entry>Append</entry>
              <entry>Folder is readonly, but can be appended to</entry>
              <entry>You want to store emails, but never change them</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note>
        <para>The command:</para>
        <itemizedlist>
          <listitem>
            <para>should return a non-zero exit status on failure</para>
          </listitem>
          <listitem>
            <para>should not delete any files</para>
          </listitem>
        </itemizedlist>
      </note>

      <sect2 id="open-hook">
        <title>Read from compressed mailbox</title>
        <screen>open-hook regexp shell-command</screen>
        <para>If Mutt is unable to open a file, it then looks for
        <literal>open-hook</literal> that matches the filename.</para>
        <para>If your compression program doesn't have a well-defined
        extension, then you can use
        <literal>.</literal>as the regexp.</para>

        <sect3 id="compress-open-hook-example">
          <title>Example of
          <literal>open-hook</literal></title>
          <screen>open-hook '\.gz$' "gzip --stdout --decompress '%f' &gt; '%t'"</screen>
          <itemizedlist>
            <listitem>
              <para>Mutt finds a file,
              <quote>example.gz</quote>, that it can't read</para>
            </listitem>
            <listitem>
              <para>Mutt has an
              <literal>open-hook</literal> whose regexp matches the filename:
              <literal>\.gz$</literal></para>
            </listitem>
            <listitem>
              <para>Mutt uses the command
              <literal>gzip -cd</literal> to create a temporary file that it
              <emphasis>can</emphasis> read</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>

      <sect2 id="close-hook">
        <title>Write to a compressed mailbox</title>
        <screen>close-hook regexp shell-command</screen>
        <para>When Mutt has finished with a compressed mail folder, it will
        look for a matching
        <literal>close-hook</literal> to recompress the file. This hook is
        <link linkend="table-compress-optional">optional</link>.</para>
        <note>
          <para>If the folder has not been modified, the
          <literal>close-hook</literal> will not be called.</para>
        </note>

        <sect3 id="compress-close-hook-example">
          <title>Example of
          <literal>close-hook</literal></title>
          <screen>close-hook '\.gz$' "gzip --stdout '%t' &gt; '%f'"</screen>
          <itemizedlist>
            <listitem>
              <para>Mutt has finished with a folder,
              <quote>example.gz</quote>, that it opened with
              <literal>open-hook</literal></para>
            </listitem>
            <listitem>
              <para>The folder has been modified</para>
            </listitem>
            <listitem>
              <para>Mutt has a
              <literal>close-hook</literal> whose regexp matches the filename:
              <literal>\.gz$</literal></para>
            </listitem>
            <listitem>
              <para>Mutt uses the command
              <literal>gzip -c</literal> to create a new compressed
              file</para>
            </listitem>
          </itemizedlist>
          <note>
            <para>The
            <literal>close-hook</literal> can also include extra options, e.g.
            compression level:
            <literal>--best</literal></para>
          </note>
        </sect3>
      </sect2>

      <sect2 id="append-hook">
        <title>Append to a compressed mailbox</title>
        <screen>append-hook regexp shell-command</screen>
        <para>When Mutt wants to append an email to a compressed mail folder,
        it will look for a matching
        <literal>append-hook</literal>. This hook is
        <link linkend="table-compress-optional">optional</link>.</para>
        <para>Using the
        <literal>append-hook</literal> will save time, but Mutt won't be able
        to determine the type of the mail folder inside the compressed
        file.</para>
        <para>Mutt will
        <emphasis>assume</emphasis> the type to be that of the
        <literal>$mbox_type</literal> variable. Mutt also uses this type for
        temporary files.</para>
        <para>Mutt will only use the
        <literal>append-hook</literal> for existing files. The
        <literal>close-hook</literal> will be used for empty, or missing
        files.</para>
        <note>
          <para>If your command writes to stdout, it is vital that you use
          <literal>&gt;&gt;</literal>in the
          <quote>append-hook</quote>. If not, data will be lost.</para>
        </note>

        <sect3 id="compress-append-hook-example">
          <title>Example of
          <literal>append-hook</literal></title>
          <screen>append-hook '\.gz$' "gzip --stdout '%t' &gt;&gt; '%f'"</screen>
          <itemizedlist>
            <listitem>
              <para>Mutt wants to append an email to a folder,
              <quote>example.gz</quote>, that it opened with
              <literal>open-hook</literal></para>
            </listitem>
            <listitem>
              <para>Mutt has an
              <literal>append-hook</literal> whose regexp matches the
              filename:
              <literal>\.gz$</literal></para>
            </listitem>
            <listitem>
              <para>Mutt knows the mailbox type from the
              <literal>$mbox</literal> variable</para>
            </listitem>
            <listitem>
              <para>Mutt uses the command
              <literal>gzip -c</literal> to append to an existing compressed
              file</para>
            </listitem>
          </itemizedlist>
          <note>
            <para>The
            <literal>append-hook</literal> can also include extra options,
            e.g. compression level:
            <literal>--best</literal></para>
          </note>
        </sect3>
      </sect2>

      <sect2 id="compress-empty">
        <title>Empty Files</title>
        <para>Mutt assumes that an empty file is not compressed. In this
        situation, unset
        <link linkend="save-empty">$save_empty</link>, so that the compressed
        file will be removed if you delete all of the messages.</para>
      </sect2>

      <sect2 id="compress-security">
        <title>Security</title>
        <para>Encrypted files are decrypted into temporary files which are
        stored in the
        <link linkend="tmpdir">$tmpdir</link> directory. This could be a
        security risk.</para>
      </sect2>
    </sect1>

    <sect1 id="compress-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the compress feature.

# This feature adds three hooks to Mutt which allow it to
# work with compressed, or encrypted, mailboxes.

# The hooks are of the form:
#       open-hook   regexp "shell-command"
#       close-hook  regexp "shell-command"
#       append-hook regexp "shell-command"
# The 'append-hook' is optional.

# Handler for gzip compressed mailboxes</emphasis>
open-hook   '\.gz$' "gzip --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.gz$' "gzip --stdout              '%t' &gt;  '%f'"
append-hook '\.gz$' "gzip --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for bzip2 compressed mailboxes</emphasis>
open-hook   '\.bz2$' "bzip2 --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.bz2$' "bzip2 --stdout              '%t' &gt;  '%f'"
append-hook '\.bz2$' "bzip2 --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for xz compressed mailboxes</emphasis>
open-hook   '\.xz$' "xz --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.xz$' "xz --stdout              '%t' &gt;  '%f'"
append-hook '\.xz$' "xz --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for pgp encrypted mailboxes
# PGP does not support appending to an encrypted file</emphasis>
open-hook   '\.pgp$' "pgp -f &lt; '%f' &gt; '%t'"
close-hook  '\.pgp$' "pgp -fe YourPgpUserIdOrKeyId &lt; '%t' &gt; '%f'"
<emphasis role="comment"># Handler for gpg encrypted mailboxes
# gpg does not support appending to an encrypted file</emphasis>
open-hook   '\.gpg$' "gpg --decrypt &lt; '%f' &gt; '%t'"
close-hook  '\.gpg$' "gpg --encrypt --recipient YourGpgUserIdOrKeyId &lt; '%t' &gt; '%f'"

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="compress-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="compile-time-features">Compile-Time
            Features</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="regexp">Regular Expressions</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="tmpdir">$tmpdir</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="mbox-type">$mbox_type</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="save-empty">$save_empty</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="folder-hook">folder-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="compress-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Roland Rosenfeld
          <email>roland@spinnaker.de</email></para>
        </listitem>
        <listitem>
          <para>Alain Penders
          <email>Alain@Finale-Dev.com</email></para>
        </listitem>
        <listitem>
          <para>Christoph
          <quote>Myon</quote> Berg
          <email>myon@debian.org</email></para>
        </listitem>
        <listitem>
          <para>Evgeni Golov
          <email>evgeni@debian.org</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/cond-date">
    <title>Conditional Dates Feature</title>
    <subtitle>Use rules to choose date format</subtitle>

    <sect1 id="cond-date-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>
              <link linkend="feature/nested-if">nested-if feature</link>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="cond-date-intro">
      <title>Introduction</title>
      <para>The
      <quote>Conditional Dates</quote> feature allows you to construct
      <link linkend="index-format">$index_format</link> expressions based on
      the age of the email.</para>
      <para>Mutt's default
      <literal>$index_format</literal> displays email dates in the form:
      abbreviated-month day-of-month —
      <quote>Jan 14</quote>.</para>
      <para>The format is configurable but only per-mailbox. This feature
      allows you to configure the display depending on the age of the
      email.</para>

      <table id="table-cond-date-scheme">
        <title>Potential Formatting Scheme</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Email Sent</entry>
              <entry>Format</entry>
              <entry>Example</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Today</entry>
              <entry>
                <literal>%H:%M</literal>
              </entry>
              <entry>13:23</entry>
            </row>
            <row>
              <entry>This Month</entry>
              <entry>
                <literal>%a %d</literal>
              </entry>
              <entry>Thu 17</entry>
            </row>
            <row>
              <entry>This Year</entry>
              <entry>
                <literal>%b %d</literal>
              </entry>
              <entry>Dec 10</entry>
            </row>
            <row>
              <entry>Older than 1 Year</entry>
              <entry>
                <literal>%m/%y</literal>
              </entry>
              <entry>06/14</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>For an explanation of the date formatting strings, see
      <literal>strftime(3).</literal></para>
      <para>By carefully picking your formats, the dates can remain
      unambiguous and compact.</para>
      <para>Mutt's conditional format strings have the form: (whitespace
      introduced for clarity)</para>
      <screen>%? TEST ? TRUE &amp; FALSE ?</screen>
      <para>The examples below use the test
      <quote>%[</quote>— the date of the message in the local timezone. They
      will also work with
      <quote>%(</quote>— the local time that the message arrived.</para>
      <para>The date tests are of the form:</para>
      <screen>%[nX? TRUE &amp; FALSE ?</screen>
      <itemizedlist>
        <listitem>
          <para>
          <quote>n</quote> is an optional count (defaults to 1 if
          missing)</para>
        </listitem>
        <listitem>
          <para>
          <quote>X</quote> is the time period</para>
        </listitem>
      </itemizedlist>

      <table id="table-cond-date-format-codes">
        <title>Date Formatting Codes</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Letter</entry>
              <entry>Time Period</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>y</entry>
              <entry>Years</entry>
            </row>
            <row>
              <entry>m</entry>
              <entry>Months</entry>
            </row>
            <row>
              <entry>w</entry>
              <entry>Weeks</entry>
            </row>
            <row>
              <entry>d</entry>
              <entry>Days</entry>
            </row>
            <row>
              <entry>H</entry>
              <entry>Hours</entry>
            </row>
            <row>
              <entry>M</entry>
              <entry>Minutes</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table id="table-cond-date-example-tests">
        <title>Example Date Tests</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Test</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>%[y</literal>
              </entry>
              <entry>This year</entry>
            </row>
            <row>
              <entry>
                <literal>%[1y</literal>
              </entry>
              <entry>This year</entry>
            </row>
            <row>
              <entry>
                <literal>%[6m</literal>
              </entry>
              <entry>In the last 6 months</entry>
            </row>
            <row>
              <entry>
                <literal>%[w</literal>
              </entry>
              <entry>This week</entry>
            </row>
            <row>
              <entry>
                <literal>%[d</literal>
              </entry>
              <entry>Today</entry>
            </row>
            <row>
              <entry>
                <literal>%[4H</literal>
              </entry>
              <entry>In the last 4 hours</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <sect2 id="cond-date-example1">
        <title>Example 1</title>
        <para>We start with a one-condition test.</para>

        <table id="table-cond-date-example1">
          <title>Example 1</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Test</entry>
                <entry>Date Range</entry>
                <entry>Format String</entry>
                <entry>Example</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>%[1m</literal>
                </entry>
                <entry>This month</entry>
                <entry>
                  <literal>%[%b %d]</literal>
                </entry>
                <entry>Dec 10</entry>
              </row>
              <row>
                <entry></entry>
                <entry>Older</entry>
                <entry>
                  <literal>%[%Y-%m-%d]</literal>
                </entry>
                <entry>2015-04-23</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The $index_format string would contain:</para>
        <screen>%?[1m?%[%b %d]&amp;%[%Y-%m-%d]?</screen>
        <para>Reparsed a little, for clarity, you can see the test condition
        and the two format strings.</para>
        <screen>
%?[1m?        &amp;           ?

    %[%b %d] %[%Y-%m-%d]
</screen>
      </sect2>

      <sect2 id="cond-date-example2">
        <title>Example 2</title>
        <para>This example contains three test conditions and four date
        formats.</para>

        <table id="table-cond-date-example2">
          <title>Example 2</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Test</entry>
                <entry>Date Range</entry>
                <entry>Format String</entry>
                <entry>Example</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>%[d</literal>
                </entry>
                <entry>Today</entry>
                <entry>
                  <literal>%[%H:%M ]</literal>
                </entry>
                <entry>12:34</entry>
              </row>
              <row>
                <entry>
                  <literal>%[m</literal>
                </entry>
                <entry>This month</entry>
                <entry>
                  <literal>%[%a %d]</literal>
                </entry>
                <entry>Thu 12</entry>
              </row>
              <row>
                <entry>
                  <literal>%[y</literal>
                </entry>
                <entry>This year</entry>
                <entry>
                  <literal>%[%b %d]</literal>
                </entry>
                <entry>Dec 10</entry>
              </row>
              <row>
                <entry></entry>
                <entry>Older</entry>
                <entry>
                  <literal>%[%m/%y ]</literal>
                </entry>
                <entry>06/15</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The $index_format string would contain:</para>
        <screen>%&lt;[y?%&lt;[m?%&lt;[d?%[%H:%M ]&amp;%[%a %d]&gt;&amp;%[%b %d]&gt;&amp;%[%m/%y ]&gt;</screen>
        <para>Reparsed a little, for clarity, you can see the test conditions
        and the four format strings.</para>
        <screen>
%&lt;[y?                                       &amp;%[%m/%y ]&gt;  Older
    %&lt;[m?                        &amp;%[%b %d]&gt;             This year
        %&lt;[d?         &amp;%[%a %d]&gt;                       This month
              %[%H:%M ]                                 Today
</screen>
        <para>This a another view of the same example, with some whitespace
        for clarity.</para>
        <screen>%&lt;[y? %&lt;[m? %&lt;[d? AAA &amp; BBB &gt; &amp; CCC &gt; &amp; DDD &gt;</screen>
        <literallayout>AAA = %[%H:%M ] BBB = %[%a %d] CCC = %[%b %d] DDD =
        %[%m/%y ]</literallayout>
      </sect2>
    </sect1>

    <sect1 id="cond-date-variables">
      <title>Variables</title>
      <para>The
      <quote>Conditional Dates</quote> feature doesn't have any config of its own.
      It modifies the behavior of the format strings.</para>
    </sect1>

    <sect1 id="cond-date-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the cond-date feature.

#
# The default index_format is:
#       '%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?) %s'
#
# We replace the date field '%{%b %d}', giving:</emphasis>
set index_format='%4C %Z %&lt;[y?%&lt;[m?%&lt;[d?%[%H:%M ]&amp;%[%a %d]&gt;&amp;%[%b %d]&gt;&amp;%[%m/%y ]&gt; %-15.15L (%?l?%4l&amp;%4c?) %s'
<emphasis role="comment"># Test  Date Range  Format String  Example
# --------------------------------------------
# %[d   Today       %[%H:%M ]      12:34
# %[m   This month  %[%a %d]       Thu 12
# %[y   This year   %[%b %d]       Dec 10
# -     Older       %[%m/%y ]      06/15
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="cond-date-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="index-format">$index_format</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/nested-if">nested-if feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>strftime(3)</literal>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="cond-date-known-bugs">
      <title>Known Bugs</title>
      <para>Date parsing doesn't quite do what you expect.
      <quote>1w</quote> doesn't mean the
      <quote>in the last 7 days</quote>, but
      <quote>
      <emphasis>this</emphasis> week</quote>. This doesn't match the normal
      Mutt behavior: for example
      <literal>~d&gt;1w</literal> means emails dated in the last 7
      days.</para>
    </sect1>

    <sect1 id="cond-date-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Aaron Schrab
          <email>aaron@schrab.com</email></para>
        </listitem>
        <listitem>
          <para>Eric Davis
          <email>edavis@insanum.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/encrypt-to-self">
    <title>Encrypt-to-Self Feature</title>
    <subtitle>Save a self-encrypted copy of emails</subtitle>

    <sect1 id="encrypt-to-self-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-07-23</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="encrypt-to-self-intro">
      <title>Introduction</title>
      <para>Once you encrypt an email to someone you cannot read it. This is
      good for security, but bad for record-keeping. If you wanted to keep a
      copy of an encrypted email you could set
      <link linkend="fcc-clear">$fcc_clear</link>.</para>
      <para>A better option is to enable
      <link linkend="smime-self-encrypt">$smime_self_encrypt</link>, then set
      <link linkend="smime-self-encrypt-as">$smime_self_encrypt_as</link> to your
      personal S/MIME key id.</para>
      <screen>
set smime_self_encrypt     = yes
set smime_self_encrypt_as  = bb345e23.0
</screen>
      <para>Or, if you use PGP,
      <link linkend="pgp-self-encrypt">$pgp_self_encrypt</link>, then set
      <link linkend="pgp-self-encrypt-as">$pgp_self_encrypt_as</link> to your personal PGP key
      id.</para>
      <screen>
set pgp_self_encrypt    = yes
set pgp_self_encrypt_as = A4AF18C5582473BD35A1E9CE78BB3D480042198E
</screen>
    </sect1>

    <sect1 id="encrypt-to-self-variables">
      <title>Variables</title>

      <table id="table-encrypt-self-variables">
        <title>encrypt-self Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>smime_self_encrypt</literal>
              </entry>
              <entry>boolean</entry>
              <entry><literal>no</literal></entry>
            </row>
            <row>
              <entry>
                <literal>smime_self_encrypt_as</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>pgp_self_encrypt</literal>
              </entry>
              <entry>boolean</entry>
              <entry><literal>no</literal></entry>
            </row>
            <row>
              <entry>
                <literal>pgp_self_encrypt_as</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="encrypt-to-self-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the encrypt-to-self feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# Save a copy of outgoing email, encrypted to yourself</emphasis>
set smime_self_encrypt = "no"
<emphasis role="comment"># set smime_self_encrypt_as = "SMIME-KEY"

# Save a copy of outgoing email, encrypted to yourself</emphasis>
set pgp_self_encrypt = "no"
<emphasis role="comment">set pgp_self_encrypt_as = "PGP-KEY"

# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="encrypt-to-self-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="encrypt-to-self-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Omen Wild
          <email>omen@mandarb.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
        <listitem>
          <para>Guillaume Brogi
          <email>gui-gui@netcourrier.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/fmemopen">
    <title>Fmemopen Feature</title>
    <subtitle>Replace some temporary files with memory buffers</subtitle>

    <sect1 id="fmemopen-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>
            <literal>open_memstream()</literal>,
            <literal>fmemopen()</literal>from glibc</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>This feature can be enabled by running
      <literal>configure</literal> with the option
      <literal>--enable-fmemopen</literal></para>
    </sect1>

    <sect1 id="fmemopen-intro">
      <title>Introduction</title>
      <para>The
      <quote>fmemopen</quote> feature speeds up some searches.</para>
      <para>This feature changes a few places where Mutt creates temporary
      files. It replaces them with in-memory buffers. This should improve the
      performance when searching the header or body using the
      <link linkend="thorough-search">$thorough_search</link> option.</para>
      <para>There are no user-configurable parts.</para>
      <para>This feature depends on
      <literal>open_memstream()</literal>and
      <literal>fmemopen()</literal>. They are provided by glibc. Without
      them, Mutt will simply create temporary files.</para>
    </sect1>

    <sect1 id="fmemopen-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="compile-time-features">Compile-Time
            Features</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>fmemopen(3)</literal>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="fmemopen-known-bugs">
      <title>Known Bugs</title>
      <para>
        <ulink url="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=834408">
        debian bug 834408</ulink>
      </para>
    </sect1>

    <sect1 id="fmemopen-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Julius Plenz
          <email>plenz@cis.fu-berlin.de</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/forgotten-attachment">
    <title>Forgotten Attachment Feature</title>
    <subtitle>Alert user when (s)he forgets to attach a file to an outgoing
    email.</subtitle>

    <sect1 id="forgotten-attachment-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="forgotten-attachment-intro">
      <title>Introduction</title>
      <para>The <quote>forgotten-attachment</quote> feature provides a new
      setting for Mutt that alerts the user if the message body contains a
      certain keyword but there are no attachments added. This is meant to
      ensure that the user does not forget to attach a file after promising
      to do so in the mail.  The attachment keyword will not be scanned in
      text matched by <link linkend="quote-regexp">$quote_regexp</link>.
      </para>
    </sect1>

    <sect1 id="forgotten-attachment-variables">
      <title>Variables</title>

      <table id="table-forgotten-attachment-variables">
        <title>forgotten-attachment Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>attach_keyword</literal>
              </entry>
              <entry>regular expression</entry>
              <entry>
                <literal>\\&lt;(attach|attached|attachments?)\\&gt;</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>abort_noattach</literal>
              </entry>
              <entry>quadoption</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="forgotten-attachment-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the forgotten-attachment feature.

# The 'forgotten-attachment' feature provides a new setting for Mutt that
# alerts the user if the message body contains a certain regular expression but there are
# no attachments added. This is meant to ensure that the user does not forget
# to attach a file after promising to do so in the mail.

# Ask if the user wishes to abort sending if $attach_keyword is found in the
# body, but no attachments have been added
# It can be set to:
#    "yes"     : always abort
#    "ask-yes" : ask whether to abort
#    "no"      : send the mail</emphasis>
set abort_noattach = no
<emphasis role="comment"># Search for the following regular expression in the body of the email
# English: attach, attached, attachment, attachments</emphasis>
set attach_keyword = "\\&lt;attach(|ed|ments?)\\&gt;"
<emphasis role="comment"># Nederlands:
# set attach_keyword = "\\&lt;(bijvoegen|bijgevoegd|bijlage|bijlagen)\\&gt;"
# Deutsch:
# set attach_keyword = "\\&lt;(anhängen|angehängt|anhang|anhänge|hängt an)\\&gt;"
# Français:
# set attach_keyword = "\\&lt;(attaché|attachés|attache|attachons|joint|jointe|joints|jointes|joins|joignons)\\&gt;"
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="forgotten-attachment-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="attach-menu">The Attachment Menu</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="attachment-map">The Attachment Menu key
            mappings</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="forgotten-attachment-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="forgotten-attachment-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Darshit Shah
          <email>darnir@gmail.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
        <listitem>
          <para>Johannes Weißl
          <email>jargon@molb.org</email></para>
        </listitem>
        <listitem>
          <para>Steven! Ragnarök
          <email>steven@nuclearsandwich.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/global-hooks">
    <title>Global Hooks</title>
    <subtitle>Define actions to run globally within Mutt</subtitle>

    <sect1 id="global-hooks-intro">
      <title>Introduction</title>
      <para>These hooks are called when global events take place in
      Mutt.</para>
      <itemizedlist>
        <title>Run a command...</title>
        <listitem>
          <para>
          <emphasis role="bold">timeout-hook</emphasis>- periodically</para>
        </listitem>
        <listitem>
          <para>
          <emphasis role="bold">startup-hook</emphasis>- when mutt starts up,
          before opening the first mailbox</para>
        </listitem>
        <listitem>
          <para>
          <emphasis role="bold">shutdown-hook</emphasis>- mutt shuts down,
          before closing the last mailbox</para>
        </listitem>
      </itemizedlist>

      <sect2 id="timeout-hook-intro">
        <title>Timeout Hook</title>
        <subtitle>Run a command periodically</subtitle>
        <para>
        <emphasis role="bold">Since:</emphasis>NeoMutt 2016-08-08</para>
        <para>This feature implements a new hook that is called periodically
        when Mutt checks for new mail. This hook is called every
        <literal>$timeout</literal> seconds.</para>
      </sect2>

      <sect2 id="startup-hook-intro">
        <title>Startup Hook</title>
        <subtitle>Run a command when mutt starts up, before opening the first
        mailbox</subtitle>
        <para>
        <emphasis role="bold">Since:</emphasis>NeoMutt 2016-11-25</para>
        <para>This feature implements a new hook that is called when Mutt
        first starts up, but before opening the first mailbox. This is most
        likely to be useful to users of
        <link linkend="feature/notmuch">notmuch</link>.</para>
      </sect2>

      <sect2 id="shutdown-hook">
        <title>Shutdown Hook</title>
        <subtitle>Run a command when mutt shuts down, before closing the last
        mailbox</subtitle>
        <para>
        <emphasis role="bold">Since:</emphasis>NeoMutt 2016-11-25</para>
        <para>This feature implements a hook that is called when Mutt shuts
        down, but before closing the first mailbox. This is most likely to be
        useful to users of
        <link linkend="feature/notmuch">notmuch</link>.</para>
      </sect2>
    </sect1>

    <sect1 id="global-hooks-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>timeout-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">MUTT-COMMAND</replaceable>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>startup-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">MUTT-COMMAND</replaceable>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>shutdown-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">MUTT-COMMAND</replaceable>
        </arg>
      </cmdsynopsis>
    </sect1>

    <sect1 id="global-hooks-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the global hooks feature.

# --------------------------------------------------------------------------
# COMMANDS - shown with an example argument
# --------------------------------------------------------------------------
# After $timeout seconds of inactivity, run this mutt command</emphasis>
timeout-hook 'exec sync-mailbox'
<emphasis role="comment"># When mutt first loads, run this mutt command</emphasis>
startup-hook 'exec sync-mailbox'
<emphasis role="comment"># When mutt quits, run this mutt command</emphasis>
shutdown-hook 'exec sync-mailbox'

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="timeout-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="feature/timeout">$timeout</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="global-hooks-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="global-hooks-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Armin Wolfermann
          <email>armin@wolfermann.org</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
        <listitem>
          <para>Thomas Adam
          <email>thomas@xteddy.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/ifdef">
    <title>Ifdef Feature</title>
    <subtitle>Conditional config options</subtitle>

    <sect1 id="ifdef-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="ifdef-intro">
      <title>Introduction</title>
      <para>The
      <quote>ifdef</quote> feature introduces three new commands to Mutt and
      allow you to share one config file between versions of Mutt that may
      have different features compiled in.</para>
      <screen>
ifdef  symbol config-command [args...]  <emphasis role="comment"># If a symbol is defined</emphasis>
ifndef symbol config-command [args...]  <emphasis role="comment"># If a symbol is not defined</emphasis>
finish                                  <emphasis role="comment"># Finish reading the current file</emphasis>
</screen>
      <para>Here a symbol can be a
      <link linkend="variables">$variable</link>,
      <link linkend="functions">&lt;function&gt;</link>,
      <link linkend="commands">command</link> or compile-time symbol, such as
      <quote>imap</quote>.</para>
      <para>A list of compile-time symbols can be seen in the output of the
      command <screen>mutt -v</screen> (in the <quote>Compile options</quote>
      section).</para>
      <para>
      <literal>finish</literal> is particularly useful when combined with
      <literal>ifndef</literal>. e.g.</para>
      <screen>
<emphasis role="comment"># Sidebar config file</emphasis>
ifndef sidebar finish
</screen>
    </sect1>

    <sect1 id="ifdef-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>ifdef</command>
        <arg choice="plain">
          <replaceable class="parameter">symbol</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">"config-command
          [args]"</replaceable>
        </arg>
        <command>ifndef</command>
        <arg choice="plain">
          <replaceable class="parameter">symbol</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">"config-command
          [args]"</replaceable>
        </arg>
        <command>finish</command>
      </cmdsynopsis>
    </sect1>

    <sect1 id="ifdef-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the ifdef feature.

# This feature introduces three useful commands which allow you to share
# one config file between versions of Mutt that may have different
# features compiled in.

#   ifdef  symbol config-command [args...]
#   ifndef symbol config-command [args...]
#   finish
# The 'ifdef' command tests whether Mutt understands the name of
# a variable, function, command or compile-time symbol.

# If it does, then it executes a config command.

# The 'ifndef' command tests whether a symbol does NOT exist.

# The 'finish' command tells Mutt to stop reading current config file.

# If the 'trash' variable exists, set it.</emphasis>
ifdef trash 'set trash=~/Mail/trash'
<emphasis role="comment"># If the 'tag-pattern' function exists, bind a key to it.</emphasis>
ifdef tag-pattern 'bind index &lt;F6&gt; tag-pattern'
<emphasis role="comment"># If the 'imap-fetch-mail' command exists, read my IMAP config.</emphasis>
ifdef imap-fetch-mail 'source ~/.mutt/imap.rc'
<emphasis role="comment"># If the compile-time symbol 'sidebar' does not exist, then
# stop reading the current config file.</emphasis>
ifndef sidebar finish

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="ifdef-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="ifdef-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Cedric Duval
          <email>cedricduval@free.fr</email></para>
        </listitem>
        <listitem>
          <para>Matteo F. Vescovi
          <email>mfvescovi@gmail.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/index-color">
    <title>Index Color Feature</title>
    <subtitle>Custom rules for theming the email index</subtitle>

    <sect1 id="index-color-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>
              <link linkend="feature/status-color">status-color feature</link>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="index-color-intro">
      <title>Introduction</title>
      <para>The
      <quote>index-color</quote> feature allows you to specify colors for
      individual parts of the email index. e.g. Subject, Author,
      Flags.</para>
      <para>First choose which part of the index you'd like to color. Then,
      if needed, pick a pattern to match.</para>
      <para>Note: The pattern does not have to refer to the object you wish
      to color. e.g.</para>
      <screen>color index_author red default "~smutt"</screen>
      <para>The author appears red when the subject (~s) contains
      <quote>mutt</quote>.</para>
    </sect1>

    <sect1 id="index-color-colors">
      <title>Colors</title>
      <para>All the colors default to
      <literal>default</literal>, i.e. unset.</para>
      <para>The index objects can be themed using the
      <literal>color</literal> command. Some objects require a pattern.</para>
      <screen>
color index-object foreground background
color index-object foreground background pattern
</screen>

      <table id="table-index-color-colors">
        <title>Index Colors</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Object</entry>
              <entry>Pattern</entry>
              <entry>Highlights</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>index</literal>
              </entry>
              <entry>yes</entry>
              <entry>Entire index line</entry>
            </row>
            <row>
              <entry>
                <literal>index_author</literal>
              </entry>
              <entry>yes</entry>
              <entry>Author name, %A %a %F %L %n</entry>
            </row>
            <row>
              <entry>
                <literal>index_collapsed</literal>
              </entry>
              <entry>no</entry>
              <entry>Number of messages in a collapsed thread, %M</entry>
            </row>
            <row>
              <entry>
                <literal>index_date</literal>
              </entry>
              <entry>no</entry>
              <entry>Date field</entry>
            </row>
            <row>
              <entry>
                <literal>index_flags</literal>
              </entry>
              <entry>yes</entry>
              <entry>Message flags, %S %Z</entry>
            </row>
            <row>
              <entry>
                <literal>index_label</literal>
              </entry>
              <entry>no</entry>
              <entry>Message label, %y %Y</entry>
            </row>
            <row>
              <entry>
                <literal>index_number</literal>
              </entry>
              <entry>no</entry>
              <entry>Message number, %C</entry>
            </row>
            <row>
              <entry>
                <literal>index_size</literal>
              </entry>
              <entry>no</entry>
              <entry>Message size, %c %l</entry>
            </row>
            <row>
              <entry>
                <literal>index_subject</literal>
              </entry>
              <entry>yes</entry>
              <entry>Subject, %s</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="index-color-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the index-color feature.

# Entire index line</emphasis>
color index white black '.*'
<emphasis role="comment"># Author name, %A %a %F %L %n
# Give the author column a dark grey background</emphasis>
color index_author default color234 '.*'
<emphasis role="comment"># Highlight a particular from (~f)</emphasis>
color index_author brightyellow color234 '~fRay Charles'
<emphasis role="comment"># Message flags, %S %Z
# Highlight the flags for flagged (~F) emails</emphasis>
color index_flags default red '~F'
<emphasis role="comment"># Subject, %s
# Look for a particular subject (~s)</emphasis>
color index_subject brightcyan default '~s\(closes #[0-9]+\)'
<emphasis role="comment"># Number of messages in a collapsed thread, %M</emphasis>
color index_collapsed default brightblue
<emphasis role="comment"># Date field</emphasis>
color index_date green default
<emphasis role="comment"># Message label, %y %Y</emphasis>
color index_label default brightgreen
<emphasis role="comment"># Message number, %C</emphasis>
color index_number red default
<emphasis role="comment"># Message size, %c %l</emphasis>
color index_size cyan default

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="index-color-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="regexp">Regular Expressions</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="patterns">Patterns</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="index-format">$index_format</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="color">Color command</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/status-color">Status-Color feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/keywords">Keywords feature</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="index-color-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="index-color-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Christian Aichinger
          <email>Greek0@gmx.net</email></para>
        </listitem>
        <listitem>
          <para>Christoph
          <quote>Myon</quote> Berg
          <email>myon@debian.org</email></para>
        </listitem>
        <listitem>
          <para>Elimar Riesebieter
          <email>riesebie@lxtec.de</email></para>
        </listitem>
        <listitem>
          <para>Eric Davis
          <email>edavis@insanum.com</email></para>
        </listitem>
        <listitem>
          <para>Vladimir Marek
          <email>Vladimir.Marek@oracle.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/initials">
    <title>Initials Expando Feature</title>
    <subtitle>Expando for author's initials</subtitle>

    <sect1 id="initials-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="initials-intro">
      <title>Introduction</title>
      <para>The
      <quote>initials</quote> feature adds an expando (%I) for an author's
      initials.</para>
      <para>The index panel displays a list of emails. Its layout is
      controlled by the
      <link linkend="index-format">$index_format</link> variable. Using this
      expando saves space in the index panel. This can be useful if you are
      regularly working with a small set of people.</para>
    </sect1>

    <sect1 id="initials-variables">
      <title>Variables</title>
      <para>This feature has no config of its own. It adds an expando which
      can be used in the
      <link linkend="index-format">$index_format</link> variable.</para>
    </sect1>

    <sect1 id="initials-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the initials feature.

# The 'initials' feature has no config of its own.

# It adds an expando for an author's initials,
# which can be used in the 'index_format' variable.

# The default 'index_format' is:</emphasis>
set index_format='%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?) %s'
<emphasis role="comment"># Where %L represents the author/recipient
# This might look like:
#       1   + Nov 17 David Bowie   Changesbowie    ( 689)
#       2   ! Nov 17 Stevie Nicks  Rumours         ( 555)
#       3   + Nov 16 Jimi Hendrix  Voodoo Child    ( 263)
#       4   + Nov 16 Debbie Harry  Parallel Lines  ( 540)
# Using the %I expando:</emphasis>
set index_format='%4C %Z %{%b %d} %I (%?l?%4l&amp;%4c?) %s'
<emphasis role="comment"># This might look like:
#       1   + Nov 17 DB Changesbowie    ( 689)
#       2   ! Nov 17 SN Rumours         ( 555)
#       3   + Nov 16 JH Voodoo Child    ( 263)
#       4   + Nov 16 DH Parallel Lines  ( 540)
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="initials-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="index-format">$index_format</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/index-color">index-color feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="folder-hook">folder-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="initials-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="initials-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Vsevolod Volkov
          <email>vvv@mutt.org.ua</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/keywords">
    <title>Keywords Feature</title>
    <subtitle>Labels/Tagging for emails</subtitle>

    <sect1 id="keywords-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-05-30</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="keywords-intro">
      <title>Introduction</title>
      <para>Unify label/keyword handling.</para>
      <para>Since x-labels were added to mutt in 2000, a number of other
      approaches to what we now call
      <quote>tagging</quote> have also emerged. One of them was even made
      standard in RFC 2822. This update unifies the handling of all these
      strategies.</para>
      <para>We start by changing mutt's internal keyword storage from a
      single string which may contain whitespace to a list of discrete
      keywords. This has advantages for keyword completion as well as for
      portability among varying "standards" for keyword storage. This may
      represent a significant change for existing mutt users who have set
      x-labels containing spaces, and should be regarded with suspicion. The
      advantages are significant, though.</para>
      <para>Next we allow mutt to parse keywords into this internal list from
      any of the following headers: X-Label (freeform), X-Keywords
      (space-delimited), X-Mozilla-Keys (space-delimited), and Keywords (RFC
      2822, comma-space-delimited). Mutt remembers which headers it sourced
      keywords from, and can rewrite those headers when saving messages for
      compatibility with the mailer of origin.</para>
      <para>(X-Label was specified as freeform text by mutt, its only known
      implementation. X-Labels have been used both as a
      <quote>tagging</quote> device, probably with space delimiting, and as a
      <quote>memo</quote> field, where space-delimited parsing would ruin the
      semantics of the memo. By default mutt will not split X-Labels at all.
      Set $xlabel_delimiter if your needs vary.)</para>
      <para>Finally we add two booleans: $keywords_legacy=true and
      $keywords_standard=FALSE. When $keywords_legacy is true, mutt will
      always save keyword to whatever original header it came from. When
      $keywords_standard=true, mutt will save to the Keywords: header. If
      both are true mutt saves to both; if neither is true, mutt saves only
      to legacy headers to avoid complete loss of keywords.</para>
      <para>Overall this represents convergence path for all competing
      labelling/tagging/keywording systems toward one that is specified by
      RFC.</para>
      <para>You can change or delete the X-Label: field within Mutt using the
      edit-label command. This works for tagged messages, too.</para>
    </sect1>

    <sect1 id="keywords-variables">
      <title>Variables</title>

      <table id="table-keywords-variables">
        <title>Keywords Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>keywords_legacy</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>keywords_standard</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>xlabel_delimiter</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="keywords-functions">
      <title>Functions</title>
      <para>Keywords adds the following function to Mutt. By default, it is
      not bound to a key.</para>

      <table id="table-keywords-funcions">
        <title>Keyword Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;edit-label&gt;</literal>
              </entry>
              <entry>add, change, or delete a message's label</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="keywords-sort">
      <title>Sort</title>

      <table id="table-keywords-sort">
        <title>Keywords Sort</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Sort</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>label</literal>
              </entry>
              <entry>Sort by label</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="keywords-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the keywords feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# Should Mutt save the keywords to whatever keyword it came from?</emphasis>
set keywords_legacy = yes
<emphasis role="comment"># Should Mutt use the "Keywords:" header?</emphasis>
set keywords_standard = no
<emphasis role="comment"># How should the keywords be separated?</emphasis>
set xlabel_delimiter = ""
<emphasis role="comment"># --------------------------------------------------------------------------
# FUNCTIONS - shown with an example mapping
# --------------------------------------------------------------------------
# Bind 'y' to edit labels/keywords</emphasis>
bind index,pager y edit-label

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="keywords-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="index-format">$index_format</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/index-color">index-color feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="folder-hook">folder-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="keywords-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="keywords-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>David Champion
          <email>dgc@uchicago.edu</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/kyoto-cabinet">
    <title>Kyoto Cabinet Feature</title>
    <subtitle>Kyoto Cabinet backend for the header cache</subtitle>

    <sect1 id="kyoto-cabinet-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-10-02</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>
              <ulink url="http://fallabs.com/kyotocabinet/">Kyoto Cabinet
              libraries</ulink>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>To check if Mutt supports Kyoto Cabinet, look for
      <itemizedlist>
        <listitem>
          <para>
          <quote>kyoto</quote> in the mutt version.</para>
        </listitem>
        <listitem>
          <para>
          <quote>+hcache</quote> in the compile options</para>
        </listitem>
        <listitem>
          <para>
          <quote>hcache backend: kyotocabinet</quote> in the mutt
          version</para>
        </listitem>
      </itemizedlist></para>
    </sect1>

    <sect1 id="kyoto-cabinet-intro">
      <title>Introduction</title>
      <para>This feature adds support for using Kyoto Cabinet, the successor
      to Tokyo Cabinet, as a storage backend for Mutt's header cache
      (hcache). It is enabled at configure time with the
      <emphasis>--with-kyotocabinet=&lt;path&gt;</emphasis>switch.</para>
    </sect1>

    <sect1 id="kyoto-cabinet-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="caching">Local Caching</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="http://fallabs.com/kyotocabinet/">Kyoto
            Cabinet</ulink>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="kyoto-cabinet-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="kyoto-cabinet-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Clemens Lang
          <email>neverpanic@gmail.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/limit-current-thread">
    <title>Limit Current Thread Feature</title>
    <subtitle>Focus on one Email Thread</subtitle>

    <sect1 id="limit-current-thread-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-28</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="limit-current-thread-intro">
      <title>Introduction</title>
      <para>This feature adds a new way of using the
      <link linkend="tuning-search">Limit Command</link>. The
      <literal>&lt;limit-current-thread&gt;</literal>function restricts the
      view to just the current thread. Setting the limit (the
      <literal>l</literal> key) to
      <quote>all</quote> will restore the full email list.</para>
    </sect1>

    <sect1 id="limit-current-thread-functions">
      <title>Functions</title>
      <para>Limit-current-thread adds the following function to Mutt. By
      default, it is not bound to a key.</para>

      <table id="table-limit-current-thread-functions">
        <title>Limit-Current-Thread Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index</entry>
              <entry>
                <literal>&lt;limit-current-thread&gt;</literal>
              </entry>
              <entry>Limit view to current thread</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="limit-current-thread-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the limit-current-thread feature.

# Limit view to current thread</emphasis>
bind index &lt;esc&gt;L limit-current-thread

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="limit-current-thread-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="limit-current-thread-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>David Sterba
          <email>dsterba@suse.cz</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/lmdb">
    <title>LMDB Feature</title>
    <subtitle>LMDB backend for the header cache</subtitle>

    <sect1 id="lmdb-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-07-23</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="lmdb-intro">
      <title>Introduction</title>
      <para>This feature adds support for using LMDB as a storage backend for
      Mutt's header cache (hcache). It is enabled at configure time with the
      <emphasis>--with-lmdb=&lt;path&gt;</emphasis>switch.</para>
      <note>
        <para>It is not recommended to store the lmdb database on a shared
        drive.</para>
      </note>
    </sect1>

    <sect1 id="lmdb-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="caching">Local Caching</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="lmdb-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="lmdb-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Pietro Cerutti
          <email>gahr@gahr.ch</email></para>
        </listitem>
        <listitem>
          <para>Jan-Piet Mens
          <email>jp@mens.de</email></para>
        </listitem>
        <listitem>
          <para>Clemens Lang
          <email>neverpanic@gmail.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/multiple-fcc">
    <title>Multiple FCC Feature</title>
    <subtitle>Save multiple copies of outgoing mail</subtitle>

    <sect1 id="multiple-fcc-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-08-08</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="multiple-fcc-intro">
      <title>Introduction</title>
      <para>This feature allows the user to save outgoing emails in multiple
      folders.</para>
      <para>Folders should be listed separated by commas,
      <emphasis role="bold">but no spaces</emphasis>.</para>
      <para>The
      <quote>fcc</quote> field of an email can be set in two ways:</para>
      <itemizedlist>
        <listitem>
          <para>The &lt;edit-fcc&gt; command in the compose menu (default
          key:
          <quote>f</quote>)</para>
        </listitem>
        <listitem>
          <para>Creating a
          <literal>fcc-hook</literal> in your
          <literal>.muttrc</literal></para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="multiple-fcc-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="record">$record</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="fcc-hook">fcc-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="multiple-fcc-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="multiple-fcc-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Omen Wild
          <email>omen@mandarb.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/nested-if">
    <title>Nested If Feature</title>
    <subtitle>Allow complex nested conditions in format strings</subtitle>

    <sect1 id="nested-if-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="nested-if-intro">
      <title>Introduction</title>
      <para>Mutt's format strings can contain embedded if-then-else
      conditions. They are of the form:</para>
      <screen>%?VAR?TRUE&amp;FALSE?</screen>
      <para>If the variable
      <quote>VAR</quote> has a value greater than zero, print the
      <quote>TRUE</quote> string, otherwise print the
      <quote>FALSE</quote> string.</para>
      <para>e.g.
      <literal>%?S?Size: %S&amp;Empty?</literal></para>
      <para>Which can be read as:</para>
      <literallayout>if (%S &gt; 0) { print "Size: %S" } else { print "Empty" }</literallayout>
      <para>These conditions are useful, but in Mutt they cannot be nested
      within one another. This feature uses the notation
      <literal>%&lt;VAR?TRUE&amp;FALSE&gt;</literal>and allows them to be
      nested.</para>
      <para>The
      <literal>%&lt;...&gt;</literal>notation was used to format the current
      local time. but that's not really very useful since mutt has no means
      of refreshing the screen periodically.</para>
      <para>A simple nested condition might be: (Some whitespace has been
      introduced for clarity)</para>
      <screen>
%&lt;x? %&lt;y? XY &amp; X &gt; &amp; %&lt;y? Y &amp; NONE &gt; &gt;  Conditions
    %&lt;y? XY &amp; X &gt;                      x&gt;0
        XY                            x&gt;0,y&gt;0
              X                        x&gt;0,y=0
</screen>
      <screen>
%&lt;x? %&lt;y? XY &amp; X &gt; &amp; %&lt;y? Y &amp; NONE &gt; &gt;  Conditions
                    %&lt;y? Y &amp; NONE &gt;    x=0
                        Y             x=0,y&gt;0
                            NONE      x=0,y=0
</screen>
      <para>Equivalent to:</para>
      <literallayout>if (x &gt; 0) {
if (y &gt; 0) {
  print 'XY'
} else {
  print 'X'
}
} else {
if (y &gt; 0) {
  print 'Y'
} else {
  print 'NONE'
}
}</literallayout>
      <para>Examples:</para>
      <screen>set index_format='%4C %Z %{%b %d} %-25.25n %s%&gt; %&lt;M?%M Msgs &amp;%&lt;l?%l Lines&amp;%c Bytes&gt;&gt;'</screen>
      <literallayout>if a thread is folded display the number of messages (%M)
else if we know how many lines in the message display lines in message (%l)
else display the size of the message in bytes (%c)</literallayout>
      <screen>set index_format='%4C %Z %{%b %d} %-25.25n %&lt;M?[%M] %s&amp;%s%* %&lt;l?%l&amp;%c&gt;&gt;'</screen>
      <literallayout>if a thread is folded display the number of messages (%M) and the subject (%s)
else if we know how many lines are in the message display subject (%s) and the lines in message (%l)
else display the subject (%s) and the size of the message in bytes (%c)</literallayout>

      <note>
        <para>If you wish to use angle brackets <literal>&lt; &gt;</literal>
        in a nested condition, then it's necessary to escape them, e.g.</para>
        <screen>set index_format='%&lt;M?\&lt;%M\&gt;&amp;%s&gt;'</screen>
      </note>

    </sect1>

    <sect1 id="nested-if-variables">
      <title>Variables</title>
      <para>The
      <quote>nested-if</quote> feature doesn't have any config of its own. It
      modifies the behavior of the format strings.</para>
    </sect1>

    <sect1 id="nested-if-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the nested-if feature.

# This feature uses the format: '%&lt;VAR?TRUE&amp;FALSE&gt;' for conditional
# format strings that can be nested.

# Example 1
# if a thread is folded
#       display the number of messages (%M)
# else if we know how many lines in the message
#       display lines in message (%l)
# else display the size of the message in bytes (%c)</emphasis>
set index_format='%4C %Z %{%b %d} %-25.25n %s%&gt; %&lt;M?%M Msgs &amp;%&lt;l?%l Lines&amp;%c Bytes&gt;&gt;'
<emphasis role="comment"># Example 2
# if a thread is folded
#       display the number of messages (%M)
#       display the subject (%s)
# else if we know how many lines in the message
#       display lines in message (%l)
# else
#       display the size of the message in bytes (%c)</emphasis>
set index_format='%4C %Z %{%b %d} %-25.25n %&lt;M?[%M] %s&amp;%s%* %&lt;l?%l&amp;%c&gt;&gt;'

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="nested-if-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="feature/cond-date">cond-date feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="index-format">$index_format</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="status-format">$status_format</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="nested-if-known-bugs">
      <title>Known Bugs</title>
      <para>This feature is hard to understand</para>
    </sect1>

    <sect1 id="nested-if-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>David Champion
          <email>dgc@uchicago.edu</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/new-mail">
    <title>New Mail Feature</title>
    <subtitle>Execute a command upon the receipt of new mail.</subtitle>

    <sect1 id="new-mail-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-07-23</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="new-mail-intro">
      <title>Introduction</title>
      <para>This feature enables the new_mail_command setting, which can be
      used to execute a custom script (e.g., a notification handler) upon
      receiving a new mail.</para>
      <para>The command string can contain expandos, such as
      <literal>%n</literal> for the number of new messages. For a complete list, see:
      <link linkend="status-format">$status_format</link>.</para>
      <note>
      <para>When the notification is sent, the folder of the new mail is no longer known.
        This is a limitation of Mutt.  The `%f` expando will show the open folder.</para>
      </note>
      <para>For example in Linux you can use (most distributions already
      provide notify-send):</para>
      <screen>set new_mail_command="notify-send --icon='/home/santiago/Pictures/mutt.png' 'New Email' '%n new messages, %u unread.' &amp;"</screen>
      <para>And in OS X you will need to install a command line interface for
      Notification Center, for example
      <ulink url="https://github.com/julienXX/terminal-notifier">
      terminal-notifier</ulink>:</para>
      <screen>set new_mail_command="terminal-notifier -title '%v' -subtitle 'New Mail' -message '%n new messages, %u unread.' -activate 'com.apple.Terminal'"</screen>
    </sect1>

    <sect1 id="new-mail-variables">
      <title>Variables</title>

      <table id="table-new-mail-variables">
        <title>New Mail Command Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>new_mail_command</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="new-mail-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the new-mail feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# Set the command you want mutt to execute upon the receipt of a new email</emphasis>
set new_mail_command = ""
<emphasis role="comment"># Linux example:
# set new_command="notify-send --icon='/home/santiago/Pictures/mutt.png' 'New Email in %f' '%n new messages, %u unread.' &amp;"
# OS X example:
# set new_mail_command="terminal-notifier -title '%v' -subtitle 'New Mail in %f' -message '%n new messages, %u unread.' -activate 'com.apple.Terminal'"
# --------------------------------------------------------------------------
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="new-mail-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="folder-hook">folder-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="new-mail-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="new-mail-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Yoshiki Vazquez-Baeza
          <email>yoshiki@ucsd.edu</email></para>
        </listitem>
        <listitem>
          <para>Santiago Torres-Arias
          <email>santiago@nyu.edu</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/nntp">
    <title>NNTP Feature</title>
    <subtitle>Talk to a Usenet news server</subtitle>

    <sect1 id="nntp-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-05-30</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="nntp-intro">
      <title>Introduction</title>
      <para>Reading news via NNTP</para>
      <para>Mutt can read from a news server using NNTP.</para>
      <para>The default news server can be obtained from the
      <literal>$NNTPSERVER</literal> environment variable or from the
      <literal>/etc/nntpserver</literal> file. Like in other news readers,
      information about the subscribed newsgroups is saved in the file
      specified by the
      <link linkend="newsrc">$newsrc</link> variable. You can open a newsgroup
      with the function
      <literal>&lt;change-newsgroup&gt;</literal></para>
      <para>The variable
      <link linkend="news-cache-dir">$news_cache_dir</link> can be used to
      point to a directory. Mutt will create a hierarchy of subdirectories
      named like the account and newsgroup the cache is for. The hierarchy is
      also used to store header cache if Mutt was compiled with
      <link linkend="header-caching">header cache</link> support.</para>
    </sect1>

    <sect1 id="nntp-variables">
      <title>Variables</title>

      <table id="table-nntp-variables">
        <title>NNTP Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>ask_follow_up</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>ask_x_comment_to</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>catchup_newsgroup</literal>
              </entry>
              <entry>quad</entry>
              <entry>
                <literal>ask-yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>followup_to_poster</literal>
              </entry>
              <entry>quad</entry>
              <entry>
                <literal>ask-yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>group_index_format</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>%4C %M%N %5s %-45.45f %d</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>inews</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>mime_subject</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>newsgroups_charset</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>utf-8</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>newsrc</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>~/.newsrc</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>news_cache_dir</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>~/.mutt</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>news_server</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nntp_authenticators</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nntp_context</literal>
              </entry>
              <entry>number</entry>
              <entry>
                <literal>1000</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nntp_listgroup</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nntp_load_description</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nntp_pass</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nntp_poll</literal>
              </entry>
              <entry>number</entry>
              <entry>
                <literal>60</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nntp_user</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>post_moderated</literal>
              </entry>
              <entry>quad</entry>
              <entry>
                <literal>ask-yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>save_unsubscribed</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>show_new_news</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>yes</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>show_only_unread</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>x_comment_to</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="nntp-functions">
      <title>Functions</title>
      <para>NNTP adds the following functions to Mutt. By default, none of
      them are bound to keys.</para>

      <table id="table-nntp-functions">
        <title>NNTP Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>browser,index</entry>
              <entry>
                <literal>&lt;catchup&gt;</literal>
              </entry>
              <entry>mark all articles in newsgroup as read</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;change-newsgroup&gt;</literal>
              </entry>
              <entry>open a different newsgroup</entry>
            </row>
            <row>
              <entry>compose</entry>
              <entry>
                <literal>&lt;edit-followup-to&gt;</literal>
              </entry>
              <entry>edit the Followup-To field</entry>
            </row>
            <row>
              <entry>compose</entry>
              <entry>
                <literal>&lt;edit-newsgroups&gt;</literal>
              </entry>
              <entry>edit the newsgroups list</entry>
            </row>
            <row>
              <entry>compose</entry>
              <entry>
                <literal>&lt;edit-x-comment-to&gt;</literal>
              </entry>
              <entry>edit the X-Comment-To field</entry>
            </row>
            <row>
              <entry>attach,index,pager</entry>
              <entry>
                <literal>&lt;followup-message&gt;</literal>
              </entry>
              <entry>followup to newsgroup</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;post-message&gt;</literal>
              </entry>
              <entry>post message to newsgroup</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;reload-active&gt;</literal>
              </entry>
              <entry>load list of all newsgroups from NNTP server</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;subscribe&gt;</literal>
              </entry>
              <entry>subscribe to current mbox (IMAP/NNTP only)</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;subscribe-pattern&gt;</literal>
              </entry>
              <entry>subscribe to newsgroups matching a pattern</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;uncatchup&gt;</literal>
              </entry>
              <entry>mark all articles in newsgroup as unread</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;unsubscribe&gt;</literal>
              </entry>
              <entry>unsubscribe from current mbox (IMAP/NNTP only)</entry>
            </row>
            <row>
              <entry>browser</entry>
              <entry>
                <literal>&lt;unsubscribe-pattern&gt;</literal>
              </entry>
              <entry>unsubscribe from newsgroups matching a pattern</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;change-newsgroup-readonly&gt;</literal>
              </entry>
              <entry>open a different newsgroup in read only mode</entry>
            </row>
            <row>
              <entry>attach,index,pager</entry>
              <entry>
                <literal>&lt;forward-to-group&gt;</literal>
              </entry>
              <entry>forward to newsgroup</entry>
            </row>
            <row>
              <entry>index</entry>
              <entry>
                <literal>&lt;get-children&gt;</literal>
              </entry>
              <entry>get all children of the current message</entry>
            </row>
            <row>
              <entry>index</entry>
              <entry>
                <literal>&lt;get-parent&gt;</literal>
              </entry>
              <entry>get parent of the current message</entry>
            </row>
            <row>
              <entry>index</entry>
              <entry>
                <literal>&lt;reconstruct-thread&gt;</literal>
              </entry>
              <entry>reconstruct thread containing current message</entry>
            </row>
            <row>
              <entry>index</entry>
              <entry>
                <literal>&lt;get-message&gt;</literal>
              </entry>
              <entry>get message with Message-Id</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="nntp-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the nntp feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------</emphasis>
set ask_follow_up = no
set ask_x_comment_to = no
set catchup_newsgroup = ask-yes
set followup_to_poster = ask-yes
set group_index_format = '%4C %M%N %5s  %-45.45f %d'
set inews = ''
set mime_subject = yes
set newsgroups_charset = utf-8
set newsrc = '~/.newsrc'
set news_cache_dir = '~/.mutt'
set news_server = ''
set nntp_authenticators = ''
set nntp_context = 1000
set nntp_listgroup = yes
set nntp_load_description = yes
set nntp_pass = ''
set nntp_poll = 60
set nntp_user = ''
set post_moderated = ask-yes
set save_unsubscribed = no
set show_new_news = yes
set show_only_unread = no
set x_comment_to = no
<emphasis role="comment"># --------------------------------------------------------------------------
# FUNCTIONS - shown with an example mapping
# --------------------------------------------------------------------------
# mark all articles in newsgroup as read</emphasis>
bind browser,index y catchup
<emphasis role="comment"># open a different newsgroup</emphasis>
bind index,pager i change-newsgroup
<emphasis role="comment"># edit the Followup-To field</emphasis>
bind compose o edit-followup-to
<emphasis role="comment"># edit the newsgroups list</emphasis>
bind compose N edit-newsgroups
<emphasis role="comment"># edit the X-Comment-To field</emphasis>
bind compose x edit-x-comment-to
<emphasis role="comment"># followup to newsgroup</emphasis>
bind attach,index,pager F followup-message
<emphasis role="comment"># post message to newsgroup</emphasis>
bind index,pager P post-message
<emphasis role="comment"># load list of all newsgroups from NNTP server</emphasis>
bind browser g reload-active
<emphasis role="comment"># subscribe to current mbox (IMAP/NNTP only)</emphasis>
bind browser s subscribe
<emphasis role="comment"># subscribe to newsgroups matching a pattern</emphasis>
bind browser S subscribe-pattern
<emphasis role="comment"># mark all articles in newsgroup as unread</emphasis>
bind browser Y uncatchup
<emphasis role="comment"># unsubscribe from current mbox (IMAP/NNTP only)</emphasis>
bind browser u unsubscribe
<emphasis role="comment"># unsubscribe from newsgroups matching a pattern</emphasis>
bind browser U unsubscribe-pattern
<emphasis role="comment"># open a different newsgroup in read only mode</emphasis>
bind index,pager \ei change-newsgroup-readonly
<emphasis role="comment"># forward to newsgroup</emphasis>
bind attach,index,pager \eF forward-to-group
<emphasis role="comment"># get all children of the current message
# bind index ??? get-children
# get parent of the current message</emphasis>
bind index \eG get-parent
<emphasis role="comment"># reconstruct thread containing current message
# bind index ??? reconstruct-thread
# get message with Message-Id</emphasis>
bind index \CG get-message
<emphasis role="comment"># --------------------------------------------------------------------------
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="nntp-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="compile-time-features">Compile-Time
            Features</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="nntp-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="nntp-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Vsevolod Volkov
          <email>vvv@mutt.org.ua</email></para>
        </listitem>
        <listitem>
          <para>Felix von Leitner
          <email>leitner@fefe.de</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/notmuch">
    <title>Notmuch Feature</title>
    <subtitle>Email search engine</subtitle>

    <sect1 id="notmuch-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-17</para>
      <para>
        <emphasis role="bold">Dependencies:</emphasis>
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="feature/quasi-delete">quasi-delete feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/index-color">index-color feature</link>
          </para>
        </listitem>
        <listitem>
          <para>Notmuch libraries</para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="notmuch-intro">
      <title>Introduction</title>
      <para>Notmuch is an email fulltext indexing and tagging engine.</para>
      <itemizedlist>
        <listitem>
          <para>For more information, see:
          <ulink url="https://notmuchmail.org/">
          https://notmuchmail.org/</ulink></para>
        </listitem>
        <listitem>
          <para>More examples:
          <ulink url="https://notmuchmail.org/mutttips/">
          https://notmuchmail.org/mutttips/</ulink></para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="notmuch-using">
      <title>Using NotMuch</title>

      <sect2 id="notmuch-folder-uri">
        <title>Folders URI</title>
        <para>
          <emphasis role="bold">
          notmuch://[&lt;path&gt;][?&lt;item&gt;=&lt;name&gt;[&amp;
          ...]]</emphasis>
        </para>
        <para>The &lt;path&gt; is an absolute path to the directory where the
        notmuch database is found as returned by
        <quote>notmuch config get database.path</quote> command. Note that the
        &lt;path&gt; should NOT include
        <literal>.notmuch</literal> directory name.</para>
        <para>If the "&lt;path&gt;" is not defined then
        <literal>$nm_default_uri</literal> or
        <literal>$folder</literal> is used, for example:</para>
        <screen>
set nm_default_uri = "notmuch:///home/foo/maildir"
virtual-mailboxes "My INBOX" "notmuch://?query=tag:inbox"
</screen>
      </sect2>

      <sect2 id="notmuch-items">
        <title>Items</title>
        <para>
          <emphasis role="bold">query=&lt;string&gt;</emphasis>
        </para>
        <para>See SEARCH SYNTAX in notmuch man page. Don't forget to use
        operators (
        <quote>and</quote>/
        <quote>or</quote>) in your queries.</para>
        <para>Note that proper URI should not contain blank space and all
        <quote>bad</quote> chars should be encoded, for example</para>
        <para>
        <literal>tag:AAA and tag:BBB</literal>--encoding-&gt;
        <literal>tag:AAA%20and%20tag:BBB</literal></para>
        <para>but mutt config file parser is smart enough to accept space in
        quoted strings. It means that you can use</para>
        <para>
          <literal>notmuch:///foo?query=tag:AAA and tag:BBB</literal>
        </para>
        <para>in your config files to keep things readable.</para>
        <para>For more details about Xapian queries, see:
        <ulink url="https://xapian.org/docs/queryparser.html">
        https://xapian.org/docs/queryparser.html</ulink></para>
        <para>
          <emphasis role="bold">limit=&lt;number&gt;</emphasis>
        </para>
        <para>Restricts number of messages/threads in the result. The default
        limit is nm_db_limit.</para>
        <para>
          <emphasis role="bold">type=&lt;threads|messages&gt;</emphasis>
        </para>
        <para>Reads all matching messages or whole-threads. The default is
        'messages' or nm_query_type.</para>
      </sect2>

      <sect2 id="notmuch-vfolder-format">
        <title>Format String for the NotMuch Browser</title>
        <para>Default:
        <literallayout>
          <literal>%2C %?n?%4n/&amp; ?%4m %f</literal>
        </literallayout></para>
        <para>This variable allows you to customize the browser display to
        your personal taste. This string is similar to
        <link linkend="index-format">$index_format</link>, but has its own
        set of
        <literal>printf(3)</literal>-like sequences:</para>
        <informaltable>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>%C</entry>
                <entry>current file number</entry>
              </row>
              <row>
                <entry>%f</entry>
                <entry>folder name (description)</entry>
              </row>
              <row>
                <entry>%m</entry>
                <entry>number of messages in the mailbox *</entry>
              </row>
              <row>
                <entry>%n</entry>
                <entry>number of unread messages in the mailbox *</entry>
              </row>
              <row>
                <entry>%N</entry>
                <entry>N if mailbox has new mail, blank otherwise</entry>
              </row>
              <row>
                <entry>%&gt;X</entry>
                <entry>right justify the rest of the string and pad with
                character
                <quote>X</quote></entry>
              </row>
              <row>
                <entry>%|X</entry>
                <entry>pad to the end of the line with character
                <quote>X</quote></entry>
              </row>
              <row>
                <entry>%*X</entry>
                <entry>soft-fill with character
                <quote>X</quote> as pad</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>For an explanation of
        <quote>soft-fill</quote>, see the
        <link linkend="index-format">
        $index_format</link> documentation.</para>
        <para>* = can be optionally printed if nonzero</para>
      </sect2>
    </sect1>

    <sect1 id="notmuch-variables">
      <title>Variables</title>

      <table id="table-notmuch-variables">
        <title>Notmuch Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>nm_db_limit</literal>
              </entry>
              <entry>number</entry>
              <entry>
                <literal>0</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nm_default_uri</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nm_exclude_tags</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nm_hidden_tags</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>
                unread,draft,flagged,passed,replied,attachment,signed,encrypted</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nm_open_timeout</literal>
              </entry>
              <entry>number</entry>
              <entry>
                <literal>5</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nm_query_type</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>messages</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nm_record</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>nm_record_tags</literal>
              </entry>
              <entry>string</entry>
              <entry>(empty)</entry>
            </row>
            <row>
              <entry>
                <literal>nm_unread_tag</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>unread</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>vfolder_format</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>%6n(%6N) %f</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>virtual_spoolfile</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="notmuch-functions">
      <title>Functions</title>
      <para>Notmuch adds the following functions to Mutt. By default, none of
      them are bound to keys.</para>

      <table id="table-notmuch-functions">
        <title>Notmuch Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;change-vfolder&gt;</literal>
              </entry>
              <entry>
                switch to another virtual folder, a new folder maybe be
                specified by vfolder description (see virtual-mailboxes) or
                URI. the default is next vfolder with unread messages</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;entire-thread&gt;</literal>
              </entry>
              <entry>read entire thread of the current message</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;modify-labels&gt;</literal>
              </entry>
              <entry>add, remove, or toggle notmuch tags; [+]&lt;tag&gt; to
                add, -&lt;tag&gt; to remove, !&lt;tag&gt; to toggle(notmuch)
                tags. Note: Tab completion of tag names is available</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;modify-labels-then-hide&gt;</literal>
              </entry>
              <entry>add, remove, or toggle notmuch tags; [+]&lt;tag&gt; to
                add, -&lt;tag&gt; to remove, !&lt;tag&gt; to togglelabels and
                then hide or unhide the message by changing the "quasi-deleted"
                to match if it would be shown when requerying.
                Normal redisplay rules apply here, so the user must call
                &lt;sync-mailbox&gt; for the changes to be displayed. Note:
                Tab completion of tag names is available.</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-toggle-virtual&gt;</literal>
              </entry>
              <entry>toggle between mailboxes and virtual mailboxes</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;vfolder-from-query&gt;</literal>
              </entry>
              <entry>
                generate virtual folder from notmuch search query.
                Note: TAB completion of 'tag:' names is available.
              </entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;vfolder-window-forward&gt;</literal>
              </entry>
              <entry>generate virtual folder by moving the query's time
              window forward</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;vfolder-window-backward&gt;</literal>
              </entry>
              <entry>generate virtual folder by moving the query's time
              window backward</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="notmuch-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>virtual-mailboxes</command>
        <arg choice="plain">
          <replaceable class="parameter">description</replaceable>
          <arg choice="plain">
            <replaceable class="parameter">notmuch-URI</replaceable>
          </arg>
        </arg>
        <group choice="req" rep="repeat">
          <arg choice="plain">
            <replaceable class="parameter">description</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">notmuch-URI</replaceable>
            </arg>
          </arg>
        </group>
        <command>unvirtual-mailboxes</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </group>
        <command>tag-transforms</command>
        <arg choice="plain">
          <replaceable class="parameter">tag</replaceable>
          <arg choice="plain">
            <replaceable class="parameter">transformed-string</replaceable>
          </arg>
        </arg>
        <group choice="req" rep="repeat">
          <arg choice="plain">
            <replaceable class="parameter">tag</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">transformed-string</replaceable>
            </arg>
          </arg>
        </group>
        <command>tag-formats</command>
        <arg choice="plain">
          <replaceable class="parameter">tag</replaceable>
          <arg choice="plain">
            <replaceable class="parameter">format-string</replaceable>
          </arg>
        </arg>
        <group choice="req" rep="repeat">
          <arg choice="plain">
            <replaceable class="parameter">tag</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">format-string</replaceable>
            </arg>
          </arg>
        </group>
      </cmdsynopsis>
    </sect1>

    <sect1 id="notmuch-colors">
      <title>Colors</title>
      <para>Adds these to index-color feature:</para>

      <table id="table-notmuch-colors">
        <title>Index Colors</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Object</entry>
              <entry>Pattern</entry>
              <entry>Highlights</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>index_tag</literal>
              </entry>
              <entry>yes</entry>
              <entry>an individual message tag, %G, uses tag name</entry>
            </row>
            <row>
              <entry>
                <literal>index_tags</literal>
              </entry>
              <entry>no</entry>
              <entry>the transformed message tags, %g</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="notmuch-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the notmuch feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# This variable specifies notmuch query limit.</emphasis>
set nm_db_limit = 0
<emphasis role="comment"># This variable specifies the default Notmuch database in format:
# notmuch://&lt;absolute path&gt;</emphasis>
set nm_default_uri = ""
<emphasis role="comment"># The messages tagged with these tags are excluded and not loaded
# from notmuch DB to mutt unless specified explicitly.</emphasis>
set nm_exclude_tags = ""
<emphasis role="comment"># This variable specifies private notmuch tags which should not be printed
# on screen (index, pager).</emphasis>
set nm_hidden_tags = "unread,draft,flagged,passed,replied,attachment,signed,encrypted"
<emphasis role="comment"># This option specifies timeout for Notmuch database. Default is 5 seconds.</emphasis>
set nm_open_timeout = 5
<emphasis role="comment"># This variable specifies notmuch query type, supported types: 'threads' and
# 'messages'.</emphasis>
set nm_query_type = messages
<emphasis role="comment"># Add messages stored to the mutt record (see $record in the mutt docs) also to notmuch DB. If you reply to an email then the new email inherits tags from the original email.
</emphasis>
set nm_record = no
<emphasis role="comment"># Tags that should be removed or added to the to the messages stored in the mutt record.

example:
set record = "~/sent-mails"
set nm_record = yes
set nm_record_tags = "-inbox,archive,me"
</emphasis>
set nm_record_tags = ""
<emphasis role="comment"># This variable specifies notmuch tag which is used for unread messages.</emphasis>
set nm_unread_tag = unread
<emphasis role="comment"># This variable allows you to customize the file browser display for virtual
# folders to your personal taste.
# %C   current folder number
# %f   folder name (description)
# %m   number of messages in the mailbox *
# %n   number of unread messages in the mailbox *
# %N   N if mailbox has new mail, blank otherwise
# %>X  right justify the rest of the string and pad with character ``X''
# %|X  pad to the end of the line with character ``X''
# %*X  soft-fill with character ``X'' as pad
</emphasis>
set vfolder_format = "%6n(%6N) %f"
<emphasis role="comment"># When set, mutt will use the first virtual mailbox (see virtual-mailboxes)
# as a spoolfile.</emphasis>
set virtual_spoolfile = no
<emphasis role="comment"># setup time window preferences
# first setup the duration, and then the time unit of that duration
# when set to 0 (the default) the search window feature is disabled</emphasis>
set nm_query_window_duration=2
set nm_query_window_timebase="week" # or "hour", "day", "week", "month", "year"
<emphasis role="comment"># --------------------------------------------------------------------------
# FUNCTIONS - shown with an example mapping
# --------------------------------------------------------------------------
# open a different virtual folder</emphasis>
bind index,pager X change-vfolder
<emphasis role="comment"># read entire thread of the current message</emphasis>
bind index,pager + entire-thread
<emphasis role="comment"># modify (notmuch) tags</emphasis>
bind index,pager \` modify-labels
<emphasis role="comment"># modify (notmuch) tag non-interactively.</emphasis>
bind index,pager tt "&lt;modify-labels&gt;!todo\n" "Toggle the 'todo' tag"
<emphasis role="comment"># generate virtual folder from query</emphasis>
bind index,pager \eX vfolder-from-query
<emphasis role="comment"># generate virtual folder from query with time window</emphasis>
bind index,pager &lt; vfolder-window-backward
bind index,pager &gt; vfolder-window-forward
<emphasis role="comment"># modify labels and then hide message
# bind index,pager ??? modify-labels-then-hide
# toggle between mailboxes and virtual mailboxes
# bind index,pager ??? sidebar-toggle-virtual
# --------------------------------------------------------------------------
# COMMANDS - shown with an example
# --------------------------------------------------------------------------
# virtual-mailboxes description notmuch-URI { description notmuch-URI ...}
# virtual-mailboxes "Climbing" "notmuch://?query=climbing"
# unvirtual-mailboxes { * | mailbox ...}
# Replace some tags with icons
# tag-transforms tag transformed-string { tag transformed-string ...}
# tag-transforms "inbox"   "i"   \
#                "unread"  "u"   \
#                "replied" "↻ "  \
#                "sent"    "➥ "  \
#                "todo"    "T"   \
#                "deleted" "DEL" \
#                "invites" "CAL"

# The formats must start with 'G' and the entire sequence is case sensitive.
# tag-formats tag format-string { tag format-string ...}
# tag-formats "inbox"   "GI" \
#              "unread"  "GU" \
#              "replied" "GR" \
#              "sent"    "GS" \
#              "todo"    "Gt" \
#              "deleted" "GD" \
#              "invites" "Gi"

# Now instead of using '%g' in your $index_format, which lists all tags
# in a non-deterministic order, you can something like the following which puts
# a transformed tag name in a specific spot on the index line:
# set index_format='%4C %S %[%y.%m.%d] %-18.18n %?GU?%GU&amp; ? %?GR?%GR&amp; ? %?GI?%GI&amp; ? %s'

# The %G formatting sequence may display all tags including tags hidden by
# nm_hidden_tags.
#
# --------------------------------------------------------------------------
# COLORS - some unpleasant examples are given
# --------------------------------------------------------------------------
# These symbols are added to the index-color feature:
# an individual message tag, %G, uses tag name
# this symbol uses a pattern</emphasis>
color index_tag red white "inbox"
<emphasis role="comment"># the transformed message tags, %g
# this symbol does not use a pattern</emphasis>
color index_tags green default
<emphasis role="comment"># --------------------------------------------------------------------------
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="notmuch-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="compile-time-features">Compile-Time
            Features</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="notmuch-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="notmuch-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Karel Zak
          <email>kzak@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Chris Mason
          <email>clm@fb.com</email></para>
        </listitem>
        <listitem>
          <para>Christoph Rissner
          <email>cri@visotech.at</email></para>
        </listitem>
        <listitem>
          <para>David Riebenbauer
          <email>davrieb@liegesta.at</email></para>
        </listitem>
        <listitem>
          <para>David Sterba
          <email>dsterba@suse.cz</email></para>
        </listitem>
        <listitem>
          <para>David Wilson
          <email>dw@botanicus.net</email></para>
        </listitem>
        <listitem>
          <para>Don Zickus
          <email>dzickus@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Eric Davis
          <email>edavis@insanum.com</email></para>
        </listitem>
        <listitem>
          <para>Jan Synacek
          <email>jsynacek@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Jeremiah C. Foster
          <email>jeremiah@jeremiahfoster.com</email></para>
        </listitem>
        <listitem>
          <para>Josh Poimboeuf
          <email>jpoimboe@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Kirill A. Shutemov
          <email>kirill@shutemov.name</email></para>
        </listitem>
        <listitem>
          <para>Luke Macken
          <email>lmacken@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Mantas Mikulėnas
          <email>grawity@gmail.com</email></para>
        </listitem>
        <listitem>
          <para>Patrick Brisbin
          <email>pbrisbin@gmail.com</email></para>
        </listitem>
        <listitem>
          <para>Philippe Le Brouster
          <email>plb@nebkha.net</email></para>
        </listitem>
        <listitem>
          <para>Raghavendra D Prabhu
          <email>rprabhu@wnohang.net</email></para>
        </listitem>
        <listitem>
          <para>Sami Farin
          <email>hvtaifwkbgefbaei@gmail.com</email></para>
        </listitem>
        <listitem>
          <para>Stefan Assmann
          <email>sassmann@kpanic.de</email></para>
        </listitem>
        <listitem>
          <para>Stefan Kuhn
          <email>p_regius@gmx.ch</email></para>
        </listitem>
        <listitem>
          <para>Tim Stoakes
          <email>tim@stoakes.net</email></para>
        </listitem>
        <listitem>
          <para>Vladimir Marek
          <email>Vladimir.Marek@oracle.com</email></para>
        </listitem>
        <listitem>
          <para>Víctor Manuel Jáquez Leal
          <email>vjaquez@igalia.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
        <listitem>
          <para>Bernard 'Guyzmo' Pratz
          <email>guyzmo+github+pub@m0g.net</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/progress">
    <title>Progress Bar Feature</title>
    <subtitle>Show a visual progress bar on slow operations</subtitle>

    <sect1 id="progress-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="progress-intro">
      <title>Introduction</title>
      <para>The
      <quote>progress</quote> feature shows a visual progress bar on slow
      tasks, such as indexing a large folder over the net.</para>
    </sect1>

    <sect1 id="progress-colors">
      <title>Colors</title>

      <table id="table-progress-colors">
        <title>Progress Colors</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Default Color</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>progress</literal>
              </entry>
              <entry>default</entry>
              <entry>Visual progress bar</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="progress-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the progress feature.

# The 'progress' feature provides clear visual feedback for
# slow tasks, such as indexing a large folder over the net.

# Set the color of the progress bar
# White text on a red background</emphasis>
color progress white red

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="progress-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="color">Color command</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="progress-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="progress-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Rocco Rutte
          <email>pdmef@gmx.net</email></para>
        </listitem>
        <listitem>
          <para>Vincent Lefevre
          <email>vincent@vinc17.org</email></para>
        </listitem>
        <listitem>
          <para>Stefan Kuhn
          <email>wuodan@hispeed.ch</email></para>
        </listitem>
        <listitem>
          <para>Karel Zak
          <email>kzak@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/quasi-delete">
    <title>Quasi-Delete Feature</title>
    <subtitle>Mark emails that should be hidden, but not deleted</subtitle>

    <sect1 id="quasi-delete-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="quasi-delete-intro">
      <title>Introduction</title>
      <para>The
      <quote>quasi-delete</quote> function marks an email that should be
      hidden from the index, but NOT deleted.</para>
      <para>On its own, this feature isn't very useful. It forms a useful
      part of the notmuch plugin.</para>
    </sect1>

    <sect1 id="quasi-delete-functions">
      <title>Functions</title>

      <table id="table-quasi-delete-functions">
        <title>Quasi-Delete Functions</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Default Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>(none)</entry>
              <entry>
                <literal>&lt;quasi-delete&gt;</literal>
              </entry>
              <entry>delete from mutt, don't touch on disk</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="quasi-delete-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the quasi-delete feature.

# The 'quasi-delete' function marks an email that should be hidden
# from the index, but NOT deleted.</emphasis>
bind index,pager Q quasi-delete

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="quasi-delete-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="feature/notmuch">notmuch feature</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="quasi-delete-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="quasi-delete-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Karel Zak
          <email>kzak@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/reply-with-xorig">
    <title>Reply With X-Original-To Feature</title>
    <subtitle>Direct reply to email using X-Original-To header</subtitle>

    <sect1 id="reply-with-xorig-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="reply-with-xorig-intro">
      <title>Introduction</title>
      <para>Adds a reply_with_xorig for mutt configuration files. If enabled,
      allows to reply to an email using the email address in the first
      X-Original-To: header of a mail as the From: header of the
      answer.</para>
    </sect1>

    <sect1 id="reply-with-xorig-variables">
      <title>Variables</title>

      <table id="table-reply-with-xorig-variables">
        <title>Reply With X-Original-To Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>reply_with_xorig</literal>
              </entry>
              <entry>Boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="reply-with-xorig-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the reply-with-xorig feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# Use X-Original-To header to reply when reverse is disabled or no alternate
# is found.</emphasis>
set reply_with_xorig = "yes"

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="reply-with-xorig-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Pierre-Elliott Bécue
          <email>becue@crans.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/sensible-browser">
    <title>Sensible Browser Feature</title>
    <subtitle>Make the file browser behave</subtitle>

    <sect1 id="sensible-browser-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="sensible-browser-intro">
      <title>Introduction</title>
      <para>The
      <quote>sensible browser</quote> is a set of small changes to NeoMutt's
      mailbox browser which make the browser behave in a more predictable
      way.</para>
      <para>The behavior is divided into two use cases: Fixed Order; Variable
      Order.</para>

      <sect2 id="sensible-browser-sort-fixed">
        <title>A Fixed Order of Mailboxes</title>
        <para>This is for users who like their mailboxes in a fixed order,
        e.g. alphabetical, or unsorted (in the order of the config
        file).</para>
        <screen>
<emphasis role="comment"># Fixed order</emphasis>
set sort_browser="alpha"
set sort_browser="unsorted"
</screen>
        <para>When you first start the browser, e.g.
        <literal>c?</literal>your current mailbox will be highlighted.</para>
        <para>When you navigate to a parent mailbox (
        <quote>..</quote>) your old mailbox will be highlighted.</para>
        <para>
        <quote>..</quote>will always be listed at the top, however the rest
        of the list is sorted.</para>
      </sect2>

      <sect2 id="sensible-browser-sort-variable">
        <title>A Variable Order of Mailboxes</title>
        <para>This is for users who like their mailboxes sorted by a
        characteristic that changes, e.g. count of new mail, or the size of
        mailbox.</para>
        <screen>
<emphasis role="comment"># Variable order</emphasis>
set sort_browser="reverse-count"
set sort_browser="reverse-size"
</screen>
        <para>When you first start the browser, e.g.
        <literal>c?</literal>the highlight will be on the first mailbox, e.g.
        the one with the most new mail.</para>
        <para>When you navigate to a parent mailbox (
        <quote>..</quote>) your old mailbox will be highlighted.</para>
        <para>
        <quote>..</quote>will always be listed at the top, however the rest
        of the list is sorted.</para>
      </sect2>
    </sect1>

    <sect1 id="sensible-browser-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="folder-format">$folder_format</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="sensible-browser-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="sensible-browser-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Pierre-Elliott Bécue
          <email>becue@crans.org</email></para>
        </listitem>
        <listitem>
          <para>Haakon Riiser
          <email>haakon.riiser@fys.uio.no</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/sidebar">
    <title>Sidebar Feature</title>
    <subtitle>Overview of mailboxes</subtitle>

    <sect1 id="sidebar-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10, Mutt
      1.7.0</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="sidebar-intro">
      <title>Introduction</title>
      <para>The Sidebar shows a list of all your mailboxes. The list can be
      turned on and off, it can be themed and the list style can be
      configured.</para>
      <para>This part of the manual is a reference guide. If you want a
      simple introduction with examples see the
      <link linkend="intro-sidebar">Sidebar Howto</link>. If you just want to
      get started, you could use the sample
      <link linkend="sidebar-muttrc">Sidebar muttrc</link>.</para>
    </sect1>

    <sect1 id="sidebar-variables">
      <title>Variables</title>

      <table id="table-sidebar-variables">
        <title>Sidebar Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>sidebar_delim_chars</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>/.</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_divider_char</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>|</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_folder_indent</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_format</literal>
              </entry>
              <entry>string</entry>
              <entry>
                <literal>%B%* %n</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_indent_string</literal>
              </entry>
              <entry>string</entry>
              <entry>
              <literal>&#160;&#160;</literal>(two spaces)</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_new_mail_only</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_next_new_wrap</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_on_right</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_short_path</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_sort_method</literal>
              </entry>
              <entry>enum</entry>
              <entry>
                <literal>unsorted</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_visible</literal>
              </entry>
              <entry>boolean</entry>
              <entry>
                <literal>no</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_width</literal>
              </entry>
              <entry>number</entry>
              <entry>
                <literal>20</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>For more details, and examples, about the
      <literal>$sidebar_format</literal>, see the
      <link linkend="intro-sidebar-format">Sidebar Intro</link>.</para>
    </sect1>

    <sect1 id="sidebar-functions">
      <title>Functions</title>
      <para>Sidebar adds the following functions to Mutt. By default, none of
      them are bound to keys.</para>

      <table id="table-sidebar-functions">
        <title>Sidebar Functions</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-next&gt;</literal>
              </entry>
              <entry>Move the highlight to next mailbox</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-next-new&gt;</literal>
              </entry>
              <entry>Move the highlight to next mailbox with new mail</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-open&gt;</literal>
              </entry>
              <entry>Open highlighted mailbox</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-page-down&gt;</literal>
              </entry>
              <entry>Scroll the Sidebar down 1 page</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-page-up&gt;</literal>
              </entry>
              <entry>Scroll the Sidebar up 1 page</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-prev&gt;</literal>
              </entry>
              <entry>Move the highlight to previous mailbox</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-prev-new&gt;</literal>
              </entry>
              <entry>Move the highlight to previous mailbox with new
              mail</entry>
            </row>
            <row>
              <entry>index,pager</entry>
              <entry>
                <literal>&lt;sidebar-toggle-visible&gt;</literal>
              </entry>
              <entry>Make the Sidebar (in)visible</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="sidebar-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>sidebar_whitelist
        <anchor id="sidebar-whitelist" /></command>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <command>unsidebar_whitelist
        <anchor id="unsidebar-whitelist" /></command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>This command specifies mailboxes that will always be displayed in
      the sidebar, even if
      <link linkend="sidebar-new-mail-only">$sidebar_new_mail_only</link> is
      set and the mailbox does not contain new mail.</para>
      <para>The
      <quote>unsidebar_whitelist</quote> command is used to remove a mailbox
      from the list of whitelisted mailboxes. Use
      <quote>unsidebar_whitelist *</quote>to remove all mailboxes.</para>
    </sect1>

    <sect1 id="sidebar-colors">
      <title>Colors</title>

      <table id="table-sidebar-colors">
        <title>Sidebar Colors</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Default Color</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>sidebar_divider</literal>
              </entry>
              <entry>default</entry>
              <entry>The dividing line between the Sidebar and the
              Index/Pager panels</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_flagged</literal>
              </entry>
              <entry>default</entry>
              <entry>Mailboxes containing flagged mail</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_highlight</literal>
              </entry>
              <entry>underline</entry>
              <entry>Cursor to select a mailbox</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_indicator</literal>
              </entry>
              <entry>mutt
              <literal>indicator</literal></entry>
              <entry>The mailbox open in the Index panel</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_new</literal>
              </entry>
              <entry>default</entry>
              <entry>Mailboxes containing new mail</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_ordinary</literal>
              </entry>
              <entry>default</entry>
              <entry>Mailboxes that have no new/flagged mails, etc</entry>
            </row>
            <row>
              <entry>
                <literal>sidebar_spoolfile</literal>
              </entry>
              <entry>default</entry>
              <entry>Mailbox that receives incoming mail</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>If the
      <literal>sidebar_indicator</literal> color isn't set, then the default
      Mutt indicator color will be used (the color used in the index
      panel).</para>
    </sect1>

    <sect1 id="sidebar-sort">
      <title>Sort</title>

      <table id="table-sidebar-sort">
        <title>Sidebar Sort</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Sort</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>alpha</literal>
              </entry>
              <entry>Alphabetically by path</entry>
            </row>
            <row>
              <entry>
                <literal>count</literal>
              </entry>
              <entry>Total number of messages</entry>
            </row>
            <row>
              <entry>
                <literal>flagged</literal>
              </entry>
              <entry>Number of flagged messages</entry>
            </row>
            <row>
              <entry>
                <literal>name</literal>
              </entry>
              <entry>Alphabetically by path</entry>
            </row>
            <row>
              <entry>
                <literal>new</literal>
              </entry>
              <entry>Number of unread messages</entry>
            </row>
            <row>
              <entry>
                <literal>path</literal>
              </entry>
              <entry>Alphabetically by path</entry>
            </row>
            <row>
              <entry>
                <literal>unread</literal>
              </entry>
              <entry>Number of unread messages</entry>
            </row>
            <row>
              <entry>
                <literal>unsorted</literal>
              </entry>
              <entry>Order of the
              <literal>mailboxes</literal> command</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="sidebar-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the sidebar feature.

# --------------------------------------------------------------------------
# VARIABLES - shown with their default values
# --------------------------------------------------------------------------
# Should the Sidebar be shown?</emphasis>
set sidebar_visible = no
<emphasis role="comment"># How wide should the Sidebar be in screen columns?

# Note: Some characters, e.g. Chinese, take up two columns each.</emphasis>
set sidebar_width = 20
<emphasis role="comment"># Should the mailbox paths be abbreviated?</emphasis>
set sidebar_short_path = no
<emphasis role="comment"># When abbreviating mailbox path names, use any of these characters as path
# separators.  Only the part after the last separators will be shown.

# For file folders '/' is good.  For IMAP folders, often '.' is useful.</emphasis>
set sidebar_delim_chars = '/.'
<emphasis role="comment"># If the mailbox path is abbreviated, should it be indented?</emphasis>
set sidebar_folder_indent = no
<emphasis role="comment"># Indent mailbox paths with this string.</emphasis>
set sidebar_indent_string = '  '
<emphasis role="comment"># Make the Sidebar only display mailboxes that contain new, or flagged,
# mail.</emphasis>
set sidebar_new_mail_only = no
<emphasis role="comment"># Any mailboxes that are whitelisted will always be visible, even if the
# sidebar_new_mail_only option is enabled.</emphasis>
sidebar_whitelist '/home/user/mailbox1'
sidebar_whitelist '/home/user/mailbox2'
<emphasis role="comment"># When searching for mailboxes containing new mail, should the search wrap
# around when it reaches the end of the list?</emphasis>
set sidebar_next_new_wrap = no
<emphasis role="comment"># Show the Sidebar on the right-hand side of the screen</emphasis>
set sidebar_on_right = no
<emphasis role="comment"># The character to use as the divider between the Sidebar and the other Mutt
# panels.</emphasis>
set sidebar_divider_char = '|'
<emphasis role="comment"># Enable extended buffy mode to calculate total, new, and flagged
# message counts for each mailbox.</emphasis>
set mail_check_stats
<emphasis role="comment"># Display the Sidebar mailboxes using this format string.</emphasis>
set sidebar_format = '%B%?F? [%F]?%* %?N?%N/?%S'
<emphasis role="comment"># Sort the mailboxes in the Sidebar using this method:
#       count    - total number of messages
#       flagged  - number of flagged messages
#       new      - number of new messages
#       path     - mailbox path
#       unsorted - do not sort the mailboxes</emphasis>
set sidebar_sort_method = 'unsorted'
<emphasis role="comment"># --------------------------------------------------------------------------
# FUNCTIONS - shown with an example mapping
# --------------------------------------------------------------------------
# Move the highlight to the previous mailbox</emphasis>
bind index,pager \Cp sidebar-prev
<emphasis role="comment"># Move the highlight to the next mailbox</emphasis>
bind index,pager \Cn sidebar-next
<emphasis role="comment"># Open the highlighted mailbox</emphasis>
bind index,pager \Co sidebar-open
<emphasis role="comment"># Move the highlight to the previous page
# This is useful if you have a LOT of mailboxes.</emphasis>
bind index,pager &lt;F3&gt; sidebar-page-up
<emphasis role="comment"># Move the highlight to the next page
# This is useful if you have a LOT of mailboxes.</emphasis>
bind index,pager &lt;F4&gt; sidebar-page-down
<emphasis role="comment"># Move the highlight to the previous mailbox containing new, or flagged,
# mail.</emphasis>
bind index,pager &lt;F5&gt; sidebar-prev-new
<emphasis role="comment"># Move the highlight to the next mailbox containing new, or flagged, mail.</emphasis>
bind index,pager &lt;F6&gt; sidebar-next-new
<emphasis role="comment"># Toggle the visibility of the Sidebar.</emphasis>
bind index,pager B sidebar-toggle-visible
<emphasis role="comment"># --------------------------------------------------------------------------
# COLORS - some unpleasant examples are given
# --------------------------------------------------------------------------
# Note: All color operations are of the form:
#       color OBJECT FOREGROUND BACKGROUND
# Color of the current, open, mailbox
# Note: This is a general Mutt option which colors all selected items.</emphasis>
color indicator cyan black
<emphasis role="comment"># Color of the highlighted, but not open, mailbox.</emphasis>
color sidebar_highlight black color8
<emphasis role="comment"># Color of the divider separating the Sidebar from Mutt panels</emphasis>
color sidebar_divider color8 black
<emphasis role="comment"># Color to give mailboxes containing flagged mail</emphasis>
color sidebar_flagged red black
<emphasis role="comment"># Color to give mailboxes containing new mail</emphasis>
color sidebar_new green black
<emphasis role="comment"># Color to give mailboxes containing no new/flagged mail, etc</emphasis>
color sidebar_ordinary color245 default
<emphasis role="comment"># --------------------------------------------------------------------------
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="sidebar-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="regexp">Regular Expressions</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="patterns">Patterns</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="color">Color command</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/notmuch">notmuch feature</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="sidebar-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="sidebar-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Justin Hibbits
          <email>jrh29@po.cwru.edu</email></para>
        </listitem>
        <listitem>
          <para>Thomer M. Gil
          <email>mutt@thomer.com</email></para>
        </listitem>
        <listitem>
          <para>David Sterba
          <email>dsterba@suse.cz</email></para>
        </listitem>
        <listitem>
          <para>Evgeni Golov
          <email>evgeni@debian.org</email></para>
        </listitem>
        <listitem>
          <para>Fabian Groffen
          <email>grobian@gentoo.org</email></para>
        </listitem>
        <listitem>
          <para>Jason DeTiberus
          <email>jdetiber@redhat.com</email></para>
        </listitem>
        <listitem>
          <para>Stefan Assmann
          <email>sassmann@kpanic.de</email></para>
        </listitem>
        <listitem>
          <para>Steve Kemp
          <email>steve@steve.org.uk</email></para>
        </listitem>
        <listitem>
          <para>Terry Chan
          <email>tchan@lunar-linux.org</email></para>
        </listitem>
        <listitem>
          <para>Tyler Earnest
          <email>tylere@rne.st</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/skip-quoted">
    <title>Skip Quoted Feature</title>
    <subtitle>Leave some context visible</subtitle>

    <sect1 id="skip-quoted-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-28</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="skip-quoted-intro">
      <title>Introduction</title>
      <para>When viewing an email, the
      <literal>&lt;skip-to-quoted&gt;</literal>function (by default the
      <literal>S</literal> key) will scroll past any email headers or quoted
      text. Sometimes, a little context is useful.</para>
      <para>By setting the
      <literal>$skip_quoted_offset</literal> variable, you can select how much
      of the quoted text is left visible.</para>
    </sect1>

    <sect1 id="skip-quoted-variables">
      <title>Variables</title>

      <table id="table-skip-quoted-variables">
        <title>Skip-Quoted Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>skip_quoted_offset</literal>
              </entry>
              <entry>number</entry>
              <entry>0</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="skip-quoted-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the skip-quoted feature.

# The 'S' (skip-quoted) command scrolls the pager past the quoted text (usually
# indented with '&gt; '.  Setting 'skip_quoted_offset' leaves some lines of quoted
# text on screen for context.

# Show three quoted lines before the reply</emphasis>
set skip_quoted_offset = 3

      <emphasis role="comment"># vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="skip-quoted-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="skip-quoted-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>David Sterba
          <email>dsterba@suse.cz</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/status-color">
    <title>Status Color Feature</title>
    <subtitle>Custom rules for theming the status bar</subtitle>

    <sect1 id="status-color-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <para>
      <emphasis role="bold">Dependencies:</emphasis>None</para>
    </sect1>

    <sect1 id="status-color-intro">
      <title>Introduction</title>
      <para>The
      <quote>status-color</quote> feature allows you to theme different parts
      of the status bar (also when it's used by the index).</para>
      <para>Unlike normal color commands,
      <literal>color status</literal> can now take up to 2 extra parameters
      (regex, num).</para>
    </sect1>

    <sect1 id="status-color-commands">
      <title>Commands</title>
      <cmdsynopsis>
        <command>color</command>
        <arg choice="plain">
          <option>status</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <group choice="opt">
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <group choice="opt">
            <arg choice="plain">
              <replaceable class="parameter">num</replaceable>
            </arg>
          </group>
        </group>
      </cmdsynopsis>
      <para>With zero parameters, Mutt will set the default color for the
      entire status bar.</para>
      <para>With one parameter, Mutt will only color the parts matching the
      regex.</para>
      <para>With two parameters, Mutt will only color the num'th sub-match of
      the regex.</para>
    </sect1>

    <sect1 id="status-color-colors">
      <title>Colors</title>

      <table id="table-status-color-colors">
        <title>Status Colors</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Default Color</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>status</entry>
              <entry>
                <literal>reverse</literal>
              </entry>
              <entry>Status bar</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="status-color-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example NeoMutt config file for the status-color feature.

# The 'status-color' feature allows you to theme different parts of
# the status bar (also when it's used by the index).

# For the examples below, set some defaults</emphasis>
set status_format='-%r-Mutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]---(%s/%S)-%&gt;-(%P)---'
set index_format='%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?) %s'
set sort=threads
set sort_aux=last-date-received
<emphasis role="comment"># 'status color' can take up to 2 extra parameters
# color status foreground background [ regex [ num ]]
# 0 extra parameters
# Set the default color for the entire status line</emphasis>
color status blue white
<emphasis role="comment"># 1 extra parameter
# Set the color for a matching pattern
# color status foreground background regexp
# Highlight New, Deleted, or Flagged emails</emphasis>
color status brightred white '(New|Del|Flag):[0-9]+'
<emphasis role="comment"># Highlight mailbox ordering if it's different from the default
# First, highlight anything (*/*)</emphasis>
color status brightred default '\([^)]+/[^)]+\)'
<emphasis role="comment"># Then override the color for one specific case</emphasis>
color status default   default '\(threads/last-date-received\)'
<emphasis role="comment"># 2 extra parameters
# Set the color for the nth submatch of a pattern
# color status foreground background regexp num
# Highlight the contents of the []s but not the [] themselves</emphasis>
color status red default '\[([^]]+)\]' 1
<emphasis role="comment"># The '1' refers to the first regex submatch, which is the inner
# part in ()s
# Highlight the mailbox</emphasis>
color status brightwhite default 'Mutt: ([^ ]+)' 1
<emphasis role="comment"># Search for 'Mutt: ' but only highlight what comes after it
# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="status-color-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="compile-time-features">Compile-Time
            Features</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="regexp">Regular Expressions</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="patterns">Patterns</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="feature/index-color">index-color feature</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="color">Color command</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="status-color-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="status-color-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>David Sterba
          <email>dsterba@suse.cz</email></para>
        </listitem>
        <listitem>
          <para>Thomas Glanzmann
          <email>thomas@glanzmann.de</email></para>
        </listitem>
        <listitem>
          <para>Kirill A. Shutemov
          <email>kirill@shutemov.name</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/tls-sni">
    <title>TLS-SNI Feature</title>
    <subtitle>Negotiate with a server for a TLS/SSL certificate</subtitle>

    <sect1 id="tls-sni-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-03-07</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>OpenSSL</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="tls-sni-intro">
      <title>Introduction</title>
      <para>The
      <quote>TLS-SNI</quote> feature adds support for TLS virtual hosting. If
      your mail server doesn't support this everything will still work
      normally.</para>
      <para>TLS supports sending the expected server hostname during the
      handshake, via the SNI extension. This can be used to select a server
      certificate to issue to the client, permitting virtual-hosting without
      requiring multiple IP addresses.</para>
      <para>This has been tested against Exim 4.80, which optionally logs SNI
      and can perform vhosting.</para>
      <para>To verify TLS SNI support by a server, you can use:</para>
      <screen>openssl s_client -host &lt;imap server&gt; -port &lt;port&gt; -tls1 -servername &lt;imap server&gt;</screen>
    </sect1>

    <sect1 id="tls-sni-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="tls-sni-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Jeremy Katz
          <email>katzj@linuxpower.org</email></para>
        </listitem>
        <listitem>
          <para>Phil Pennock
          <email>mutt-dev@spodhuis.demon.nl</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="feature/trash">
    <title>Trash Folder Feature</title>
    <subtitle>Automatically move deleted emails to a trash bin</subtitle>

    <sect1 id="trash-folder-support">
      <title>Support</title>
      <para>
      <emphasis role="bold">Since:</emphasis>NeoMutt 2016-09-10, Mutt
      1.7.0</para>
      <variablelist>
        <varlistentry>
          <term>
            <emphasis role="bold">Dependencies:</emphasis>
          </term>
          <listitem>
            <para>If IMAP is enabled, the trash folder will use it
            wisely</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="trash-folder-intro">
      <title>Introduction</title>
      <para>In Mutt, when you
      <quote>delete</quote> an email it is first marked deleted. The email
      isn't really gone until
      <link linkend="index-map">&lt;sync-mailbox&gt;</link>is called. This
      happens when the user leaves the folder, or the function is called
      manually.</para>
      <para>After
      <literal>&lt;sync-mailbox&gt;</literal>has been called the email is
      gone forever.</para>
      <para>The
      <link linkend="feature/trash">$trash</link> variable defines a folder in which
      to keep old emails. As before, first you mark emails for deletion. When
      &lt;sync-mailbox&gt; is called the emails are moved to the trash
      folder.</para>
      <para>The
      <literal>$trash</literal> path can be either a full directory, or be
      relative to the
      <link linkend="folder">$folder</link> variable, like the
      <literal>mailboxes</literal> command.</para>
      <note>
        <para>Emails deleted from the trash folder are gone forever.</para>
      </note>
    </sect1>

    <sect1 id="trash-folder-variables">
      <title>Variables</title>

      <table id="table-trash-variables">
        <title>Trash Variables</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Type</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>trash</entry>
              <entry>string</entry>
              <entry>(none)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="trash-folder-functions">
      <title>Functions</title>

      <table id="table-trash-functions">
        <title>Trash Functions</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Menus</entry>
              <entry>Default Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>index,pager</entry>
              <entry>(none)</entry>
              <entry>
                <literal>&lt;purge-message&gt;</literal>
              </entry>
              <entry>really delete the current entry, bypassing the trash
              folder</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="trash-folder-muttrc">
      <title>Muttrc</title>
      <screen>
<emphasis role="comment"># Example Mutt config file for the 'trash' feature.

# This feature defines a new 'trash' folder.

# When mail is deleted it will be moved to this folder.

# Folder in which to put deleted emails</emphasis>
set trash='+Trash'
set trash='/home/flatcap/Mail/Trash'
<emphasis role="comment"># The default delete key 'd' will move an email to the 'trash' folder
# Bind 'D' to REALLY delete an email</emphasis>
bind index D purge-message
<emphasis role="comment"># Note: Deleting emails from the 'trash' folder will REALLY delete them.

# vim: syntax=muttrc</emphasis>
</screen>
    </sect1>

    <sect1 id="trash-folder-see-also">
      <title>See Also</title>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="folder-hook">folder-hook</link>
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="trash-folder-known-bugs">
      <title>Known Bugs</title>
      <para>None</para>
    </sect1>

    <sect1 id="trash-folder-credits">
      <title>Credits</title>
      <itemizedlist>
        <listitem>
          <para>Cedric Duval
          <email>cedricduval@free.fr</email></para>
        </listitem>
        <listitem>
          <para>Benjamin Kuperman
          <email>kuperman@acm.org</email></para>
        </listitem>
        <listitem>
          <para>Paul Miller
          <email>paul@voltar.org</email></para>
        </listitem>
        <listitem>
          <para>Richard Russon
          <email>rich@flatcap.org</email></para>
        </listitem>
      </itemizedlist>
    </sect1>
  </chapter>

  <chapter id="guide/security">
    <title>Security Considerations</title>
    <para>First of all, Mutt contains no security holes included by intention
    but may contain unknown security holes. As a consequence, please run Mutt
    only with as few permissions as possible. Especially, do not run Mutt as
    the super user.</para>
    <para>When configuring Mutt, there're some points to note about secure
    setups so please read this chapter carefully.</para>

    <sect1 id="security-passwords">
      <title>Passwords</title>
      <para>Although Mutt can be told the various passwords for accounts,
      please never store passwords in configuration files. Besides the fact
      that the system's operator can always read them, you could forget to mask
      it out when reporting a bug or asking for help via a mailing list. Even
      worse, your mail including your password could be archived by internet
      search engines, mail-to-news gateways etc. It may already be too late
      before you notice your mistake.</para>
    </sect1>

    <sect1 id="security-tempfiles">
      <title>Temporary Files</title>
      <para>Mutt uses many temporary files for viewing messages, verifying
      digital signatures, etc. As long as being used, these files are visible
      by other users and maybe even readable in case of misconfiguration. Also,
      a different location for these files may be desired which can be changed
      via the
      <link linkend="tmpdir">$tmpdir</link> variable.</para>
    </sect1>

    <sect1 id="security-leaks">
      <title>Information Leaks</title>

      <sect2 id="security-leaks-mid">
        <title>Message-Id: headers</title>
        <para>Message-Id: headers contain a local part that is to be created in
        a unique fashion. In order to do so, Mutt will
        <quote>leak</quote> some information to the outside world when sending
        messages: the generation of this header includes a step counter which
        is increased (and rotated) with every message sent. In a longer running
        mutt session, others can make assumptions about your mailing habits
        depending on the number of messages sent. If this is not desired, the
        header can be manually provided using
        <link linkend="edit-headers">$edit_headers</link>(though not
        recommended).</para>
      </sect2>

      <sect2 id="security-leaks-mailto">
        <title>
        <literal>mailto:</literal>-style Links</title>
        <para>As Mutt be can be set up to be the mail client to handle
        <literal>mailto:</literal>style links in websites, there're security
        considerations, too. Arbitrary header fields can be embedded in these
        links which could override existing header fields or attach arbitrary
        files using
        <link linkend="attach-header">the Attach: pseudoheader</link>. This may
        be problematic if the
        <link linkend="edit-headers">$edit-headers</link> variable is
        <emphasis>unset</emphasis>, i.e. the user doesn't want to see header
        fields while editing the message and doesn't pay enough attention to
        the compose menu's listing of attachments.</para>
        <para>For example, following a link like</para>
        <screen>mailto:joe@host?Attach=~/.gnupg/secring.gpg</screen>
        <para>will send out the user's private gnupg keyring to
        <literal>joe@host</literal> if the user doesn't follow the information
        on screen carefully enough.</para>
        <para>To prevent these issues, Mutt by default only accepts the
        <literal>Subject</literal> and
        <literal>Body</literal> headers. Allowed headers can be adjusted with
        the
        <link linkend="mailto-allow">
          <command>mailto_allow</command>
        </link>and
        <link linkend="mailto-allow">
          <command>unmailto_allow</command>
        </link>commands.</para>
      </sect2>
    </sect1>

    <sect1 id="security-external">
      <title>External Applications</title>
      <para>Mutt in many places has to rely on external applications or for
      convenience supports mechanisms involving external applications.</para>
      <para>One of these is the
      <literal>mailcap</literal> mechanism as defined by RfC1524. Details about
      a secure use of the mailcap mechanisms is given in
      <xref linkend="secure-mailcap" />.</para>
      <para>Besides the mailcap mechanism, Mutt uses a number of other external
      utilities for operation, for example to provide crypto support, in
      backtick expansion in configuration files or format string filters. The
      same security considerations apply for these as for tools involved via
      mailcap.</para>
    </sect1>
  </chapter>

  <chapter id="guide/tuning">
    <title>Performance Tuning</title>

    <sect1 id="tuning-mailboxes">
      <title>Reading and Writing Mailboxes</title>
      <para>Mutt's performance when reading mailboxes can be improved in two
      ways:</para>
      <orderedlist>
        <listitem>
          <para>For remote folders (IMAP and POP) as well as folders using
          one-file-per message storage (Maildir and MH), Mutt's performance can
          be greatly improved using
          <link linkend="header-caching">header caching</link>. using a single
          database per folder.</para>
        </listitem>
        <listitem>
          <para>Mutt provides the
          <link linkend="read-inc">$read_inc</link> and
          <link linkend="write-inc">$write_inc</link> variables to specify at
          which rate to update progress counters. If these values are too low,
          Mutt may spend more time on updating the progress counter than it
          spends on actually reading/writing folders.</para>
          <para>For example, when opening a maildir folder with a few thousand
          messages, the default value for
          <link linkend="read-inc">$read_inc</link> may be too low. It can be
          tuned on on a folder-basis using
          <link linkend="folder-hook">
          <command>folder-hook</command>s</link>:</para>
          <screen>
<emphasis role="comment"># use very high $read_inc to speed up reading hcache'd maildirs</emphasis>
folder-hook . 'set read_inc=1000'
<emphasis role="comment"># use lower value for reading slower remote IMAP folders</emphasis>
folder-hook ^imap 'set read_inc=100'
<emphasis role="comment"># use even lower value for reading even slower remote POP folders</emphasis>
folder-hook ^pop 'set read_inc=1'</screen>
        </listitem>
      </orderedlist>
      <para>These settings work on a per-message basis. However, as messages
      may greatly differ in size and certain operations are much faster than
      others, even per-folder settings of the increment variables may not be
      desirable as they produce either too few or too much progress updates.
      Thus, Mutt allows to limit the number of progress updates per second
      it'll actually send to the terminal using the
      <link linkend="time-inc">$time_inc</link> variable.</para>
    </sect1>

    <sect1 id="tuning-messages">
      <title>Reading Messages from Remote Folders</title>
      <para>Reading messages from remote folders such as IMAP an POP can be
      slow especially for large mailboxes since Mutt only caches a very limited
      number of recently viewed messages (usually 10) per session (so that it
      will be gone for the next session.)</para>
      <para>To improve performance and permanently cache whole messages, please
      refer to Mutt's so-called
      <link linkend="body-caching">body caching</link> for details.</para>
    </sect1>

    <sect1 id="tuning-search">
      <title>Searching and Limiting</title>
      <para>When searching mailboxes either via a search or a limit action, for
      some patterns Mutt distinguishes between regular expression and string
      searches. For regular expressions, patterns are prefixed with
      <quote>~</quote>and with
      <quote>=</quote>for string searches.</para>
      <para>Even though a regular expression search is fast, it's several times
      slower than a pure string search which is noticeable especially on large
      folders. As a consequence, a string search should be used instead of a
      regular expression search if the user already knows enough about the
      search pattern.</para>
      <para>For example, when limiting a large folder to all messages sent to
      or by an author, it's much faster to search for the initial part of an
      e-mail address via
      <literal>=Luser@</literal>instead of
      <literal>~Luser@</literal>. This is especially true for searching message
      bodies since a larger amount of input has to be searched.</para>
      <para>As for regular expressions, a lower case string search pattern
      makes Mutt perform a case-insensitive search except for IMAP (because for
      IMAP Mutt performs server-side searches which don't support
      case-insensitivity).</para>
    </sect1>
  </chapter>

  <chapter id="guide/reference">
    <title>Reference</title>

    <sect1 id="commandline">
      <title>Command-Line Options</title>
      <para>Running
      <literal>mutt</literal> with no arguments will make Mutt attempt to read
      your spool mailbox. However, it is possible to read other mailboxes and
      to send messages from the command line as well.</para>

      <table id="tab-commandline-options">
        <title>Command line options</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>-A</entry>
              <entry>expand an alias</entry>
            </row>
            <row>
              <entry>-a</entry>
              <entry>attach a file to a message</entry>
            </row>
            <row>
              <entry>-b</entry>
              <entry>specify a blind carbon-copy (BCC) address</entry>
            </row>
            <row>
              <entry>-c</entry>
              <entry>specify a carbon-copy (Cc) address</entry>
            </row>
            <row>
              <entry>-d</entry>
              <entry>log debugging output to ~/.muttdebug0 if mutt was compiled
              with <literal>+debug</literal>; it can range from 1-5 and affects
              verbosity (a value of 2 is recommended)</entry>
            </row>
            <row>
              <entry>-D</entry>
              <entry>print the value of all Mutt variables to stdout</entry>
            </row>
            <row>
              <entry>-D -S</entry>
              <entry>like -D but hide the value of sensitive variables</entry>
            </row>
            <row>
              <entry>-E</entry>
              <entry>edit the draft (-H) or include (-i) file</entry>
            </row>
            <row>
              <entry>-e</entry>
              <entry>specify a config command to be run after initialization
              files are read</entry>
            </row>
            <row>
              <entry>-f</entry>
              <entry>specify a mailbox to load</entry>
            </row>
            <row>
              <entry>-F</entry>
              <entry>specify an alternate file to read initialization
              commands</entry>
            </row>
            <row>
              <entry>-h</entry>
              <entry>print help on command line options</entry>
            </row>
            <row>
              <entry>-H</entry>
              <entry>specify a draft file from which to read a header and
              body</entry>
            </row>
            <row>
              <entry>-i</entry>
              <entry>specify a file to include in a message composition</entry>
            </row>
            <row>
              <entry>-m</entry>
              <entry>specify a default mailbox type</entry>
            </row>
            <row>
              <entry>-n</entry>
              <entry>do not read the system Muttrc</entry>
            </row>
            <row>
              <entry>-p</entry>
              <entry>recall a postponed message</entry>
            </row>
            <row>
              <entry>-Q</entry>
              <entry>query a configuration variable</entry>
            </row>
            <row>
              <entry>-R</entry>
              <entry>open mailbox in read-only mode</entry>
            </row>
            <row>
              <entry>-s</entry>
              <entry>specify a subject (enclose in quotes if it contains
              spaces)</entry>
            </row>
            <row>
              <entry>-v</entry>
              <entry>show version number and compile-time definitions</entry>
            </row>
            <row>
              <entry>-x</entry>
              <entry>simulate the mailx(1) compose mode</entry>
            </row>
            <row>
              <entry>-y</entry>
              <entry>show a menu containing the files specified by the
              <command>mailboxes</command> command</entry>
            </row>
            <row>
              <entry>-z</entry>
              <entry>exit immediately if there are no messages in the
              mailbox</entry>
            </row>
            <row>
              <entry>-Z</entry>
              <entry>open the first folder with new message, exit immediately
              if none</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>To read messages in a mailbox</para>
      <cmdsynopsis>
        <command>mutt</command>
        <arg choice="opt">
          <option>-nz</option>
        </arg>
        <arg choice="opt">
          <option>-F</option>
          <replaceable>muttrc</replaceable>
        </arg>
        <arg choice="opt">
          <option>-m</option>
          <replaceable>type</replaceable>
        </arg>
        <arg choice="opt">
          <option>-f</option>
          <replaceable>mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>To compose a new message</para>
      <cmdsynopsis>
        <command>mutt</command>
        <arg choice="opt">
          <option>-En</option>
        </arg>
        <arg choice="opt">
          <option>-F</option>
          <replaceable>muttrc</replaceable>
        </arg>
        <arg choice="opt">
          <option>-c</option>
          <replaceable>address</replaceable>
        </arg>
        <arg choice="opt">
          <option>-Hi</option>
          <replaceable>filename</replaceable>
        </arg>
        <arg choice="opt">
          <option>-s</option>
          <replaceable>subject</replaceable>
        </arg>
        <arg choice="opt">
        <option>-a</option>
        <replaceable>file</replaceable>
        <arg choice="opt" rep="repeat" />--</arg>
        <group choice="plain" rep="repeat">
          <arg choice="plain">
            <replaceable>address</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable>mailto_url</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>Mutt also supports a
      <quote>batch</quote> mode to send prepared messages. Simply redirect input
      from the file you wish to send. For example,</para>
      <screen>mutt -s "data set for run #2" professor@bigschool.edu &lt; ~/run2.dat</screen>
      <para>will send a message to
      <literal>&lt;professor@bigschool.edu&gt;</literal>with a subject of
      <quote>data set for run #2</quote>. In the body of the message will be
      the contents of the file
      <quote>~/run2.dat</quote>.</para>
      <para>An include file passed with
      <literal>-i</literal> will be used as the body of the message. When
      combined with
      <literal>-E</literal>, the include file will be directly edited during
      message composition. The file will be modified regardless of whether the
      message is sent or aborted.</para>
      <para>A draft file passed with
      <literal>-H</literal> will be used as the initial header and body for the
      message. Multipart messages can be used as a draft file. When combined
      with
      <literal>-E</literal>, the draft file will be updated to the final state
      of the message after composition, regardless of whether the message is
      sent, aborted, or even postponed. Note that if the message is sent
      encrypted or signed, the draft file will be saved that way too.</para>
      <para>All files passed with
      <literal>-a</literal>
      <emphasis>file</emphasis> will be attached as a MIME part to the message.
      To attach a single or several files, use
      <quote>--</quote>to separate files and recipient addresses:</para>
      <screen>mutt -a image.png -- some@one.org</screen>
      <para>or</para>
      <screen>mutt -a *.png -- some@one.org</screen>
      <note>
        <para>The
        <literal>-a</literal> option must be last in the option list.</para>
      </note>
      <para>In addition to accepting a list of email addresses, Mutt also
      accepts a URL with the
      <literal>mailto:</literal>schema as specified in RFC2368. This is useful
      when configuring a web browser to launch Mutt when clicking on mailto
      links.</para>
      <screen>mutt mailto:some@one.org?subject=test&amp;cc=other@one.org</screen>
    </sect1>

    <sect1 id="commands">
      <title>Configuration Commands</title>
      <para>The following are the commands understood by Mutt:</para>
      <itemizedlist>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="account-hook">account-hook</link>
            </command>
            <arg choice="plain">
              <replaceable>regexp</replaceable>
              <replaceable>command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alias">alias</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">address</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">address</replaceable>
            </arg>
            <command>
              <link linkend="alias">unalias</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">key</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alternates">alternates</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>regexp</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>regexp</replaceable>
            </arg>
            <command>
              <link linkend="alternates">unalternates</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>regexp</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alternative-order">alternative_order</link>
            </command>
            <arg choice="plain">
              <replaceable>mimetype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>mimetype</replaceable>
            </arg>
            <command>
              <link linkend="alternative-order">unalternative_order</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>mimetype</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="attachments">attachments</link>
            </command>
            <arg choice="plain">
              <replaceable>{ + | - }disposition</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <command>
              <link linkend="attachments">unattachments</link>
            </command>
            <arg choice="plain">
              <replaceable>{ + | - }disposition</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="append-hook">append-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">shell-command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="auto-view">auto_view</link>
            </command>
            <arg choice="plain">
              <replaceable>mimetype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>mimetype</replaceable>
            </arg>
            <command>
              <link linkend="auto-view">unauto_view</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>mimetype</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="bind">bind</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">map</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">function</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="charset-hook">charset-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">alias</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">charset</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="iconv-hook">iconv-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">charset</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">local-charset</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="close-hook">close-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">shell-command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="color">color</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">object</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <command>
              <link linkend="color">color</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <command>
              <link linkend="color">color</link>
            </command>
            <arg choice="plain">
              <option>index</option>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <command>
              <link linkend="color">uncolor</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>index</option>
              </arg>
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="open-hook">open-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">shell-command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="crypt-hook">crypt-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">keyid</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="exec">exec</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">function</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">function</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="fcc-hook">fcc-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="fcc-save-hook">fcc-save-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="folder-hook">folder-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]regexp</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="addrgroup">group</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain" rep="repeat">
                <option>-rx</option>
                <replaceable class="parameter">expr</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-addr</option>
                <replaceable class="parameter">expr</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="addrgroup">ungroup</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-rx</option>
                <replaceable class="parameter">expr</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-addr</option>
                <replaceable class="parameter">expr</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="hdr-order">hdr_order</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">header</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">header</replaceable>
            </arg>
            <command>
              <link linkend="hdr-order">unhdr_order</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>header</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>ifdef</command>
            <arg choice="plain">
              <replaceable class="parameter">item</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">"config-command
              [args]"</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="ignore">ignore</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <command>
              <link linkend="ignore">unignore</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="lists">lists</link>
            </command>
            <arg>
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <command>
              <link linkend="lists">unlists</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>regexp</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="macro">macro</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">menu</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">sequence</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable class="parameter">description</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mailboxes">mailboxes</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="mailboxes">unmailboxes</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">mailbox</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mailto-allow">mailto_allow</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">header-field</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="mailto-allow">unmailto_allow</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">header-field</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mbox-hook">mbox-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]regexp</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="message-hook">message-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mime-lookup">mime_lookup</link>
            </command>
            <arg choice="plain">
              <replaceable>mimetype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>mimetype</replaceable>
            </arg>
            <command>
              <link linkend="mime-lookup">unmime_lookup</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>mimetype</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mono">mono</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">object</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <command>
              <link linkend="mono">mono</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <command>
              <link linkend="mono">mono</link>
            </command>
            <arg choice="plain">
              <option>index</option>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <command>
              <link linkend="mono">unmono</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>index</option>
              </arg>
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="my-hdr">my_hdr</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">string</replaceable>
            </arg>
            <command>
              <link linkend="my-hdr">unmy_hdr</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">field</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="push">push</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">string</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="save-hook">save-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="score-command">score</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">value</replaceable>
            </arg>
            <command>
              <link linkend="score-command">unscore</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="reply-hook">reply-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="send-hook">send-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="send2-hook">send2-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="set">set</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <group choice="opt">
                  <arg choice="plain">
                    <option>no</option>
                  </arg>
                  <arg choice="plain">
                    <option>inv</option>
                  </arg>
                </group>
                <replaceable class="parameter">variable</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">variable=value</replaceable>
              </arg>
            </group>
            <arg choice="opt" rep="repeat"></arg>
            <command>
              <link linkend="set">toggle</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <command>
              <link linkend="set">unset</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <command>
              <link linkend="set">reset</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="setenv">setenv</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">[?]variable</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable class="parameter">value</replaceable>
            </arg>
            <command>
              <link linkend="setenv">unsetenv</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="sidebar-whitelist">sidebar_whitelist</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="unsidebar-whitelist">unsidebar_whitelist</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">mailbox</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="source">source</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">filename</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="spam">spam</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">format</replaceable>
            </arg>
            <command>
              <link linkend="spam">nospam</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="display-munging">subjectrx</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">replacement</replaceable>
            </arg>
            <command>
              <link linkend="display-munging">unsubjectrx</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="subscribe">subscribe</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">regexp</replaceable>
            </arg>
            <command>
              <link linkend="subscribe">unsubscribe</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">regexp</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="unhook">unhook</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">hook-type</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="variables">
      <title>Configuration Variables</title>

<sect2 id="abort-noattach">
<title>abort_noattach</title>
<literallayout>Type: quadoption
Default: no</literallayout>

<para>
If set to <emphasis>yes</emphasis>, when composing messages containing the regular expression
specified by <link linkend="attach-keyword">attach_keyword</link> and no attachments ** are given, composition
will be aborted. If set to <emphasis>no</emphasis>, composing ** messages as such will never
be aborted.
</para>
<para>
Example:

</para>

<screen>
set attach_keyword = "\\&lt;attach(|ed|ments?)\\&gt;"
</screen></sect2>

<sect2 id="abort-nosubject">
<title>abort_nosubject</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, when composing messages and no subject is given
at the subject prompt, composition will be aborted.  If set to
<emphasis>no</emphasis>, composing messages with no subject given at the subject
prompt will never be aborted.
</para>
</sect2>

<sect2 id="abort-unmodified">
<title>abort_unmodified</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, composition will automatically abort after
editing the message body if no changes are made to the file (this
check only happens after the <emphasis>first</emphasis> edit of the file).  When set
to <emphasis>no</emphasis>, composition will never be aborted.
</para>
</sect2>

<sect2 id="alias-file">
<title>alias_file</title>
<literallayout>Type: path
Default: <quote><literal>~/.muttrc</literal></quote></literallayout>

<para>
The default file in which to save aliases created by the
<literal><link linkend="create-alias">&lt;create-alias&gt;</link></literal> function. Entries added to this file are
encoded in the character set specified by <link linkend="config-charset">$config_charset</link> if it
is <emphasis>set</emphasis> or the current character set otherwise.
</para>
<para>
<emphasis role="bold">Note:</emphasis> Mutt will not automatically source this file; you must
explicitly use the <quote><link linkend="source">source</link></quote> command for it to be executed in case
this option points to a dedicated alias file.
</para>
<para>
The default for this option is the currently used muttrc file, or
<quote>~/.muttrc</quote> if no user muttrc was found.
</para>
</sect2>

<sect2 id="alias-format">
<title>alias_format</title>
<literallayout>Type: string
Default: <quote><literal>%4n %2f %t %-10a   %r</literal></quote></literallayout>

<para>
Specifies the format of the data displayed for the <quote><link linkend="alias">alias</link></quote> menu.  The
following <literal>printf(3)</literal>-style sequences are available:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a </entry><entry>alias name
</entry></row>
<row><entry>%f </entry><entry>flags - currently, a <quote>d</quote> for an alias marked for deletion
</entry></row>
<row><entry>%n </entry><entry>index number
</entry></row>
<row><entry>%r </entry><entry>address which alias expands to
</entry></row>
<row><entry>%t </entry><entry>character which indicates if the alias is tagged for inclusion
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="allow-8bit">
<title>allow_8bit</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether 8-bit data is converted to 7-bit using either Quoted-
Printable or Base64 encoding when sending mail.
</para>
</sect2>

<sect2 id="allow-ansi">
<title>allow_ansi</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether ANSI color codes in messages (and color tags in
rich text messages) are to be interpreted.
Messages containing these codes are rare, but if this option is <emphasis>set</emphasis>,
their text will be colored accordingly. Note that this may override
your color choices, and even present a security problem, since a
message could include a line like

</para>

<screen>
[-- PGP output follows ...
</screen><para>
and give it the same color as your attachment color (see also
<link linkend="crypt-timestamp">$crypt_timestamp</link>).
</para>
</sect2>

<sect2 id="arrow-cursor">
<title>arrow_cursor</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, an arrow (<quote>-&gt;</quote>) will be used to indicate the current entry
in menus instead of highlighting the whole line.  On slow network or modem
links this will make response faster because there is less that has to
be redrawn on the screen when moving to the next or previous entries
in the menu.
</para>
</sect2>

<sect2 id="ascii-chars">
<title>ascii_chars</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will use plain ASCII characters when displaying thread
and attachment trees, instead of the default <emphasis>ACS</emphasis> characters.
</para>
</sect2>

<sect2 id="askbcc">
<title>askbcc</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will prompt you for blind-carbon-copy (Bcc) recipients
before editing an outgoing message.
</para>
</sect2>

<sect2 id="askcc">
<title>askcc</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will prompt you for carbon-copy (Cc) recipients before
editing the body of an outgoing message.
</para>
</sect2>

<sect2 id="ask-follow-up">
<title>ask_follow_up</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set, Mutt will prompt you for follow-up groups before editing
the body of an outgoing message.
</para>
</sect2>

<sect2 id="ask-x-comment-to">
<title>ask_x_comment_to</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set, Mutt will prompt you for x-comment-to field before editing
the body of an outgoing message.
</para>
</sect2>

<sect2 id="assumed-charset">
<title>assumed_charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable is a colon-separated list of character encoding
schemes for messages without character encoding indication.
Header field values and message body content without character encoding
indication would be assumed that they are written in one of this list.
By default, all the header fields and message body without any charset
indication are assumed to be in <quote>us-ascii</quote>.
</para>
<para>
For example, Japanese users might prefer this:

</para>

<screen>
set assumed_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
</screen><para>
However, only the first content is valid for the message body.
</para>
</sect2>

<sect2 id="attach-charset">
<title>attach_charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable is a colon-separated list of character encoding
schemes for text file attachments. Mutt uses this setting to guess
which encoding files being attached are encoded in to convert them to
a proper character set given in <link linkend="send-charset">$send_charset</link>.
</para>
<para>
If <emphasis>unset</emphasis>, the value of <link linkend="charset">$charset</link> will be used instead.
For example, the following configuration would work for Japanese
text handling:

</para>

<screen>
set attach_charset="iso-2022-jp:euc-jp:shift_jis:utf-8"
</screen><para>
Note: for Japanese users, <quote>iso-2022-*</quote> must be put at the head
of the value as shown above if included.
</para>
</sect2>

<sect2 id="attach-format">
<title>attach_format</title>
<literallayout>Type: string
Default: <quote><literal>%u%D%I %t%4n %T%.40d%&gt; [%.7m/%.10M, %.6e%?C?, %C?, %s] </literal></quote></literallayout>

<para>
This variable describes the format of the <quote>attachment</quote> menu.  The
following <literal>printf(3)</literal>-style sequences are understood:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%C  </entry><entry>charset
</entry></row>
<row><entry>%c  </entry><entry>requires charset conversion (<quote>n</quote> or <quote>c</quote>)
</entry></row>
<row><entry>%D  </entry><entry>deleted flag
</entry></row>
<row><entry>%d  </entry><entry>description (if none, falls back to %F)
</entry></row>
<row><entry>%e  </entry><entry>MIME content-transfer-encoding
</entry></row>
<row><entry>%F  </entry><entry>filename in content-disposition header (if none, falls back to %f)
</entry></row>
<row><entry>%f  </entry><entry>filename
</entry></row>
<row><entry>%I  </entry><entry>disposition (<quote>I</quote> for inline, <quote>A</quote> for attachment)
</entry></row>
<row><entry>%m  </entry><entry>major MIME type
</entry></row>
<row><entry>%M  </entry><entry>MIME subtype
</entry></row>
<row><entry>%n  </entry><entry>attachment number
</entry></row>
<row><entry>%Q  </entry><entry><quote>Q</quote>, if MIME part qualifies for attachment counting
</entry></row>
<row><entry>%s  </entry><entry>size
</entry></row>
<row><entry>%t  </entry><entry>tagged flag
</entry></row>
<row><entry>%T  </entry><entry>graphic tree characters
</entry></row>
<row><entry>%u  </entry><entry>unlink (=to delete) flag
</entry></row>
<row><entry>%X  </entry><entry>number of qualifying MIME parts in this part and its children
(please see the <quote><link linkend="attachments">attachments</link></quote> section for possible speed effects)
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with character <quote>X</quote>
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with character <quote>X</quote>
</entry></row>
<row><entry>%*X </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">$index_format</link> documentation.
</para>
</sect2>

<sect2 id="attach-keyword">
<title>attach_keyword</title>
<literallayout>Type: regular expression
Default: <quote><literal>\&lt;(attach|attached|attachments?)\&gt;</literal></quote></literallayout>

<para>
If <link linkend="abort-noattach">abort_noattach</link> is not set to no, then the body of the message
will be scanned for this regular expression, and if found, you will
be prompted if there are no attachments.
</para>
</sect2>

<sect2 id="attach-sep">
<title>attach_sep</title>
<literallayout>Type: string
Default: <quote><literal>\n</literal></quote></literallayout>

<para>
The separator to add between attachments when operating (saving,
printing, piping, etc) on a list of tagged attachments.
</para>
</sect2>

<sect2 id="attach-split">
<title>attach_split</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this variable is <emphasis>unset</emphasis>, when operating (saving, printing, piping,
etc) on a list of tagged attachments, Mutt will concatenate the
attachments and will operate on them as a single attachment. The
<link linkend="attach-sep">$attach_sep</link> separator is added after each attachment. When <emphasis>set</emphasis>,
Mutt will operate on the attachments one by one.
</para>
</sect2>

<sect2 id="attribution">
<title>attribution</title>
<literallayout>Type: string
Default: <quote><literal>On %d, %n wrote:</literal></quote></literallayout>

<para>
This is the string that will precede a message which has been included
in a reply.  For a full listing of defined <literal>printf(3)</literal>-like sequences see
the section on <link linkend="index-format">$index_format</link>.
</para>
</sect2>

<sect2 id="attribution-locale">
<title>attribution_locale</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The locale used by <literal>strftime(3)</literal> to format dates in the
<link linkend="attribution">attribution</link> string.  Legal values are the strings your system
accepts for the locale environment variable <literal>$LC_TIME</literal>.
</para>
<para>
This variable is to allow the attribution date format to be
customized by recipient or folder using hooks.  By default, Mutt
will use your locale environment, so there is no need to set
this except to override that default.
</para>
</sect2>

<sect2 id="auto-tag">
<title>auto_tag</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, functions in the <emphasis>index</emphasis> menu which affect a message
will be applied to all tagged messages (if there are any).  When
unset, you must first use the <literal>&lt;tag-prefix&gt;</literal> function (bound to <quote>;</quote>
by default) to make the next function apply to all tagged messages.
</para>
</sect2>

<sect2 id="autoedit">
<title>autoedit</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis> along with <link linkend="edit-headers">$edit_headers</link>, Mutt will skip the initial
send-menu (prompting for subject and recipients) and allow you to
immediately begin editing the body of your
message.  The send-menu may still be accessed once you have finished
editing the body of your message.
</para>
<para>
<emphasis role="bold">Note:</emphasis> when this option is <emphasis>set</emphasis>, you cannot use send-hooks that depend
on the recipients when composing a new (non-reply) message, as the initial
list of recipients is empty.
</para>
<para>
Also see <link linkend="fast-reply">$fast_reply</link>.
</para>
</sect2>

<sect2 id="beep">
<title>beep</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will beep when an error occurs.
</para>
</sect2>

<sect2 id="beep-new">
<title>beep_new</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will beep whenever it prints a message
notifying you of new mail.  This is independent of the setting of the
<link linkend="beep">$beep</link> variable.
</para>
</sect2>

<sect2 id="bounce">
<title>bounce</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether you will be asked to confirm bouncing messages.
If set to <emphasis>yes</emphasis> you don't get asked if you want to bounce a
message. Setting this variable to <emphasis>no</emphasis> is not generally useful,
and thus not recommended, because you are unable to bounce messages.
</para>
</sect2>

<sect2 id="bounce-delivered">
<title>bounce_delivered</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will include Delivered-To headers when
bouncing messages.  Postfix users may wish to <emphasis>unset</emphasis> this variable.
</para>
</sect2>

<sect2 id="braille-friendly">
<title>braille_friendly</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will place the cursor at the beginning
of the current line in menus, even when the <link linkend="arrow-cursor">$arrow_cursor</link> variable
is <emphasis>unset</emphasis>, making it easier for blind persons using Braille displays to
follow these menus.  The option is <emphasis>unset</emphasis> by default because many
visual terminals don't permit making the cursor invisible.
</para>
</sect2>

<sect2 id="catchup-newsgroup">
<title>catchup_newsgroup</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If this variable is <emphasis>set</emphasis>, Mutt will mark all articles in newsgroup
as read when you quit the newsgroup (catchup newsgroup).
</para>
</sect2>

<sect2 id="certificate-file">
<title>certificate_file</title>
<literallayout>Type: path
Default: <quote><literal>~/.mutt_certificates</literal></quote></literallayout>

<para>
This variable specifies the file where the certificates you trust
are saved. When an unknown certificate is encountered, you are asked
if you accept it or not. If you accept it, the certificate can also
be saved in this file and further connections are automatically
accepted.
</para>
<para>
You can also manually add CA certificates in this file. Any server
certificate that is signed with one of these CA certificates is
also automatically accepted.
</para>
<para>
Example:

</para>

<screen>
set certificate_file=~/.mutt/certificates
</screen></sect2>

<sect2 id="charset">
<title>charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Character set your terminal uses to display and enter textual data.
It is also the fallback for <link linkend="send-charset">$send_charset</link>.
</para>
<para>
Upon startup Mutt tries to derive this value from environment variables
such as <literal>$LC_CTYPE</literal> or <literal>$LANG</literal>.
</para>
<para>
<emphasis role="bold">Note:</emphasis> It should only be set in case Mutt isn't able to determine the
character set used correctly.
</para>
</sect2>

<sect2 id="check-mbox-size">
<title>check_mbox_size</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, mutt will use file size attribute instead of
access time when checking for new mail in mbox and mmdf folders.
</para>
<para>
This variable is <emphasis>unset</emphasis> by default and should only be enabled when
new mail detection for these folder types is unreliable or doesn't work.
</para>
<para>
Note that enabling this variable should happen before any <quote><link linkend="mailboxes">mailboxes</link></quote>
directives occur in configuration files regarding mbox or mmdf folders
because mutt needs to determine the initial new mail status of such a
mailbox by performing a fast mailbox scan when it is defined.
Afterwards the new mail status is tracked by file size changes.
</para>
</sect2>

<sect2 id="check-new">
<title>check_new</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
<emphasis role="bold">Note:</emphasis> this option only affects <emphasis>maildir</emphasis> and <emphasis>MH</emphasis> style
mailboxes.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will check for new mail delivered while the
mailbox is open.  Especially with MH mailboxes, this operation can
take quite some time since it involves scanning the directory and
checking each file to see if it has already been looked at.  If
this variable is <emphasis>unset</emphasis>, no check for new mail is performed
while the mailbox is open.
</para>
</sect2>

<sect2 id="collapse-unread">
<title>collapse_unread</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, Mutt will not collapse a thread if it contains any
unread messages.
</para>
</sect2>

<sect2 id="collapse-flagged">
<title>collapse_flagged</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, Mutt will not collapse a thread if it contains any
flagged messages.
</para>
</sect2>

<sect2 id="compose-format">
<title>compose_format</title>
<literallayout>Type: string
Default: <quote><literal>-- NeoMutt: Compose  [Approx. msg size: %l   Atts: %a]%&gt;-</literal></quote></literallayout>

<para>
Controls the format of the status line displayed in the <quote>compose</quote>
menu.  This string is similar to <link linkend="status-format">$status_format</link>, but has its own
set of <literal>printf(3)</literal>-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a </entry><entry>total number of attachments
</entry></row>
<row><entry>%h </entry><entry>local hostname
</entry></row>
<row><entry>%l </entry><entry>approximate size (in bytes) of the current message
</entry></row>
<row><entry>%v </entry><entry>Mutt version string
</entry></row></tbody></tgroup></informaltable>

<para>
See the text describing the <link linkend="status-format">$status_format</link> option for more
information on how to set <link linkend="compose-format">$compose_format</link>.
</para>
</sect2>

<sect2 id="config-charset">
<title>config_charset</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
When defined, Mutt will recode commands in rc files from this
encoding to the current character set as specified by <link linkend="charset">$charset</link>
and aliases written to <link linkend="alias-file">$alias_file</link> from the current character set.
</para>
<para>
Please note that if setting <link linkend="charset">$charset</link> it must be done before
setting <link linkend="config-charset">$config_charset</link>.
</para>
<para>
Recoding should be avoided as it may render unconvertable
characters as question marks which can lead to undesired
side effects (for example in regular expressions).
</para>
</sect2>

<sect2 id="confirmappend">
<title>confirmappend</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will prompt for confirmation when appending messages to
an existing mailbox.
</para>
</sect2>

<sect2 id="confirmcreate">
<title>confirmcreate</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will prompt for confirmation when saving messages to a
mailbox which does not yet exist before creating it.
</para>
</sect2>

<sect2 id="connect-timeout">
<title>connect_timeout</title>
<literallayout>Type: number
Default: 30</literallayout>

<para>
Causes Mutt to timeout a network connection (for IMAP, POP or SMTP) after this
many seconds if the connection is not able to be established.  A negative
value causes Mutt to wait indefinitely for the connection attempt to succeed.
</para>
</sect2>

<sect2 id="content-type">
<title>content_type</title>
<literallayout>Type: string
Default: <quote><literal>text/plain</literal></quote></literallayout>

<para>
Sets the default Content-Type for the body of newly composed messages.
</para>
</sect2>

<sect2 id="copy">
<title>copy</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether or not copies of your outgoing messages
will be saved for later references.  Also see <link linkend="record">$record</link>,
<link linkend="save-name">$save_name</link>, <link linkend="force-name">$force_name</link> and <quote><link linkend="fcc-hook">fcc-hook</link></quote>.
</para>
</sect2>

<sect2 id="crypt-autoencrypt">
<title>crypt_autoencrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to PGP
encrypt outgoing messages.  This is probably only useful in
connection to the <quote><link linkend="send-hook">send-hook</link></quote> command.  It can be overridden
by use of the pgp menu, when encryption is not required or
signing is requested as well.  If <link linkend="smime-is-default">$smime_is_default</link> is <emphasis>set</emphasis>,
then OpenSSL is used instead to create S/MIME messages and
settings can be overridden by use of the smime menu instead.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-autopgp">
<title>crypt_autopgp</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not mutt may automatically enable
PGP encryption/signing for messages.  See also <link linkend="crypt-autoencrypt">$crypt_autoencrypt</link>,
<link linkend="crypt-replyencrypt">$crypt_replyencrypt</link>,
<link linkend="crypt-autosign">$crypt_autosign</link>, <link linkend="crypt-replysign">$crypt_replysign</link> and <link linkend="smime-is-default">$smime_is_default</link>.
</para>
</sect2>

<sect2 id="crypt-autosign">
<title>crypt_autosign</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to
cryptographically sign outgoing messages.  This can be overridden
by use of the pgp menu, when signing is not required or
encryption is requested as well. If <link linkend="smime-is-default">$smime_is_default</link> is <emphasis>set</emphasis>,
then OpenSSL is used instead to create S/MIME messages and settings can
be overridden by use of the smime menu instead of the pgp menu.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-autosmime">
<title>crypt_autosmime</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not mutt may automatically enable
S/MIME encryption/signing for messages. See also <link linkend="crypt-autoencrypt">$crypt_autoencrypt</link>,
<link linkend="crypt-replyencrypt">$crypt_replyencrypt</link>,
<link linkend="crypt-autosign">$crypt_autosign</link>, <link linkend="crypt-replysign">$crypt_replysign</link> and <link linkend="smime-is-default">$smime_is_default</link>.
</para>
</sect2>

<sect2 id="crypt-confirmhook">
<title>crypt_confirmhook</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If set, then you will be prompted for confirmation of keys when using
the <emphasis>crypt-hook</emphasis> command.  If unset, no such confirmation prompt will
be presented.  This is generally considered unsafe, especially where
typos are concerned.
</para>
</sect2>

<sect2 id="crypt-opportunistic-encrypt">
<title>crypt_opportunistic_encrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to automatically enable and
disable encryption, based on whether all message recipient keys
can be located by Mutt.
</para>
<para>
When this option is enabled, Mutt will enable/disable encryption
each time the TO, CC, and BCC lists are edited.  If
<link linkend="edit-headers">$edit_headers</link> is set, Mutt will also do so each time the message
is edited.
</para>
<para>
While this is set, encryption can't be manually enabled/disabled.
The pgp or smime menus provide a selection to temporarily disable
this option for the current message.
</para>
<para>
If <link linkend="crypt-autoencrypt">$crypt_autoencrypt</link> or <link linkend="crypt-replyencrypt">$crypt_replyencrypt</link> enable encryption for
a message, this option will be disabled for that message.  It can
be manually re-enabled in the pgp or smime menus.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-replyencrypt">
<title>crypt_replyencrypt</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL encrypt replies to messages which are
encrypted.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-replysign">
<title>crypt_replysign</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL sign replies to messages which are
signed.
</para>
<para>
<emphasis role="bold">Note:</emphasis> this does not work on messages that are encrypted
<emphasis>and</emphasis> signed!
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-replysignencrypted">
<title>crypt_replysignencrypted</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, automatically PGP or OpenSSL sign replies to messages
which are encrypted. This makes sense in combination with
<link linkend="crypt-replyencrypt">$crypt_replyencrypt</link>, because it allows you to sign all
messages which are automatically encrypted.  This works around
the problem noted in <link linkend="crypt-replysign">$crypt_replysign</link>, that mutt is not able
to find out whether an encrypted message is also signed.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-timestamp">
<title>crypt_timestamp</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will include a time stamp in the lines surrounding
PGP or S/MIME output, so spoofing such lines is more difficult.
If you are using colors to mark these lines, and rely on these,
you may <emphasis>unset</emphasis> this setting.
(Crypto only)
</para>
</sect2>

<sect2 id="crypt-use-gpgme">
<title>crypt_use_gpgme</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls the use of the GPGME-enabled crypto backends.
If it is <emphasis>set</emphasis> and Mutt was built with gpgme support, the gpgme code for
S/MIME and PGP will be used instead of the classic code.  Note that
you need to set this option in .muttrc; it won't have any effect when
used interactively.
</para>
<para>
Note that the GPGME backend does not support creating old-style inline
(traditional) PGP encrypted or signed messages (see <link linkend="pgp-autoinline">$pgp_autoinline</link>).
</para>
</sect2>

<sect2 id="crypt-use-pka">
<title>crypt_use_pka</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether mutt uses PKA
(see http://www.g10code.de/docs/pka-intro.de.pdf) during signature
verification (only supported by the GPGME backend).
</para>
</sect2>

<sect2 id="crypt-verify-sig">
<title>crypt_verify_sig</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If <emphasis><quote>yes</quote></emphasis>, always attempt to verify PGP or S/MIME signatures.
If <emphasis><quote>ask-*</quote></emphasis>, ask whether or not to verify the signature.
If <emphasis><quote>no</quote></emphasis>, never attempt to verify cryptographic signatures.
(Crypto only)
</para>
</sect2>

<sect2 id="date-format">
<title>date_format</title>
<literallayout>Type: string
Default: <quote><literal>!%a, %b %d, %Y at %I:%M:%S%p %Z</literal></quote></literallayout>

<para>
This variable controls the format of the date printed by the <quote>%d</quote>
sequence in <link linkend="index-format">$index_format</link>.  This is passed to the <literal>strftime(3)</literal>
function to process the date, see the man page for the proper syntax.
</para>
<para>
Unless the first character in the string is a bang (<quote>!</quote>), the month
and week day names are expanded according to the locale.
If the first character in the string is a
bang, the bang is discarded, and the month and week day names in the
rest of the string are expanded in the <emphasis>C</emphasis> locale (that is in US
English).
</para>
</sect2>

<sect2 id="debug-level">
<title>debug_level</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
The debug level. Note: to debug the early startup process (before the
configuration is loaded), <quote>-d</quote> mutt argument must be used.
debug_level/debug_file are ignored until it's read from the configuration
file.
</para>
</sect2>

<sect2 id="debug-file">
<title>debug_file</title>
<literallayout>Type: path
Default: <quote><literal>~/.muttdebug</literal></quote></literallayout>

<para>
The location prefix of the debug file, 0 is append to the debug file
Old debug files are renamed with the prefix 1, 2, 3 and 4.
See <quote>debug_level</quote> for more detail.
</para>
</sect2>

<sect2 id="default-hook">
<title>default_hook</title>
<literallayout>Type: string
Default: <quote><literal>~f %s !~P | (~P ~C %s)</literal></quote></literallayout>

<para>
This variable controls how <quote><link linkend="message-hook">message-hook</link></quote>, <quote><link linkend="reply-hook">reply-hook</link></quote>, <quote><link linkend="send-hook">send-hook</link></quote>,
<quote><link linkend="send2-hook">send2-hook</link></quote>, <quote><link linkend="save-hook">save-hook</link></quote>, and <quote><link linkend="fcc-hook">fcc-hook</link></quote> will
be interpreted if they are specified with only a simple regexp,
instead of a matching pattern.  The hooks are expanded when they are
declared, so a hook will be interpreted according to the value of this
variable at the time the hook is declared.
</para>
<para>
The default value matches
if the message is either from a user matching the regular expression
given, or if it is from you (if the from address matches
<quote><link linkend="alternates">alternates</link></quote>) and is to or cc'ed to a user matching the given
regular expression.
</para>
</sect2>

<sect2 id="delete">
<title>delete</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not messages are really deleted when closing or
synchronizing a mailbox.  If set to <emphasis>yes</emphasis>, messages marked for
deleting will automatically be purged without prompting.  If set to
<emphasis>no</emphasis>, messages marked for deletion will be kept in the mailbox.
</para>
</sect2>

<sect2 id="delete-untag">
<title>delete_untag</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this option is <emphasis>set</emphasis>, mutt will untag messages when marking them
for deletion.  This applies when you either explicitly delete a message,
or when you save it to another folder.
</para>
</sect2>

<sect2 id="digest-collapse">
<title>digest_collapse</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If this option is <emphasis>set</emphasis>, mutt's received-attachments menu will not show the subparts of
individual messages in a multipart/digest.  To see these subparts, press <quote>v</quote> on that menu.
</para>
</sect2>

<sect2 id="display-filter">
<title>display_filter</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
When set, specifies a command used to filter messages.  When a message
is viewed it is passed as standard input to <link linkend="display-filter">$display_filter</link>, and the
filtered message is read from the standard output.
</para>
</sect2>

<sect2 id="dsn-notify">
<title>dsn_notify</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable sets the request for when notification is returned.  The
string consists of a comma separated list (no spaces!) of one or more
of the following: <emphasis>never</emphasis>, to never request notification,
<emphasis>failure</emphasis>, to request notification on transmission failure,
<emphasis>delay</emphasis>, to be notified of message delays, <emphasis>success</emphasis>, to be
notified of successful transmission.
</para>
<para>
Example:

</para>

<screen>
set dsn_notify="failure,delay"
</screen><para>
<emphasis role="bold">Note:</emphasis> when using <link linkend="sendmail">$sendmail</link> for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a <literal>sendmail(1)</literal>-compatible interface supporting the <literal>-N</literal> option
for DSN. For SMTP delivery, DSN support is auto-detected so that it
depends on the server whether DSN will be used or not.
</para>
</sect2>

<sect2 id="dsn-return">
<title>dsn_return</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable controls how much of your message is returned in DSN
messages.  It may be set to either <emphasis>hdrs</emphasis> to return just the
message header, or <emphasis>full</emphasis> to return the full message.
</para>
<para>
Example:

</para>

<screen>
set dsn_return=hdrs
</screen><para>
<emphasis role="bold">Note:</emphasis> when using <link linkend="sendmail">$sendmail</link> for delivery, you should not enable
this unless you are either using Sendmail 8.8.x or greater or a MTA
providing a <literal>sendmail(1)</literal>-compatible interface supporting the <literal>-R</literal> option
for DSN. For SMTP delivery, DSN support is auto-detected so that it
depends on the server whether DSN will be used or not.
</para>
</sect2>

<sect2 id="duplicate-threads">
<title>duplicate_threads</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether mutt, when <link linkend="sort">$sort</link> is set to <emphasis>threads</emphasis>, threads
messages with the same Message-Id together.  If it is <emphasis>set</emphasis>, it will indicate
that it thinks they are duplicates of each other with an equals sign
in the thread tree.
</para>
</sect2>

<sect2 id="edit-headers">
<title>edit_headers</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option allows you to edit the header of your outgoing messages
along with the body of your message.
</para>
<para>
Although the compose menu may have localized header labels, the
labels passed to your editor will be standard RFC 2822 headers,
(e.g. To:, Cc:, Subject:).  Headers added in your editor must
also be RFC 2822 headers, or one of the pseudo headers listed in
<quote><link linkend="edit-header">edit-header</link></quote>.  Mutt will not understand localized header
labels, just as it would not when parsing an actual email.
</para>
<para>
<emphasis role="bold">Note</emphasis> that changes made to the References: and Date: headers are
ignored for interoperability reasons.
</para>
</sect2>

<sect2 id="editor">
<title>editor</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable specifies which editor is used by mutt.
It defaults to the value of the <literal>$VISUAL</literal>, or <literal>$EDITOR</literal>, environment
variable, or to the string <quote>vi</quote> if neither of those are set.
</para>
<para>
The <literal><link linkend="editor">$editor</link></literal> string may contain a <emphasis>%s</emphasis> escape, which will be replaced by the name
of the file to be edited.  If the <emphasis>%s</emphasis> escape does not appear in <literal><link linkend="editor">$editor</link></literal>, a
space and the name to be edited are appended.
</para>
<para>
The resulting string is then executed by running

</para>

<screen>
sh -c 'string'
</screen><para>
where <emphasis>string</emphasis> is the expansion of <literal><link linkend="editor">$editor</link></literal> described above.
</para>
</sect2>

<sect2 id="empty-subject">
<title>empty_subject</title>
<literallayout>Type: string
Default: <quote><literal>Re: your mail</literal></quote></literallayout>

<para>
This variable specifies the subject to be used when replying to an email
with an empty subject.  It defaults to "Re: your mail".
</para>
</sect2>

<sect2 id="encode-from">
<title>encode_from</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will quoted-printable encode messages when
they contain the string <quote>From </quote> (note the trailing space) in the beginning of a line.
This is useful to avoid the tampering certain mail delivery and transport
agents tend to do with messages (in order to prevent tools from
misinterpreting the line as a mbox message separator).
</para>
</sect2>

<sect2 id="entropy-file">
<title>entropy_file</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
The file which includes random data that is used to initialize SSL
library functions.
</para>
</sect2>

<sect2 id="envelope-from-address">
<title>envelope_from_address</title>
<literallayout>Type: e-mail address
Default: (empty)</literallayout>

<para>
Manually sets the <emphasis>envelope</emphasis> sender for outgoing messages.
This value is ignored if <link linkend="use-envelope-from">$use_envelope_from</link> is <emphasis>unset</emphasis>.
</para>
</sect2>

<sect2 id="escape">
<title>escape</title>
<literallayout>Type: string
Default: <quote><literal>~</literal></quote></literallayout>

<para>
Escape character to use for functions in the built-in editor.
</para>
</sect2>

<sect2 id="fast-reply">
<title>fast_reply</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the initial prompt for recipients and subject are skipped
when replying to messages, and the initial prompt for subject is
skipped when forwarding messages.
</para>
<para>
<emphasis role="bold">Note:</emphasis> this variable has no effect when the <link linkend="autoedit">$autoedit</link>
variable is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="fcc-attach">
<title>fcc_attach</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether or not attachments on outgoing messages
are saved along with the main body of your message.
</para>
</sect2>

<sect2 id="fcc-clear">
<title>fcc_clear</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, FCCs will be stored unencrypted and
unsigned, even when the actual message is encrypted and/or
signed.
(PGP only)
</para>
</sect2>

<sect2 id="flag-safe">
<title>flag_safe</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set, flagged messages cannot be deleted.
</para>
</sect2>

<sect2 id="folder">
<title>folder</title>
<literallayout>Type: path
Default: <quote><literal>~/Mail</literal></quote></literallayout>

<para>
Specifies the default location of your mailboxes.  A <quote>+</quote> or <quote>=</quote> at the
beginning of a pathname will be expanded to the value of this
variable.  Note that if you change this variable (from the default)
value you need to make sure that the assignment occurs <emphasis>before</emphasis>
you use <quote>+</quote> or <quote>=</quote> for any other variables since expansion takes place
when handling the <quote><link linkend="mailboxes">mailboxes</link></quote> command.
</para>
</sect2>

<sect2 id="folder-format">
<title>folder_format</title>
<literallayout>Type: string
Default: <quote><literal>%2C %t %N %F %2l %-8.8u %-8.8g %8s %d %f</literal></quote></literallayout>

<para>
This variable allows you to customize the file browser display to your
personal taste.  This string is similar to <link linkend="index-format">$index_format</link>, but has
its own set of <literal>printf(3)</literal>-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%C  </entry><entry>current file number
</entry></row>
<row><entry>%d  </entry><entry>date/time folder was last modified
</entry></row>
<row><entry>%D  </entry><entry>date/time folder was last modified using <link linkend="date-format">$date_format</link>.
</entry></row>
<row><entry>%f  </entry><entry>filename (<quote>/</quote> is appended to directory names,
<quote>@</quote> to symbolic links and <quote>*</quote> to executable
files)
</entry></row>
<row><entry>%F  </entry><entry>file permissions
</entry></row>
<row><entry>%g  </entry><entry>group name (or numeric gid, if missing)
</entry></row>
<row><entry>%l  </entry><entry>number of hard links
</entry></row>
<row><entry>%m  </entry><entry>number of messages in the mailbox *
</entry></row>
<row><entry>%n  </entry><entry>number of unread messages in the mailbox *
</entry></row>
<row><entry>%N  </entry><entry>N if mailbox has new mail, blank otherwise
</entry></row>
<row><entry>%s  </entry><entry>size in bytes
</entry></row>
<row><entry>%t  </entry><entry><quote>*</quote> if the file is tagged, blank otherwise
</entry></row>
<row><entry>%u  </entry><entry>owner name (or numeric uid, if missing)
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with character <quote>X</quote>
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with character <quote>X</quote>
</entry></row>
<row><entry>%*X </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">$index_format</link> documentation.
</para>
<para>
* = can be optionally printed if nonzero
</para>
<para>
%m, %n, and %N only work for monitored mailboxes.
%m requires <link linkend="mail-check-stats">$mail_check_stats</link> to be set.
%n requires <link linkend="mail-check-stats">$mail_check_stats</link> to be set (except for IMAP mailboxes).
</para>
</sect2>

<sect2 id="followup-to">
<title>followup_to</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether or not the <quote>Mail-Followup-To:</quote> header field is
generated when sending mail.  When <emphasis>set</emphasis>, Mutt will generate this
field when you are replying to a known mailing list, specified with
the <quote><link linkend="subscribe">subscribe</link></quote> or <quote><link linkend="lists">lists</link></quote> commands.
</para>
<para>
This field has two purposes.  First, preventing you from
receiving duplicate copies of replies to messages which you send
to mailing lists, and second, ensuring that you do get a reply
separately for any messages sent to known lists to which you are
not subscribed.
</para>
<para>
The header will contain only the list's address
for subscribed lists, and both the list address and your own
email address for unsubscribed lists.  Without this header, a
group reply to your message sent to a subscribed list will be
sent to both the list and your address, resulting in two copies
of the same email for you.
</para>
</sect2>

<sect2 id="followup-to-poster">
<title>followup_to_poster</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If this variable is <emphasis>set</emphasis> and the keyword "poster" is present in
<emphasis>Followup-To</emphasis> header, follow-up to newsgroup function is not
permitted.  The message will be mailed to the submitter of the
message via mail.
</para>
</sect2>

<sect2 id="force-name">
<title>force_name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable is similar to <link linkend="save-name">$save_name</link>, except that Mutt will
store a copy of your outgoing message by the username of the address
you are sending to even if that mailbox does not exist.
</para>
<para>
Also see the <link linkend="record">$record</link> variable.
</para>
</sect2>

<sect2 id="forward-attribution-intro">
<title>forward_attribution_intro</title>
<literallayout>Type: string
Default: <quote><literal>----- Forwarded message from %f -----</literal></quote></literallayout>

<para>
This is the string that will precede a message which has been forwarded
in the main body of a message (when <link linkend="mime-forward">$mime_forward</link> is unset).
For a full listing of defined <literal>printf(3)</literal>-like sequences see
the section on <link linkend="index-format">$index_format</link>.  See also <link linkend="attribution-locale">$attribution_locale</link>.
</para>
</sect2>

<sect2 id="forward-attribution-trailer">
<title>forward_attribution_trailer</title>
<literallayout>Type: string
Default: <quote><literal>----- End forwarded message -----</literal></quote></literallayout>

<para>
This is the string that will follow a message which has been forwarded
in the main body of a message (when <link linkend="mime-forward">$mime_forward</link> is unset).
For a full listing of defined <literal>printf(3)</literal>-like sequences see
the section on <link linkend="index-format">$index_format</link>.  See also <link linkend="attribution-locale">$attribution_locale</link>.
</para>
</sect2>

<sect2 id="forward-decode">
<title>forward_decode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the decoding of complex MIME messages into <literal>text/plain</literal> when
forwarding a message.  The message header is also RFC2047 decoded.
This variable is only used, if <link linkend="mime-forward">$mime_forward</link> is <emphasis>unset</emphasis>,
otherwise <link linkend="mime-forward-decode">$mime_forward_decode</link> is used instead.
</para>
</sect2>

<sect2 id="forward-decrypt">
<title>forward_decrypt</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the handling of encrypted messages when forwarding a message.
When <emphasis>set</emphasis>, the outer layer of encryption is stripped off.  This
variable is only used if <link linkend="mime-forward">$mime_forward</link> is <emphasis>set</emphasis> and
<link linkend="mime-forward-decode">$mime_forward_decode</link> is <emphasis>unset</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="forward-edit">
<title>forward_edit</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This quadoption controls whether or not the user is automatically
placed in the editor when forwarding messages.  For those who always want
to forward with no modification, use a setting of <quote>no</quote>.
</para>
</sect2>

<sect2 id="forward-format">
<title>forward_format</title>
<literallayout>Type: string
Default: <quote><literal>[%a: %s]</literal></quote></literallayout>

<para>
This variable controls the default subject when forwarding a message.
It uses the same format sequences as the <link linkend="index-format">$index_format</link> variable.
</para>
</sect2>

<sect2 id="forward-quote">
<title>forward_quote</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, forwarded messages included in the main body of the
message (when <link linkend="mime-forward">$mime_forward</link> is <emphasis>unset</emphasis>) will be quoted using
<link linkend="indent-string">$indent_string</link>.
</para>
</sect2>

<sect2 id="forward-references">
<title>forward_references</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, forwarded messages set the <quote>In-Reply-To:</quote> and
<quote>References:</quote> headers in the same way as normal replies would. Hence the
forwarded message becomes part of the original thread instead of starting
a new one.
</para>
</sect2>

<sect2 id="from">
<title>from</title>
<literallayout>Type: e-mail address
Default: (empty)</literallayout>

<para>
When <emphasis>set</emphasis>, this variable contains a default from address.  It
can be overridden using <quote><link linkend="my-hdr">my_hdr</link></quote> (including from a <quote><link linkend="send-hook">send-hook</link></quote>) and
<link linkend="reverse-name">$reverse_name</link>.  This variable is ignored if <link linkend="use-from">$use_from</link> is <emphasis>unset</emphasis>.
</para>
<para>
This setting defaults to the contents of the environment variable <literal>$EMAIL</literal>.
</para>
</sect2>

<sect2 id="from-chars">
<title>from_chars</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Controls the character used to prefix the %F and %L fields in the
index.

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry><emphasis role="bold">Character</emphasis> </entry><entry><emphasis role="bold">Description</emphasis>
</entry></row>
<row><entry>1 </entry><entry>Mail is written by you and has a To address, or has a known mailing list in the To address.
</entry></row>
<row><entry>2 </entry><entry>Mail is written by you and has a Cc address, or has a known mailing list in the Cc address.
</entry></row>
<row><entry>3 </entry><entry>Mail is written by you and has a Bcc address.
</entry></row>
<row><entry>4 </entry><entry>All remaining cases.
</entry></row></tbody></tgroup></informaltable>

<para>
If this is empty or unset (default), the traditional long "To ",
"Cc " and "Bcc " prefixes are used.  If set but too short to
include a character for a particular case, a single space will be
prepended to the field.  To prevent any prefix at all from being
added in a particular case, use the special value CR (aka ^M)
for the corresponding character.
</para>
<para>
This slightly odd interface is necessitated by mutt's handling of
string variables; one cannot tell a variable that is unset from one
that is set to the empty string.
</para>
</sect2>

<sect2 id="gecos-mask">
<title>gecos_mask</title>
<literallayout>Type: regular expression
Default: <quote><literal>^[^,]*</literal></quote></literallayout>

<para>
A regular expression used by mutt to parse the GECOS field of a password
entry when expanding the alias.  The default value
will return the string up to the first <quote>,</quote> encountered.
If the GECOS field contains a string like <quote>lastname, firstname</quote> then you
should set it to <quote><literal>.*</literal></quote>.
</para>
<para>
This can be useful if you see the following behavior: you address an e-mail
to user ID <quote>stevef</quote> whose full name is <quote>Steve Franklin</quote>.  If mutt expands
<quote>stevef</quote> to <quote>"Franklin" stevef@foo.bar</quote> then you should set the <link linkend="gecos-mask">$gecos_mask</link> to
a regular expression that will match the whole name so mutt will expand
<quote>Franklin</quote> to <quote>Franklin, Steve</quote>.
</para>
</sect2>

<sect2 id="group-index-format">
<title>group_index_format</title>
<literallayout>Type: string
Default: <quote><literal>%4C %M%N %5s  %-45.45f %d</literal></quote></literallayout>

<para>
This variable allows you to customize the newsgroup browser display to
your personal taste.  This string is similar to <quote><link linkend="index-format">index_format</link></quote>, but
has its own set of printf()-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%C  </entry><entry>current newsgroup number
</entry></row>
<row><entry>%d  </entry><entry>description of newsgroup (becomes from server)
</entry></row>
<row><entry>%f  </entry><entry>newsgroup name
</entry></row>
<row><entry>%M  </entry><entry>- if newsgroup not allowed for direct post (moderated for example)
</entry></row>
<row><entry>%N  </entry><entry>N if newsgroup is new, u if unsubscribed, blank otherwise
</entry></row>
<row><entry>%n  </entry><entry>number of new articles in newsgroup
</entry></row>
<row><entry>%s  </entry><entry>number of unread articles in newsgroup
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with character "X"
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with character "X"
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="hdrs">
<title>hdrs</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, the header fields normally added by the <quote><link linkend="my-hdr">my_hdr</link></quote>
command are not created.  This variable <emphasis>must</emphasis> be unset before
composing a new message or replying in order to take effect.  If <emphasis>set</emphasis>,
the user defined header fields are added to every new message.
</para>
</sect2>

<sect2 id="header">
<title>header</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, this variable causes Mutt to include the header
of the message you are replying to into the edit buffer.
The <link linkend="weed">$weed</link> setting applies.
</para>
</sect2>

<sect2 id="header-cache">
<title>header_cache</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable points to the header cache database.
If pointing to a directory Mutt will contain a header cache
database file per folder, if pointing to a file that file will
be a single global header cache. By default it is <emphasis>unset</emphasis> so no header
caching will be used.
</para>
<para>
Header caching can greatly improve speed when opening POP, IMAP
MH or Maildir folders, see <quote><link linkend="caching">caching</link></quote> for details.
</para>
</sect2>

<sect2 id="header-cache-backend">
<title>header_cache_backend</title>
<literallayout>Type: -none-
Default: 0</literallayout>

<para>
This variable specifies the header cache backend.
</para>
</sect2>

<sect2 id="header-cache-compress">
<title>header_cache_compress</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When mutt is compiled with qdbm, tokyocabinet or kyotocabinet
as header cache backend, this option determines whether the
database will be compressed. Compression results in database
files roughly being one fifth of the usual diskspace, but the
decompression can result in a slower opening of cached folder(s)
which in general is still much faster than opening non header
cached folders.
</para>
</sect2>

<sect2 id="header-cache-pagesize">
<title>header_cache_pagesize</title>
<literallayout>Type: string
Default: <quote><literal>16384</literal></quote></literallayout>

<para>
When mutt is compiled with either gdbm or bdb4 as the header cache backend,
this option changes the database page size.  Too large or too small
values can waste space, memory, or CPU time. The default should be more
or less optimal for most use cases.
</para>
</sect2>

<sect2 id="header-color-partial">
<title>header_color_partial</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, color header regexps behave like color body regexps:
color is applied to the exact text matched by the regexp.  When
<emphasis>unset</emphasis>, color is applied to the entire header.
</para>
<para>
One use of this option might be to apply color to just the header labels.
</para>
<para>
See <quote><link linkend="color">color</link></quote> for more details.
</para>
</sect2>

<sect2 id="help">
<title>help</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, help lines describing the bindings for the major functions
provided by each menu are displayed on the first line of the screen.
</para>
<para>
<emphasis role="bold">Note:</emphasis> The binding will not be displayed correctly if the
function is bound to a sequence rather than a single keystroke.  Also,
the help line may not be updated if a binding is changed while Mutt is
running.  Since this variable is primarily aimed at new users, neither
of these should present a major problem.
</para>
</sect2>

<sect2 id="hidden-host">
<title>hidden_host</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will skip the host name part of <link linkend="hostname">$hostname</link> variable
when adding the domain part to addresses.  This variable does not
affect the generation of Message-IDs, and it will not lead to the
cut-off of first-level domains.
</para>
</sect2>

<sect2 id="hide-limited">
<title>hide_limited</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of messages that are hidden
by limiting, in the thread tree.
</para>
</sect2>

<sect2 id="hide-missing">
<title>hide_missing</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of missing messages in the
thread tree.
</para>
</sect2>

<sect2 id="hide-thread-subject">
<title>hide_thread_subject</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the subject of messages in the thread
tree that have the same subject as their parent or closest previously
displayed sibling.
</para>
</sect2>

<sect2 id="hide-top-limited">
<title>hide_top_limited</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of messages that are hidden
by limiting, at the top of threads in the thread tree.  Note that when
<link linkend="hide-limited">$hide_limited</link> is <emphasis>set</emphasis>, this option will have no effect.
</para>
</sect2>

<sect2 id="hide-top-missing">
<title>hide_top_missing</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not show the presence of missing messages at the
top of threads in the thread tree.  Note that when <link linkend="hide-missing">$hide_missing</link> is
<emphasis>set</emphasis>, this option will have no effect.
</para>
</sect2>

<sect2 id="history">
<title>history</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
This variable controls the size (in number of strings remembered) of
the string history buffer per category. The buffer is cleared each time the
variable is set.
</para>
</sect2>

<sect2 id="history-file">
<title>history_file</title>
<literallayout>Type: path
Default: <quote><literal>~/.mutthistory</literal></quote></literallayout>

<para>
The file in which Mutt will save its history.
</para>
<para>
Also see <link linkend="save-history">$save_history</link>.
</para>
</sect2>

<sect2 id="history-remove-dups">
<title>history_remove_dups</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, all of the string history will be scanned for duplicates
when a new entry is added.  Duplicate entries in the <link linkend="history-file">$history_file</link> will
also be removed when it is periodically compacted.
</para>
</sect2>

<sect2 id="honor-disposition">
<title>honor_disposition</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will not display attachments with a
disposition of <quote>attachment</quote> inline even if it could
render the part to plain text. These MIME parts can only
be viewed from the attachment menu.
</para>
<para>
If <emphasis>unset</emphasis>, Mutt will render all MIME parts it can
properly transform to plain text.
</para>
</sect2>

<sect2 id="honor-followup-to">
<title>honor_followup_to</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether or not a Mail-Followup-To header is
honored when group-replying to a message.
</para>
</sect2>

<sect2 id="hostname">
<title>hostname</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the fully-qualified hostname of the system mutt is running on
containing the host's name and the DNS domain it belongs to. It is used
as the domain part (after <quote>@</quote>) for local email addresses as well as
Message-Id headers.
</para>
<para>
Its value is determined at startup as follows: the node's
hostname is first determined by the <literal>uname(3)</literal> function.  The
domain is then looked up using the <literal>gethostname(2)</literal> and
<literal>getaddrinfo(3)</literal> functions.  If those calls are unable to
determine the domain, the full value returned by uname is used.
Optionally, Mutt can be compiled with a fixed domain name in
which case a detected one is not used.
</para>
<para>
Also see <link linkend="use-domain">$use_domain</link> and <link linkend="hidden-host">$hidden_host</link>.
</para>
</sect2>

<sect2 id="idn-decode">
<title>idn_decode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will show you international domain names decoded.
Note: You can use IDNs for addresses even if this is <emphasis>unset</emphasis>.
This variable only affects decoding. (IDN only)
</para>
</sect2>

<sect2 id="idn-encode">
<title>idn_encode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will encode international domain names using
IDN.  Unset this if your SMTP server can handle newer (RFC 6531)
UTF-8 encoded domains. (IDN only)
</para>
</sect2>

<sect2 id="ignore-linear-white-space">
<title>ignore_linear_white_space</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option replaces linear-white-space between encoded-word
and text to a single space to prevent the display of MIME-encoded
<quote>Subject:</quote> field from being divided into multiple lines.
</para>
</sect2>

<sect2 id="ignore-list-reply-to">
<title>ignore_list_reply_to</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Affects the behavior of the <literal>&lt;reply&gt;</literal> function when replying to
messages from mailing lists (as defined by the <quote><link linkend="subscribe">subscribe</link></quote> or
<quote><link linkend="lists">lists</link></quote> commands).  When <emphasis>set</emphasis>, if the <quote>Reply-To:</quote> field is
set to the same value as the <quote>To:</quote> field, Mutt assumes that the
<quote>Reply-To:</quote> field was set by the mailing list to automate responses
to the list, and will ignore this field.  To direct a response to the
mailing list when this option is <emphasis>set</emphasis>, use the <literal><link linkend="list-reply">&lt;list-reply&gt;</link></literal>
function; <literal>&lt;group-reply&gt;</literal> will reply to both the sender and the
list.
</para>
</sect2>

<sect2 id="show-multipart-alternative">
<title>show_multipart_alternative</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
When <emphasis>set</emphasis> to <literal>info</literal>, the multipart/alternative information is shown.
When <emphasis>set</emphasis> to <literal>inline</literal>, all of the alternatives are displayed.
When not set, the default behavior is to show only the chosen alternative.
</para>
<para>
</para>
</sect2>

<sect2 id="imap-authenticators">
<title>imap_authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an IMAP server, in the order mutt should
try them.  Authentication methods are either <quote>login</quote> or the right
side of an IMAP <quote>AUTH=xxx</quote> capability string, e.g. <quote>digest-md5</quote>, <quote>gssapi</quote>
or <quote>cram-md5</quote>. This option is case-insensitive. If it's
<emphasis>unset</emphasis> (the default) mutt will try all available methods,
in order from most-secure to least-secure.
</para>
<para>
Example:

</para>

<screen>
set imap_authenticators="gssapi:cram-md5:login"
</screen><para>
<emphasis role="bold">Note:</emphasis> Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is available but
authentication fails, mutt will not connect to the IMAP server.
</para>
</sect2>

<sect2 id="imap-check-subscribed">
<title>imap_check_subscribed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will fetch the set of subscribed folders from
your server on connection, and add them to the set of mailboxes
it polls for new mail just as if you had issued individual <quote><link linkend="mailboxes">mailboxes</link></quote>
commands.
</para>
</sect2>

<sect2 id="imap-delim-chars">
<title>imap_delim_chars</title>
<literallayout>Type: string
Default: <quote><literal>/.</literal></quote></literallayout>

<para>
This contains the list of characters which you would like to treat
as folder separators for displaying IMAP paths. In particular it
helps in using the <quote>=</quote> shortcut for your <emphasis>folder</emphasis> variable.
</para>
</sect2>

<sect2 id="imap-headers">
<title>imap_headers</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Mutt requests these header fields in addition to the default headers
(<quote>Date:</quote>, <quote>From:</quote>, <quote>Subject:</quote>, <quote>To:</quote>, <quote>Cc:</quote>, <quote>Message-Id:</quote>,
<quote>References:</quote>, <quote>Content-Type:</quote>, <quote>Content-Description:</quote>, <quote>In-Reply-To:</quote>,
<quote>Reply-To:</quote>, <quote>Lines:</quote>, <quote>List-Post:</quote>, <quote>X-Label:</quote>) from IMAP
servers before displaying the index menu. You may want to add more
headers for spam detection.
</para>
<para>
<emphasis role="bold">Note:</emphasis> This is a space separated list, items should be uppercase
and not contain the colon, e.g. <quote>X-BOGOSITY X-SPAM-STATUS</quote> for the
<quote>X-Bogosity:</quote> and <quote>X-Spam-Status:</quote> header fields.
</para>
</sect2>

<sect2 id="imap-idle">
<title>imap_idle</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will attempt to use the IMAP IDLE extension
to check for new mail in the current mailbox. Some servers
(dovecot was the inspiration for this option) react badly
to mutt's implementation. If your connection seems to freeze
up periodically, try unsetting this.
</para>
</sect2>

<sect2 id="imap-keepalive">
<title>imap_keepalive</title>
<literallayout>Type: number
Default: 300</literallayout>

<para>
This variable specifies the maximum amount of time in seconds that mutt
will wait before polling open IMAP connections, to prevent the server
from closing them before mutt has finished with them. The default is
well within the RFC-specified minimum amount of time (30 minutes) before
a server is allowed to do this, but in practice the RFC does get
violated every now and then. Reduce this number if you find yourself
getting disconnected from your IMAP server due to inactivity.
</para>
</sect2>

<sect2 id="imap-list-subscribed">
<title>imap_list_subscribed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable configures whether IMAP folder browsing will look for
only subscribed folders or all folders.  This can be toggled in the
IMAP browser with the <literal>&lt;toggle-subscribed&gt;</literal> function.
</para>
</sect2>

<sect2 id="imap-login">
<title>imap_login</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your login name on the IMAP server.
</para>
<para>
This variable defaults to the value of <link linkend="imap-user">$imap_user</link>.
</para>
</sect2>

<sect2 id="imap-pass">
<title>imap_pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your IMAP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you invoke the <literal>&lt;imap-fetch-mail&gt;</literal> function
or try to open an IMAP folder.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="imap-passive">
<title>imap_passive</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will not open new IMAP connections to check for new
mail.  Mutt will only check for new mail over existing IMAP
connections.  This is useful if you don't want to be prompted to
user/password pairs on mutt invocation, or if opening the connection
is slow.
</para>
</sect2>

<sect2 id="imap-peek">
<title>imap_peek</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will avoid implicitly marking your mail as read whenever
you fetch a message from the server. This is generally a good thing,
but can make closing an IMAP folder somewhat slower. This option
exists to appease speed freaks.
</para>
</sect2>

<sect2 id="imap-pipeline-depth">
<title>imap_pipeline_depth</title>
<literallayout>Type: number
Default: 15</literallayout>

<para>
Controls the number of IMAP commands that may be queued up before they
are sent to the server. A deeper pipeline reduces the amount of time
mutt must wait for the server, and can make IMAP servers feel much
more responsive. But not all servers correctly handle pipelined commands,
so if you have problems you might want to try setting this variable to 0.
</para>
<para>
<emphasis role="bold">Note:</emphasis> Changes to this variable have no effect on open connections.
</para>
</sect2>

<sect2 id="imap-servernoise">
<title>imap_servernoise</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will display warning messages from the IMAP
server as error messages. Since these messages are often
harmless, or generated due to configuration problems on the
server which are out of the users' hands, you may wish to suppress
them at some point.
</para>
</sect2>

<sect2 id="imap-user">
<title>imap_user</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The name of the user whose mail you intend to access on the IMAP
server.
</para>
<para>
This variable defaults to your user name on the local machine.
</para>
</sect2>

<sect2 id="implicit-autoview">
<title>implicit_autoview</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If set to <quote>yes</quote>, mutt will look for a mailcap entry with the
<quote><literal>copiousoutput</literal></quote> flag set for <emphasis>every</emphasis> MIME attachment it doesn't have
an internal viewer defined for.  If such an entry is found, mutt will
use the viewer defined in that entry to convert the body part to text
form.
</para>
</sect2>

<sect2 id="include">
<title>include</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not a copy of the message(s) you are replying to
is included in your reply.
</para>
</sect2>

<sect2 id="include-onlyfirst">
<title>include_onlyfirst</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether or not Mutt includes only the first attachment
of the message you are replying.
</para>
</sect2>

<sect2 id="indent-string">
<title>indent_string</title>
<literallayout>Type: string
Default: <quote><literal>&gt; </literal></quote></literallayout>

<para>
Specifies the string to prepend to each line of text quoted in a
message to which you are replying.  You are strongly encouraged not to
change this value, as it tends to agitate the more fanatical netizens.
</para>
<para>
The value of this option is ignored if <link linkend="text-flowed">$text_flowed</link> is set, because
the quoting mechanism is strictly defined for format=flowed.
</para>
<para>
This option is a format string, please see the description of
<link linkend="index-format">$index_format</link> for supported <literal>printf(3)</literal>-style sequences.
</para>
</sect2>

<sect2 id="index-format">
<title>index_format</title>
<literallayout>Type: string
Default: <quote><literal>%4C %Z %{%b %d} %-15.15L (%?l?%4l&amp;%4c?) %s</literal></quote></literallayout>

<para>
This variable allows you to customize the message index display to
your personal taste.
</para>
<para>
<quote>Format strings</quote> are similar to the strings used in the C
function <literal>printf(3)</literal> to format output (see the man page for more details).
For an explanation of the %? construct, see the <link linkend="status-format">status_format</link> description.
The following sequences are defined in Mutt:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a </entry><entry>address of the author
</entry></row>
<row><entry>%A </entry><entry>reply-to address (if present; otherwise: address of author)
</entry></row>
<row><entry>%b </entry><entry>filename of the original message folder (think mailbox)
</entry></row>
<row><entry>%B </entry><entry>the list to which the letter was sent, or else the folder name (%b).
</entry></row>
<row><entry>%c </entry><entry>number of characters (bytes) in the message
</entry></row>
<row><entry>%C </entry><entry>current message number
</entry></row>
<row><entry>%d </entry><entry>date and time of the message in the format specified by
<link linkend="date-format">$date_format</link> converted to sender's time zone
</entry></row>
<row><entry>%D </entry><entry>date and time of the message in the format specified by
<link linkend="date-format">$date_format</link> converted to the local time zone
</entry></row>
<row><entry>%e </entry><entry>current message number in thread
</entry></row>
<row><entry>%E </entry><entry>number of messages in current thread
</entry></row>
<row><entry>%f </entry><entry>sender (address + real name), either From: or Return-Path:
</entry></row>
<row><entry>%F </entry><entry>author name, or recipient name if the message is from you
</entry></row>
<row><entry>%g </entry><entry>newsgroup name (if compiled with NNTP support)
</entry></row>
<row><entry>%g </entry><entry>message labels (e.g. notmuch tags)
</entry></row>
<row><entry>%H </entry><entry>spam attribute(s) of this message
</entry></row>
<row><entry>%I </entry><entry>initials of author
</entry></row>
<row><entry>%i </entry><entry>message-id of the current message
</entry></row>
<row><entry>%K </entry><entry>the list to which the letter was sent (if any; otherwise: empty).
</entry></row>
<row><entry>%l </entry><entry>number of lines in the message (does not work with maildir,
mh, and possibly IMAP folders)
</entry></row>
<row><entry>%L </entry><entry>If an address in the <quote>To:</quote> or <quote>Cc:</quote> header field matches an address
defined by the users <quote><link linkend="subscribe">subscribe</link></quote> command, this displays
"To &lt;list-name&gt;", otherwise the same as %F.
</entry></row>
<row><entry>%m </entry><entry>total number of message in the mailbox
</entry></row>
<row><entry>%M </entry><entry>number of hidden messages if the thread is collapsed.
</entry></row>
<row><entry>%N </entry><entry>message score
</entry></row>
<row><entry>%n </entry><entry>author's real name (or address if missing)
</entry></row>
<row><entry>%O </entry><entry>original save folder where mutt would formerly have
stashed the message: list name or recipient name
if not sent to a list
</entry></row>
<row><entry>%P </entry><entry>progress indicator for the built-in pager (how much of the file has been displayed)
</entry></row>
<row><entry>%q </entry><entry>newsgroup name (if compiled with NNTP support)
</entry></row>
<row><entry>%r </entry><entry>comma separated list of <quote>To:</quote> recipients
</entry></row>
<row><entry>%R </entry><entry>comma separated list of <quote>Cc:</quote> recipients
</entry></row>
<row><entry>%s </entry><entry>subject of the message
</entry></row>
<row><entry>%S </entry><entry>single character status of the message (<quote>N</quote>/<quote>O</quote>/<quote>D</quote>/<quote>d</quote>/<quote>!</quote>/<quote>r</quote>/<quote>*</quote>)
</entry></row>
<row><entry>%t </entry><entry><quote>To:</quote> field (recipients)
</entry></row>
<row><entry>%T </entry><entry>the appropriate character from the <link linkend="to-chars">$to_chars</link> string
</entry></row>
<row><entry>%u </entry><entry>user (login) name of the author
</entry></row>
<row><entry>%v </entry><entry>first name of the author, or the recipient if the message is from you
</entry></row>
<row><entry>%W </entry><entry>name of organization of author (<quote>Organization:</quote> field)
</entry></row>
<row><entry>%x </entry><entry><quote>X-Comment-To:</quote> field (if present and compiled with NNTP support)
</entry></row>
<row><entry>%X </entry><entry>number of attachments
(please see the <quote><link linkend="attachments">attachments</link></quote> section for possible speed effects)
</entry></row>
<row><entry>%y </entry><entry><quote>X-Label:</quote> field, if present
</entry></row>
<row><entry>%Y </entry><entry><quote>X-Label:</quote> field, if present, and <emphasis>(1)</emphasis> not at part of a thread tree,
<emphasis>(2)</emphasis> at the top of a thread, or <emphasis>(3)</emphasis> <quote>X-Label:</quote> is different from
preceding message's <quote>X-Label:</quote>.
</entry></row>
<row><entry>%Z </entry><entry>a three character set of message status flags.
the first character is new/read/replied flags (<quote>n</quote>/<quote>o</quote>/<quote>r</quote>/<quote>O</quote>/<quote>N</quote>).
the second is deleted or encryption flags (<quote>D</quote>/<quote>d</quote>/<quote>S</quote>/<quote>P</quote>/<quote>s</quote>/<quote>K</quote>).
the third is either tagged/flagged (<quote>*</quote>/<quote>!</quote>), or one of the characters
listed in <link linkend="to-chars">$to_chars</link>.
</entry></row>
<row><entry>%zs </entry><entry>message status flags
</entry></row>
<row><entry>%zc </entry><entry>message crypto flags
</entry></row>
<row><entry>%zt </entry><entry>message tag flags
</entry></row>
<row><entry>%{fmt} </entry><entry>the date and time of the message is converted to sender's
time zone, and <quote>fmt</quote> is expanded by the library function
<literal>strftime(3)</literal>; a leading bang disables locales
</entry></row>
<row><entry>%[fmt] </entry><entry>the date and time of the message is converted to the local
time zone, and <quote>fmt</quote> is expanded by the library function
<literal>strftime(3)</literal>; a leading bang disables locales
</entry></row>
<row><entry>%(fmt) </entry><entry>the local date and time when the message was received.
<quote>fmt</quote> is expanded by the library function <literal>strftime(3)</literal>;
a leading bang disables locales
</entry></row>
<row><entry>%&lt;fmt&gt; </entry><entry>the current local time. <quote>fmt</quote> is expanded by the library
function <literal>strftime(3)</literal>; a leading bang disables locales.
</entry></row>
<row><entry>%&gt;X    </entry><entry>right justify the rest of the string and pad with character <quote>X</quote>
</entry></row>
<row><entry>%|X    </entry><entry>pad to the end of the line with character <quote>X</quote>
</entry></row>
<row><entry>%*X    </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
Date format expressions can be constructed based on relative dates. Using
the date formatting operators along with nested conditionals, the date
format can be modified based on how old a message is.  See the section on
<quote>Conditional Dates</quote> for an explanation and examples
<quote>Soft-fill</quote> deserves some explanation: Normal right-justification
will print everything to the left of the <quote>%&gt;</quote>, displaying padding and
whatever lies to the right only if there's room. By contrast,
soft-fill gives priority to the right-hand side, guaranteeing space
to display it and showing padding only if there's still room. If
necessary, soft-fill will eat text leftwards to make room for
rightward text.
</para>
<para>
Note that these expandos are supported in
<quote><link linkend="save-hook">save-hook</link></quote>, <quote><link linkend="fcc-hook">fcc-hook</link></quote> and <quote><link linkend="fcc-save-hook">fcc-save-hook</link></quote>, too.
</para>
</sect2>

<sect2 id="inews">
<title>inews</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
If set, specifies the program and arguments used to deliver news posted
by Mutt.  Otherwise, mutt posts article using current connection to
news server.  The following printf-style sequence is understood:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a </entry><entry>account url
</entry></row>
<row><entry>%p </entry><entry>port
</entry></row>
<row><entry>%P </entry><entry>port if specified
</entry></row>
<row><entry>%s </entry><entry>news server name
</entry></row>
<row><entry>%S </entry><entry>url schema
</entry></row>
<row><entry>%u </entry><entry>username
</entry></row></tbody></tgroup></informaltable>

<para>
Example:

</para>

<screen>
set inews="/usr/local/bin/inews -hS"
</screen></sect2>

<sect2 id="ispell">
<title>ispell</title>
<literallayout>Type: path
Default: <quote><literal>/usr/bin/ispell</literal></quote></literallayout>

<para>
How to invoke ispell (GNU's spell-checking software).
</para>
</sect2>

<sect2 id="keep-flagged">
<title>keep_flagged</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, read messages marked as flagged will not be moved
from your spool mailbox to your <link linkend="mbox">$mbox</link> mailbox, or as a result of
a <quote><link linkend="mbox-hook">mbox-hook</link></quote> command.
</para>
</sect2>

<sect2 id="keywords-legacy">
<title>keywords_legacy</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, keywords/labels/tags will be written to whatever
legacy, nonstandard headers (X-Label, X-Keywords, X-Mozilla-Keys)
they were sourced from.
</para>
<para>
If both <quote><link linkend="keywords-legacy">$keywords_legacy</link></quote> and
<quote><link linkend="keywords-standard">$keywords_standard</link></quote> are <literal>false</literal>, mutt will save keywords
to legacy headers to ensure that it does not lose your labels.
</para>
</sect2>

<sect2 id="keywords-standard">
<title>keywords_standard</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, keywords/labels/tags will be written to the
RFC2822-standard Keywords: header; this may imply a conversion from
legacy headers.
</para>
<para>
If both <quote><link linkend="keywords-legacy">$keywords_legacy</link></quote> and
<quote><link linkend="keywords-standard">$keywords_standard</link></quote> are <literal>false</literal>, mutt will save keywords
to legacy headers to ensure that it does not lose your labels.
</para>
</sect2>

<sect2 id="mail-check">
<title>mail_check</title>
<literallayout>Type: number
Default: 5</literallayout>

<para>
This variable configures how often (in seconds) mutt should look for
new mail. Also see the <link linkend="feature/timeout">$timeout</link> variable.
</para>
</sect2>

<sect2 id="mail-check-recent">
<title>mail_check_recent</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will only notify you about new mail that has been received
since the last time you opened the mailbox.  When <emphasis>unset</emphasis>, Mutt will notify you
if any new mail exists in the mailbox, regardless of whether you have visited it
recently.
</para>
<para>
When <emphasis><link linkend="mark-old">$mark_old</link></emphasis> is set, Mutt does not consider the mailbox to contain new
mail if only old messages exist.
</para>
</sect2>

<sect2 id="mail-check-stats">
<title>mail_check_stats</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will periodically calculate message
statistics of a mailbox while polling for new mail.  It will
check for unread, flagged, and total message counts.  Because
this operation is more performance intensive, it defaults to
<emphasis>unset</emphasis>, and has a separate option, <link linkend="mail-check-stats-interval">$mail_check_stats_interval</link>, to
control how often to update these counts.
</para>
</sect2>

<sect2 id="mail-check-stats-interval">
<title>mail_check_stats_interval</title>
<literallayout>Type: number
Default: 60</literallayout>

<para>
When <link linkend="mail-check-stats">$mail_check_stats</link> is <emphasis>set</emphasis>, this variable configures
how often (in seconds) mutt will update message counts.
</para>
</sect2>

<sect2 id="mailcap-path">
<title>mailcap_path</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable specifies which files to consult when attempting to
display MIME bodies not directly supported by Mutt.
</para>
</sect2>

<sect2 id="mailcap-sanitize">
<title>mailcap_sanitize</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will restrict possible characters in mailcap % expandos
to a well-defined set of safe characters.  This is the safe setting,
but we are not sure it doesn't break some more advanced MIME stuff.
</para>
<para>
<emphasis role="bold">DON'T CHANGE THIS SETTING UNLESS YOU ARE REALLY SURE WHAT YOU ARE
DOING!</emphasis>
</para>
</sect2>

<sect2 id="maildir-header-cache-verify">
<title>maildir_header_cache_verify</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Check for Maildir unaware programs other than mutt having modified maildir
files when the header cache is in use.  This incurs one <literal>stat(2)</literal> per
message every time the folder is opened (which can be very slow for NFS
folders).
</para>
</sect2>

<sect2 id="maildir-trash">
<title>maildir_trash</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, messages marked as deleted will be saved with the maildir
trashed flag instead of unlinked.  <emphasis role="bold">Note:</emphasis> this only applies
to maildir-style mailboxes.  Setting it will have no effect on other
mailbox types.
</para>
</sect2>

<sect2 id="maildir-check-cur">
<title>maildir_check_cur</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will poll both the new and cur directories of
a maildir folder for new messages.  This might be useful if other
programs interacting with the folder (e.g. dovecot) are moving new
messages to the cur directory.  Note that setting this option may
slow down polling for new messages in large folders, since mutt has
to scan all cur messages.
</para>
</sect2>

<sect2 id="mark-macro-prefix">
<title>mark_macro_prefix</title>
<literallayout>Type: string
Default: <quote><literal>'</literal></quote></literallayout>

<para>
Prefix for macros created using mark-message.  A new macro
automatically generated with <emphasis>&lt;mark-message&gt;a</emphasis> will be composed
from this prefix and the letter <emphasis>a</emphasis>.
</para>
</sect2>

<sect2 id="mark-old">
<title>mark_old</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether or not mutt marks <emphasis>new</emphasis> <emphasis role="bold">unread</emphasis>
messages as <emphasis>old</emphasis> if you exit a mailbox without reading them.
With this option <emphasis>set</emphasis>, the next time you start mutt, the messages
will show up with an <quote>O</quote> next to them in the index menu,
indicating that they are old.
</para>
</sect2>

<sect2 id="markers">
<title>markers</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the display of wrapped lines in the internal pager. If set, a
<quote>+</quote> marker is displayed at the beginning of wrapped lines.
</para>
<para>
Also see the <link linkend="smart-wrap">$smart_wrap</link> variable.
</para>
</sect2>

<sect2 id="mask">
<title>mask</title>
<literallayout>Type: regular expression
Default: <quote><literal>!^\.[^.]</literal></quote></literallayout>

<para>
A regular expression used in the file browser, optionally preceded by
the <emphasis>not</emphasis> operator <quote>!</quote>.  Only files whose names match this mask
will be shown. The match is always case-sensitive.
</para>
</sect2>

<sect2 id="mbox">
<title>mbox</title>
<literallayout>Type: path
Default: <quote><literal>~/mbox</literal></quote></literallayout>

<para>
This specifies the folder into which read mail in your <link linkend="spoolfile">$spoolfile</link>
folder will be appended.
</para>
<para>
Also see the <link linkend="move">$move</link> variable.
</para>
</sect2>

<sect2 id="mbox-type">
<title>mbox_type</title>
<literallayout>Type: folder magic
Default: mbox</literallayout>

<para>
The default mailbox type used when creating new folders. May be any of
<quote>mbox</quote>, <quote>MMDF</quote>, <quote>MH</quote> and <quote>Maildir</quote>. This is overridden by the
<literal>-m</literal> command-line option.
</para>
</sect2>

<sect2 id="menu-context">
<title>menu_context</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the number of lines of context that are given
when scrolling through menus. (Similar to <link linkend="pager-context">$pager_context</link>.)
</para>
</sect2>

<sect2 id="menu-move-off">
<title>menu_move_off</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, the bottom entry of menus will never scroll up past
the bottom of the screen, unless there are less entries than lines.
When <emphasis>set</emphasis>, the bottom entry may move off the bottom.
</para>
</sect2>

<sect2 id="menu-scroll">
<title>menu_scroll</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, menus will be scrolled up or down one line when you
attempt to move across a screen boundary.  If <emphasis>unset</emphasis>, the screen
is cleared and the next or previous page of the menu is displayed
(useful for slow links to avoid many redraws).
</para>
</sect2>

<sect2 id="message-cache-clean">
<title>message_cache_clean</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will clean out obsolete entries from the message cache when
the mailbox is synchronized. You probably only want to set it
every once in a while, since it can be a little slow
(especially for large folders).
</para>
</sect2>

<sect2 id="message-cachedir">
<title>message_cachedir</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Set this to a directory and mutt will cache copies of messages from
your IMAP and POP servers here. You are free to remove entries at any
time.
</para>
<para>
When setting this variable to a directory, mutt needs to fetch every
remote message only once and can perform regular expression searches
as fast as for local folders.
</para>
<para>
Also see the <link linkend="message-cache-clean">$message_cache_clean</link> variable.
</para>
</sect2>

<sect2 id="message-format">
<title>message_format</title>
<literallayout>Type: string
Default: <quote><literal>%s</literal></quote></literallayout>

<para>
This is the string displayed in the <quote>attachment</quote> menu for
attachments of type <literal>message/rfc822</literal>.  For a full listing of defined
<literal>printf(3)</literal>-like sequences see the section on <link linkend="index-format">$index_format</link>.
</para>
</sect2>

<sect2 id="meta-key">
<title>meta_key</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, forces Mutt to interpret keystrokes with the high bit (bit 8)
set as if the user had pressed the Esc key and whatever key remains
after having the high bit removed.  For example, if the key pressed
has an ASCII value of <literal>0xf8</literal>, then this is treated as if the user had
pressed Esc then <quote>x</quote>.  This is because the result of removing the
high bit from <literal>0xf8</literal> is <literal>0x78</literal>, which is the ASCII character
<quote>x</quote>.
</para>
</sect2>

<sect2 id="metoo">
<title>metoo</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>unset</emphasis>, Mutt will remove your address (see the <quote><link linkend="alternates">alternates</link></quote>
command) from the list of recipients when replying to a message.
</para>
</sect2>

<sect2 id="mh-purge">
<title>mh_purge</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>unset</emphasis>, mutt will mimic mh's behavior and rename deleted messages
to <emphasis>,&lt;old file name&gt;</emphasis> in mh folders instead of really deleting
them. This leaves the message on disk but makes programs reading the folder
ignore it. If the variable is <emphasis>set</emphasis>, the message files will simply be
deleted.
</para>
<para>
This option is similar to <link linkend="maildir-trash">$maildir_trash</link> for Maildir folders.
</para>
</sect2>

<sect2 id="mh-seq-flagged">
<title>mh_seq_flagged</title>
<literallayout>Type: string
Default: <quote><literal>flagged</literal></quote></literallayout>

<para>
The name of the MH sequence used for flagged messages.
</para>
</sect2>

<sect2 id="mh-seq-replied">
<title>mh_seq_replied</title>
<literallayout>Type: string
Default: <quote><literal>replied</literal></quote></literallayout>

<para>
The name of the MH sequence used to tag replied messages.
</para>
</sect2>

<sect2 id="mh-seq-unseen">
<title>mh_seq_unseen</title>
<literallayout>Type: string
Default: <quote><literal>unseen</literal></quote></literallayout>

<para>
The name of the MH sequence used for unseen messages.
</para>
</sect2>

<sect2 id="mime-forward">
<title>mime_forward</title>
<literallayout>Type: quadoption
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the message you are forwarding will be attached as a
separate <literal>message/rfc822</literal> MIME part instead of included in the main body of the
message.  This is useful for forwarding MIME messages so the receiver
can properly view the message as it was delivered to you. If you like
to switch between MIME and not MIME from mail to mail, set this
variable to <quote>ask-no</quote> or <quote>ask-yes</quote>.
</para>
<para>
Also see <link linkend="forward-decode">$forward_decode</link> and <link linkend="mime-forward-decode">$mime_forward_decode</link>.
</para>
</sect2>

<sect2 id="mime-forward-decode">
<title>mime_forward_decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls the decoding of complex MIME messages into <literal>text/plain</literal> when
forwarding a message while <link linkend="mime-forward">$mime_forward</link> is <emphasis>set</emphasis>. Otherwise
<link linkend="forward-decode">$forward_decode</link> is used instead.
</para>
</sect2>

<sect2 id="mime-forward-rest">
<title>mime_forward_rest</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
When forwarding multiple attachments of a MIME message from the attachment
menu, attachments which cannot be decoded in a reasonable manner will
be attached to the newly composed message if this option is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="mime-subject">
<title>mime_subject</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>unset</emphasis>, 8-bit <quote>subject:</quote> line in article header will not be
encoded according to RFC2047 to base64.  This is useful when message
is Usenet article, because MIME for news is nonstandard feature.
</para>
</sect2>

<sect2 id="mix-entry-format">
<title>mix_entry_format</title>
<literallayout>Type: string
Default: <quote><literal>%4n %c %-16s %a</literal></quote></literallayout>

<para>
This variable describes the format of a remailer line on the mixmaster
chain selection screen.  The following <literal>printf(3)</literal>-like sequences are
supported:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%n </entry><entry>The running number on the menu.
</entry></row>
<row><entry>%c </entry><entry>Remailer capabilities.
</entry></row>
<row><entry>%s </entry><entry>The remailer's short name.
</entry></row>
<row><entry>%a </entry><entry>The remailer's e-mail address.
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="mixmaster">
<title>mixmaster</title>
<literallayout>Type: path
Default: <quote><literal>mixmaster</literal></quote></literallayout>

<para>
This variable contains the path to the Mixmaster binary on your
system.  It is used with various sets of parameters to gather the
list of known remailers, and to finally send a message through the
mixmaster chain.
</para>
</sect2>

<sect2 id="move">
<title>move</title>
<literallayout>Type: quadoption
Default: no</literallayout>

<para>
Controls whether or not Mutt will move read messages
from your spool mailbox to your <link linkend="mbox">$mbox</link> mailbox, or as a result of
a <quote><link linkend="mbox-hook">mbox-hook</link></quote> command.
</para>
</sect2>

<sect2 id="narrow-tree">
<title>narrow_tree</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable, when <emphasis>set</emphasis>, makes the thread tree narrower, allowing
deeper threads to fit on the screen.
</para>
</sect2>

<sect2 id="net-inc">
<title>net_inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
Operations that expect to transfer a large amount of data over the
network will update their progress every <link linkend="net-inc">$net_inc</link> kilobytes.
If set to 0, no progress messages will be displayed.
</para>
<para>
See also <link linkend="read-inc">$read_inc</link>, <link linkend="write-inc">$write_inc</link> and <link linkend="net-inc">$net_inc</link>.
</para>
</sect2>

<sect2 id="new-mail-command">
<title>new_mail_command</title>
<literallayout>Type: path
Default: <quote><literal>NULL</literal></quote></literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will call this command after a new message is received.
See the <link linkend="status-format">$status_format</link> documentation for the values that can be formatted
into this command.
</para>
</sect2>

<sect2 id="news-cache-dir">
<title>news_cache_dir</title>
<literallayout>Type: path
Default: <quote><literal>~/.mutt</literal></quote></literallayout>

<para>
This variable pointing to directory where Mutt will save cached news
articles and headers in. If <emphasis>unset</emphasis>, articles and headers will not be
saved at all and will be reloaded from the server each time.
</para>
</sect2>

<sect2 id="news-server">
<title>news_server</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable specifies domain name or address of NNTP server. It
defaults to the news server specified in the environment variable
$NNTPSERVER or contained in the file /etc/nntpserver.  You can also
specify username and an alternative port for each news server, ie:
</para>
<para>
[[s]news://][username[:password]@]server[:port]
</para>
</sect2>

<sect2 id="newsgroups-charset">
<title>newsgroups_charset</title>
<literallayout>Type: string
Default: <quote><literal>utf-8</literal></quote></literallayout>

<para>
Character set of newsgroups descriptions.
</para>
</sect2>

<sect2 id="newsrc">
<title>newsrc</title>
<literallayout>Type: path
Default: <quote><literal>~/.newsrc</literal></quote></literallayout>

<para>
The file, containing info about subscribed newsgroups - names and
indexes of read articles.  The following printf-style sequence
is understood:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a </entry><entry>account url
</entry></row>
<row><entry>%p </entry><entry>port
</entry></row>
<row><entry>%P </entry><entry>port if specified
</entry></row>
<row><entry>%s </entry><entry>news server name
</entry></row>
<row><entry>%S </entry><entry>url schema
</entry></row>
<row><entry>%u </entry><entry>username
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="nntp-authenticators">
<title>nntp_authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to a news server, in the order mutt should
try them.  Authentication methods are either <quote>user</quote> or any
SASL mechanism, e.g. <quote>digest-md5</quote>, <quote>gssapi</quote> or <quote>cram-md5</quote>.
This option is case-insensitive.  If it's <emphasis>unset</emphasis> (the default)
mutt will try all available methods, in order from most-secure to
least-secure.
</para>
<para>
Example:

</para>

<screen>
set nntp_authenticators="digest-md5:user"
</screen><para>
<emphasis role="bold">Note:</emphasis> Mutt will only fall back to other authentication methods if
the previous methods are unavailable. If a method is available but
authentication fails, mutt will not connect to the IMAP server.
</para>
</sect2>

<sect2 id="nntp-context">
<title>nntp_context</title>
<literallayout>Type: number
Default: 1000</literallayout>

<para>
This variable defines number of articles which will be in index when
newsgroup entered.  If active newsgroup have more articles than this
number, oldest articles will be ignored.  Also controls how many
articles headers will be saved in cache when you quit newsgroup.
</para>
</sect2>

<sect2 id="nntp-listgroup">
<title>nntp_listgroup</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not existence of each article is
checked when newsgroup is entered.
</para>
</sect2>

<sect2 id="nntp-load-description">
<title>nntp_load_description</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable controls whether or not descriptions for each newsgroup
must be loaded when newsgroup is added to list (first time list
loading or new newsgroup adding).
</para>
</sect2>

<sect2 id="nntp-user">
<title>nntp_user</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your login name on the NNTP server.  If <emphasis>unset</emphasis> and NNTP server requires
authentication, Mutt will prompt you for your account name when you
connect to news server.
</para>
</sect2>

<sect2 id="nntp-pass">
<title>nntp_pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your password for NNTP account.
</para>
</sect2>

<sect2 id="nntp-poll">
<title>nntp_poll</title>
<literallayout>Type: number
Default: 60</literallayout>

<para>
The time in seconds until any operations on newsgroup except post new
article will cause recheck for new news.  If set to 0, Mutt will
recheck newsgroup on each operation in index (stepping, read article,
etc.).
</para>
</sect2>

<sect2 id="pager">
<title>pager</title>
<literallayout>Type: path
Default: <quote><literal>builtin</literal></quote></literallayout>

<para>
This variable specifies which pager you would like to use to view
messages. The value <quote>builtin</quote> means to use the built-in pager, otherwise this
variable should specify the pathname of the external pager you would
like to use.
</para>
<para>
Using an external pager may have some disadvantages: Additional
keystrokes are necessary because you can't call mutt functions
directly from the pager, and screen resizes cause lines longer than
the screen width to be badly formatted in the help menu.
</para>
</sect2>

<sect2 id="pager-context">
<title>pager_context</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the number of lines of context that are given
when displaying the next or previous page in the internal pager.  By
default, Mutt will display the line after the last one on the screen
at the top of the next page (0 lines of context).
</para>
<para>
This variable also specifies the amount of context given for search
results. If positive, this many lines will be given before a match,
if 0, the match will be top-aligned.
</para>
</sect2>

<sect2 id="pager-format">
<title>pager_format</title>
<literallayout>Type: string
Default: <quote><literal>-%Z- %C/%m: %-20.20n   %s%*  -- (%P)</literal></quote></literallayout>

<para>
This variable controls the format of the one-line message <quote>status</quote>
displayed before each message in either the internal or an external
pager.  The valid sequences are listed in the <link linkend="index-format">$index_format</link>
section.
</para>
</sect2>

<sect2 id="pager-index-lines">
<title>pager_index_lines</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Determines the number of lines of a mini-index which is shown when in
the pager.  The current message, unless near the top or bottom of the
folder, will be roughly one third of the way down this mini-index,
giving the reader the context of a few messages before and after the
message.  This is useful, for example, to determine how many messages
remain to be read in the current thread.  One of the lines is reserved
for the status bar from the index, so a setting of 6
will only show 5 lines of the actual index.  A value of 0 results in
no index being shown.  If the number of messages in the current folder
is less than <link linkend="pager-index-lines">$pager_index_lines</link>, then the index will only use as
many lines as it needs.
</para>
</sect2>

<sect2 id="pager-stop">
<title>pager_stop</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the internal-pager will <emphasis role="bold">not</emphasis> move to the next message
when you are at the end of a message and invoke the <literal>&lt;next-page&gt;</literal>
function.
</para>
</sect2>

<sect2 id="pgp-auto-decode">
<title>pgp_auto_decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will automatically attempt to decrypt traditional PGP
messages whenever the user performs an operation which ordinarily would
result in the contents of the message being operated on.  For example,
if the user displays a pgp-traditional message which has not been manually
checked with the <literal><link linkend="check-traditional-pgp">&lt;check-traditional-pgp&gt;</link></literal> function, mutt will automatically
check the message for traditional pgp.
</para>
</sect2>

<sect2 id="pgp-autoinline">
<title>pgp_autoinline</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option controls whether Mutt generates old-style inline
(traditional) PGP encrypted or signed messages under certain
circumstances.  This can be overridden by use of the pgp menu,
when inline is not required.  The GPGME backend does not support
this option.
</para>
<para>
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
</para>
<para>
Also see the <link linkend="pgp-mime-auto">$pgp_mime_auto</link> variable.
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-check-exit">
<title>pgp_check_exit</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will check the exit code of the PGP subprocess when
signing or encrypting.  A non-zero exit code means that the
subprocess failed.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-clearsign-command">
<title>pgp_clearsign_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format is used to create an old-style <quote>clearsigned</quote> PGP
message.  Note that the use of this format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-decode-command">
<title>pgp_decode_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format strings specifies a command which is used to decode
application/pgp attachments.
</para>
<para>
The PGP command formats have their own set of <literal>printf(3)</literal>-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%p </entry><entry>Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
string otherwise. Note: This may be used with a %? construct.
</entry></row>
<row><entry>%f </entry><entry>Expands to the name of a file containing a message.
</entry></row>
<row><entry>%s </entry><entry>Expands to the name of a file containing the signature part
           of a <literal>multipart/signed</literal> attachment when verifying it.
</entry></row>
<row><entry>%a </entry><entry>The value of <link linkend="pgp-sign-as">$pgp_sign_as</link>.
</entry></row>
<row><entry>%r </entry><entry>One or more key IDs (or fingerprints if available).
</entry></row></tbody></tgroup></informaltable>

<para>
For examples on how to configure these formats for the various versions
of PGP which are floating around, see the pgp and gpg sample configuration files in
the <literal>samples/</literal> subdirectory which has been installed on your system
alongside the documentation.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-decrypt-command">
<title>pgp_decrypt_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to decrypt a PGP encrypted message.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-decryption-okay">
<title>pgp_decryption_okay</title>
<literallayout>Type: regular expression
Default: (empty)</literallayout>

<para>
If you assign text to this variable, then an encrypted PGP
message is only considered successfully decrypted if the output
from <link linkend="pgp-decrypt-command">$pgp_decrypt_command</link> contains the text.  This is used to
protect against a spoofed encrypted message, with multipart/encrypted
headers but containing a block that is not actually encrypted.
(e.g. simply signed and ascii armored text).
(PGP only)
</para>
</sect2>

<sect2 id="pgp-encrypt-only-command">
<title>pgp_encrypt_only_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to encrypt a body part without signing it.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-encrypt-sign-command">
<title>pgp_encrypt_sign_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to both sign and encrypt a body part.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-entry-format">
<title>pgp_entry_format</title>
<literallayout>Type: string
Default: <quote><literal>%4n %t%f %4l/0x%k %-4a %2c %u</literal></quote></literallayout>

<para>
This variable allows you to customize the PGP key selection menu to
your personal taste. This string is similar to <link linkend="index-format">$index_format</link>, but
has its own set of <literal>printf(3)</literal>-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%n     </entry><entry>number
</entry></row>
<row><entry>%k     </entry><entry>key id
</entry></row>
<row><entry>%u     </entry><entry>user id
</entry></row>
<row><entry>%a     </entry><entry>algorithm
</entry></row>
<row><entry>%l     </entry><entry>key length
</entry></row>
<row><entry>%p     </entry><entry>protocol
</entry></row>
<row><entry>%f     </entry><entry>flags
</entry></row>
<row><entry>%c     </entry><entry>capabilities
</entry></row>
<row><entry>%t     </entry><entry>trust/validity of the key-uid association
</entry></row>
<row><entry>%[&lt;s&gt;] </entry><entry>date of the key where &lt;s&gt; is an <literal>strftime(3)</literal> expression
</entry></row></tbody></tgroup></informaltable>

<para>
(PGP only)
</para>
</sect2>

<sect2 id="pgp-export-command">
<title>pgp_export_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to export a public key from the user's
key ring.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-getkeys-command">
<title>pgp_getkeys_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is invoked whenever Mutt needs to fetch the public key associated with
an email address.  Of the sequences supported by <link linkend="pgp-decode-command">$pgp_decode_command</link>, %r is
the only <literal>printf(3)</literal>-like sequence used with this format.  Note that
in this case, %r expands to the email address, not the public key ID (the key ID is
unknown, which is why Mutt is invoking this command).
(PGP only)
</para>
</sect2>

<sect2 id="pgp-good-sign">
<title>pgp_good_sign</title>
<literallayout>Type: regular expression
Default: (empty)</literallayout>

<para>
If you assign a text to this variable, then a PGP signature is only
considered verified if the output from <link linkend="pgp-verify-command">$pgp_verify_command</link> contains
the text. Use this variable if the exit code from the command is 0
even for bad signatures.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-ignore-subkeys">
<title>pgp_ignore_subkeys</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Setting this variable will cause Mutt to ignore OpenPGP subkeys. Instead,
the principal key will inherit the subkeys' capabilities.  <emphasis>Unset</emphasis> this
if you want to play interesting key selection games.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-import-command">
<title>pgp_import_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to import a key from a message into
the user's public key ring.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-list-pubring-command">
<title>pgp_list_pubring_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to list the public key ring's contents.  The
output format must be analogous to the one used by

</para>

<screen>
gpg --list-keys --with-colons --with-fingerprint
</screen><para>
This format is also generated by the <literal>pgpring</literal> utility which comes
with mutt.
</para>
<para>
Note: gpg's <literal>fixed-list-mode</literal> option should not be used.  It
produces a different date format which may result in mutt showing
incorrect key generation dates.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-list-secring-command">
<title>pgp_list_secring_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to list the secret key ring's contents.  The
output format must be analogous to the one used by:

</para>

<screen>
gpg --list-keys --with-colons --with-fingerprint
</screen><para>
This format is also generated by the <literal>pgpring</literal> utility which comes
with mutt.
</para>
<para>
Note: gpg's <literal>fixed-list-mode</literal> option should not be used.  It
produces a different date format which may result in mutt showing
incorrect key generation dates.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-long-ids">
<title>pgp_long_ids</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, use 64 bit PGP key IDs, if <emphasis>unset</emphasis> use the normal 32 bit key IDs.
NOTE: Internally, Mutt has transitioned to using fingerprints (or long key IDs
as a fallback).  This option now only controls the display of key IDs
in the key selection menu and a few other places.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-mime-auto">
<title>pgp_mime_auto</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
This option controls whether Mutt will prompt you for
automatically sending a (signed/encrypted) message using
PGP/MIME when inline (traditional) fails (for any reason).
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-replyinline">
<title>pgp_replyinline</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable will cause Mutt to always attempt to
create an inline (traditional) message when replying to a
message which is PGP encrypted/signed inline.  This can be
overridden by use of the pgp menu, when inline is not
required.  This option does not automatically detect if the
(replied-to) message is inline; instead it relies on Mutt
internals for previously checked/flagged messages.
</para>
<para>
Note that Mutt might automatically use PGP/MIME for messages
which consist of more than a single MIME part.  Mutt can be
configured to ask before sending PGP/MIME messages when inline
(traditional) would not work.
</para>
<para>
Also see the <link linkend="pgp-mime-auto">$pgp_mime_auto</link> variable.
</para>
<para>
Also note that using the old-style PGP message format is <emphasis role="bold">strongly</emphasis>
<emphasis role="bold">deprecated</emphasis>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-retainable-sigs">
<title>pgp_retainable_sigs</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, signed and encrypted messages will consist of nested
<literal>multipart/signed</literal> and <literal>multipart/encrypted</literal> body parts.
</para>
<para>
This is useful for applications like encrypted and signed mailing
lists, where the outer layer (<literal>multipart/encrypted</literal>) can be easily
removed, while the inner <literal>multipart/signed</literal> part is retained.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-self-encrypt">
<title>pgp_self_encrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, PGP encrypted messages will also be encrypted
using the key in <link linkend="pgp-self-encrypt-as">$pgp_self_encrypt_as</link>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-self-encrypt-as">
<title>pgp_self_encrypt_as</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is an additional key used to encrypt messages when <link linkend="pgp-self-encrypt">$pgp_self_encrypt</link>
is <emphasis>set</emphasis>.  It is also used to specify the key for <link linkend="postpone-encrypt">$postpone_encrypt</link>.
It should be in keyid or fingerprint form (e.g. 0x00112233).
(PGP only)
</para>
</sect2>

<sect2 id="pgp-show-unusable">
<title>pgp_show_unusable</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will display non-usable keys on the PGP key selection
menu.  This includes keys which have been revoked, have expired, or
have been marked as <quote>disabled</quote> by the user.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sign-as">
<title>pgp_sign_as</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
If you have more than one key pair, this option allows you to specify
which of your private keys to use.  It is recommended that you use the
keyid form to specify your key (e.g. <literal>0x00112233</literal>).
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sign-command">
<title>pgp_sign_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to create the detached PGP signature for a
<literal>multipart/signed</literal> PGP/MIME body part.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-sort-keys">
<title>pgp_sort_keys</title>
<literallayout>Type: sort order
Default: address</literallayout>

<para>
Specifies how the entries in the pgp menu are sorted. The
following are legal values:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>address </entry><entry>sort alphabetically by user id
</entry></row>
<row><entry>keyid   </entry><entry>sort alphabetically by key id
</entry></row>
<row><entry>date    </entry><entry>sort by key creation date
</entry></row>
<row><entry>trust   </entry><entry>sort by the trust of the key
</entry></row></tbody></tgroup></informaltable>

<para>
If you prefer reverse order of the above values, prefix it with
<quote>reverse-</quote>.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-strict-enc">
<title>pgp_strict_enc</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will automatically encode PGP/MIME signed messages as
quoted-printable.  Please note that unsetting this variable may
lead to problems with non-verifyable PGP signatures, so only change
this if you know what you are doing.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-timeout">
<title>pgp_timeout</title>
<literallayout>Type: number
Default: 300</literallayout>

<para>
The number of seconds after which a cached passphrase will expire if
not used.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-use-gpg-agent">
<title>pgp_use_gpg_agent</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will use a possibly-running <literal>gpg-agent(1)</literal> process.
Note that as of version 2.1, GnuPG no longer exports GPG_AGENT_INFO, so
mutt no longer verifies if the agent is running.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-verify-command">
<title>pgp_verify_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify PGP signatures.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pgp-verify-key-command">
<title>pgp_verify_key_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify key information from the key selection
menu.
</para>
<para>
This is a format string, see the <link linkend="pgp-decode-command">$pgp_decode_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(PGP only)
</para>
</sect2>

<sect2 id="pipe-decode">
<title>pipe_decode</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;pipe-message&gt;</literal> command.  When <emphasis>unset</emphasis>,
Mutt will pipe the messages without any preprocessing. When <emphasis>set</emphasis>, Mutt
will weed headers and will attempt to decode the messages
first.
</para>
</sect2>

<sect2 id="pipe-sep">
<title>pipe_sep</title>
<literallayout>Type: string
Default: <quote><literal>\n</literal></quote></literallayout>

<para>
The separator to add between messages when piping a list of tagged
messages to an external Unix command.
</para>
</sect2>

<sect2 id="pipe-split">
<title>pipe_split</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;pipe-message&gt;</literal> function following
<literal>&lt;tag-prefix&gt;</literal>.  If this variable is <emphasis>unset</emphasis>, when piping a list of
tagged messages Mutt will concatenate the messages and will pipe them
all concatenated.  When <emphasis>set</emphasis>, Mutt will pipe the messages one by one.
In both cases the messages are piped in the current sorted order,
and the <link linkend="pipe-sep">$pipe_sep</link> separator is added after each message.
</para>
</sect2>

<sect2 id="pop-auth-try-all">
<title>pop_auth_try_all</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will try all available authentication methods.
When <emphasis>unset</emphasis>, Mutt will only fall back to other authentication
methods if the previous methods are unavailable. If a method is
available but authentication fails, Mutt will not connect to the POP server.
</para>
</sect2>

<sect2 id="pop-authenticators">
<title>pop_authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an POP server, in the order mutt should
try them.  Authentication methods are either <quote>user</quote>, <quote>apop</quote> or any
SASL mechanism, e.g. <quote>digest-md5</quote>, <quote>gssapi</quote> or <quote>cram-md5</quote>.
This option is case-insensitive. If this option is <emphasis>unset</emphasis>
(the default) mutt will try all available methods, in order from
most-secure to least-secure.
</para>
<para>
Example:

</para>

<screen>
set pop_authenticators="digest-md5:apop:user"
</screen></sect2>

<sect2 id="pop-checkinterval">
<title>pop_checkinterval</title>
<literallayout>Type: number
Default: 60</literallayout>

<para>
This variable configures how often (in seconds) mutt should look for
new mail in the currently selected mailbox if it is a POP mailbox.
</para>
</sect2>

<sect2 id="pop-delete">
<title>pop_delete</title>
<literallayout>Type: quadoption
Default: ask-no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will delete successfully downloaded messages from the POP
server when using the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.  When <emphasis>unset</emphasis>, Mutt will
download messages but also leave them on the POP server.
</para>
</sect2>

<sect2 id="pop-host">
<title>pop_host</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The name of your POP server for the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.  You
can also specify an alternative port, username and password, i.e.:

</para>

<screen>
[pop[s]://][username[:password]@]popserver[:port]
</screen><para>
where <quote>[...]</quote> denotes an optional part.
</para>
</sect2>

<sect2 id="pop-last">
<title>pop_last</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If this variable is <emphasis>set</emphasis>, mutt will try to use the <quote><literal>LAST</literal></quote> POP command
for retrieving only unread messages from the POP server when using
the <literal><link linkend="fetch-mail">&lt;fetch-mail&gt;</link></literal> function.
</para>
</sect2>

<sect2 id="pop-pass">
<title>pop_pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your POP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you open a POP mailbox.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc
even if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="pop-reconnect">
<title>pop_reconnect</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not Mutt will try to reconnect to the POP server if
the connection is lost.
</para>
</sect2>

<sect2 id="pop-user">
<title>pop_user</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Your login name on the POP server.
</para>
<para>
This variable defaults to your user name on the local machine.
</para>
</sect2>

<sect2 id="post-indent-string">
<title>post_indent_string</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Similar to the <link linkend="attribution">$attribution</link> variable, Mutt will append this
string after the inclusion of a message which is being replied to.
</para>
</sect2>

<sect2 id="post-moderated">
<title>post_moderated</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, Mutt will post article to newsgroup that have
not permissions to posting (e.g. moderated).  <emphasis role="bold">Note:</emphasis> if news server
does not support posting to that newsgroup or totally read-only, that
posting will not have an effect.
</para>
</sect2>

<sect2 id="postpone">
<title>postpone</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not messages are saved in the <link linkend="postponed">$postponed</link>
mailbox when you elect not to send immediately.
</para>
<para>
Also see the <link linkend="recall">$recall</link> variable.
</para>
</sect2>

<sect2 id="postponed">
<title>postponed</title>
<literallayout>Type: path
Default: <quote><literal>~/postponed</literal></quote></literallayout>

<para>
Mutt allows you to indefinitely <quote><link linkend="postpone">postpone</link> sending a message</quote> which
you are editing.  When you choose to postpone a message, Mutt saves it
in the mailbox specified by this variable.
</para>
<para>
Also see the <link linkend="postpone">$postpone</link> variable.
</para>
</sect2>

<sect2 id="postpone-encrypt">
<title>postpone_encrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, postponed messages that are marked for encryption will be
self-encrypted.  Mutt will first try to encrypt using the value specified
in <link linkend="pgp-self-encrypt-as">$pgp_self_encrypt_as</link> or <link linkend="smime-self-encrypt-as">$smime_self_encrypt_as</link>.  If those are not
set, it will try the deprecated <link linkend="postpone-encrypt-as">$postpone_encrypt_as</link>.
(Crypto only)
</para>
</sect2>

<sect2 id="postpone-encrypt-as">
<title>postpone_encrypt_as</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a deprecated fall-back variable for <link linkend="postpone-encrypt">$postpone_encrypt</link>.
Please use <link linkend="pgp-self-encrypt-as">$pgp_self_encrypt_as</link> or <link linkend="smime-self-encrypt-as">$smime_self_encrypt_as</link>.
(Crypto only)
</para>
</sect2>

<sect2 id="preconnect">
<title>preconnect</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
If <emphasis>set</emphasis>, a shell command to be executed if mutt fails to establish
a connection to the server. This is useful for setting up secure
connections, e.g. with <literal>ssh(1)</literal>. If the command returns a  nonzero
status, mutt gives up opening the server. Example:

</para>

<screen>
set preconnect="ssh -f -q -L 1234:mailhost.net:143 mailhost.net \
sleep 20 &lt; /dev/null &gt; /dev/null"
</screen><para>
Mailbox <quote>foo</quote> on <quote>mailhost.net</quote> can now be reached
as <quote>{localhost:1234}foo</quote>.
</para>
<para>
Note: For this example to work, you must be able to log in to the
remote machine without having to enter a password.
</para>
</sect2>

<sect2 id="print">
<title>print</title>
<literallayout>Type: quadoption
Default: ask-no</literallayout>

<para>
Controls whether or not Mutt really prints messages.
This is set to <quote>ask-no</quote> by default, because some people
accidentally hit <quote>p</quote> often.
</para>
</sect2>

<sect2 id="print-command">
<title>print_command</title>
<literallayout>Type: path
Default: <quote><literal>lpr</literal></quote></literallayout>

<para>
This specifies the command pipe that should be used to print messages.
</para>
</sect2>

<sect2 id="print-decode">
<title>print_decode</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Used in connection with the <literal>&lt;print-message&gt;</literal> command.  If this
option is <emphasis>set</emphasis>, the message is decoded before it is passed to the
external command specified by <link linkend="print-command">$print_command</link>.  If this option
is <emphasis>unset</emphasis>, no processing will be applied to the message when
printing it.  The latter setting may be useful if you are using
some advanced printer filter which is able to properly format
e-mail messages for printing.
</para>
</sect2>

<sect2 id="print-split">
<title>print_split</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Used in connection with the <literal>&lt;print-message&gt;</literal> command.  If this option
is <emphasis>set</emphasis>, the command specified by <link linkend="print-command">$print_command</link> is executed once for
each message which is to be printed.  If this option is <emphasis>unset</emphasis>,
the command specified by <link linkend="print-command">$print_command</link> is executed only once, and
all the messages are concatenated, with a form feed as the message
separator.
</para>
<para>
Those who use the <literal>enscript</literal>(1) program's mail-printing mode will
most likely want to <emphasis>set</emphasis> this option.
</para>
</sect2>

<sect2 id="prompt-after">
<title>prompt_after</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If you use an <emphasis>external</emphasis> <link linkend="pager">$pager</link>, setting this variable will
cause Mutt to prompt you for a command when the pager exits rather
than returning to the index menu.  If <emphasis>unset</emphasis>, Mutt will return to the
index menu when the external pager exits.
</para>
</sect2>

<sect2 id="query-command">
<title>query_command</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This specifies the command Mutt will use to make external address
queries.  The string may contain a <quote>%s</quote>, which will be substituted
with the query string the user types.  Mutt will add quotes around the
string substituted for <quote>%s</quote> automatically according to shell quoting
rules, so you should avoid adding your own.  If no <quote>%s</quote> is found in
the string, Mutt will append the user's query to the end of the string.
See <quote><link linkend="query">query</link></quote> for more information.
</para>
</sect2>

<sect2 id="query-format">
<title>query_format</title>
<literallayout>Type: string
Default: <quote><literal>%4c %t %-25.25a %-25.25n %?e?(%e)?</literal></quote></literallayout>

<para>
This variable describes the format of the <quote>query</quote> menu. The
following <literal>printf(3)</literal>-style sequences are understood:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%a  </entry><entry>destination address
</entry></row>
<row><entry>%c  </entry><entry>current entry number
</entry></row>
<row><entry>%e  </entry><entry>extra information *
</entry></row>
<row><entry>%n  </entry><entry>destination name
</entry></row>
<row><entry>%t  </entry><entry><quote>*</quote> if current entry is tagged, a space otherwise
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with <quote>X</quote>
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with <quote>X</quote>
</entry></row>
<row><entry>%*X </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">$index_format</link> documentation.
</para>
<para>
* = can be optionally printed if nonzero, see the <link linkend="status-format">$status_format</link> documentation.
</para>
</sect2>

<sect2 id="quit">
<title>quit</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
This variable controls whether <quote>quit</quote> and <quote>exit</quote> actually quit
from mutt.  If this option is <emphasis>set</emphasis>, they do quit, if it is <emphasis>unset</emphasis>, they
have no effect, and if it is set to <emphasis>ask-yes</emphasis> or <emphasis>ask-no</emphasis>, you are
prompted for confirmation when you try to quit.
</para>
</sect2>

<sect2 id="quote-regexp">
<title>quote_regexp</title>
<literallayout>Type: regular expression
Default: <quote><literal>^([ \t]*[|&gt;:}#])+</literal></quote></literallayout>

<para>
A regular expression used in the internal pager to determine quoted
sections of text in the body of a message. Quoted text may be filtered
out using the <literal>&lt;toggle-quoted&gt;</literal> command, or colored according to the
<quote>color quoted</quote> family of directives.
</para>
<para>
Higher levels of quoting may be colored differently (<quote>color quoted1</quote>,
<quote>color quoted2</quote>, etc.). The quoting level is determined by removing
the last character from the matched text and recursively reapplying
the regular expression until it fails to produce a match.
</para>
<para>
Match detection may be overridden by the <link linkend="smileys">$smileys</link> regular expression.
</para>
</sect2>

<sect2 id="read-inc">
<title>read_inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
If set to a value greater than 0, Mutt will display which message it
is currently on when reading a mailbox or when performing search actions
such as search and limit. The message is printed after
this many messages have been read or searched (e.g., if set to 25, Mutt will
print a message when it is at message 25, and then again when it gets
to message 50).  This variable is meant to indicate progress when
reading or searching large mailboxes which may take some time.
When set to 0, only a single message will appear before the reading
the mailbox.
</para>
<para>
Also see the <link linkend="write-inc">$write_inc</link>, <link linkend="net-inc">$net_inc</link> and <link linkend="time-inc">$time_inc</link> variables and the
<quote><link linkend="guide/tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="read-only">
<title>read_only</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, all folders are opened in read-only mode.
</para>
</sect2>

<sect2 id="realname">
<title>realname</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This variable specifies what <quote>real</quote> or <quote>personal</quote> name should be used
when sending messages.
</para>
<para>
By default, this is the GECOS field from <literal>/etc/passwd</literal>.  Note that this
variable will <emphasis>not</emphasis> be used when the user has set a real name
in the <link linkend="from">$from</link> variable.
</para>
</sect2>

<sect2 id="recall">
<title>recall</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
Controls whether or not Mutt recalls postponed messages
when composing a new message.
</para>
<para>
Setting this variable to <emphasis>yes</emphasis> is not generally useful, and thus not
recommended.  Note that the <literal>&lt;recall-message&gt;</literal> function can be used
to manually recall postponed messages.
</para>
<para>
Also see <link linkend="postponed">$postponed</link> variable.
</para>
</sect2>

<sect2 id="record">
<title>record</title>
<literallayout>Type: path
Default: <quote><literal>~/sent</literal></quote></literallayout>

<para>
This specifies the file into which your outgoing messages should be
appended.  (This is meant as the primary method for saving a copy of
your messages, but another way to do this is using the <quote><link linkend="my-hdr">my_hdr</link></quote>
command to create a <quote>Bcc:</quote> field with your email address in it.)
</para>
<para>
The value of <emphasis><link linkend="record">$record</link></emphasis> is overridden by the <link linkend="force-name">$force_name</link> and
<link linkend="save-name">$save_name</link> variables, and the <quote><link linkend="fcc-hook">fcc-hook</link></quote> command.
</para>
</sect2>

<sect2 id="reflow-space-quotes">
<title>reflow_space_quotes</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This option controls how quotes from format=flowed messages are displayed
in the pager and when replying (with <link linkend="text-flowed">$text_flowed</link> <emphasis>unset</emphasis>).
When set, this option adds spaces after each level of quote marks, turning
"&gt;&gt;&gt;foo" into "&gt; &gt; &gt; foo".
</para>
<para>
<emphasis role="bold">Note:</emphasis> If <link linkend="reflow-text">$reflow_text</link> is <emphasis>unset</emphasis>, this option has no effect.
Also, this option does not affect replies when <link linkend="text-flowed">$text_flowed</link> is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="reflow-text">
<title>reflow_text</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will reformat paragraphs in text/plain
parts marked format=flowed.  If <emphasis>unset</emphasis>, Mutt will display paragraphs
unaltered from how they appear in the message body.  See RFC3676 for
details on the <emphasis>format=flowed</emphasis> format.
</para>
<para>
Also see <link linkend="reflow-wrap">$reflow_wrap</link>, and <link linkend="wrap">$wrap</link>.
</para>
</sect2>

<sect2 id="reflow-wrap">
<title>reflow_wrap</title>
<literallayout>Type: number
Default: 78</literallayout>

<para>
This variable controls the maximum paragraph width when reformatting text/plain
parts when <link linkend="reflow-text">$reflow_text</link> is <emphasis>set</emphasis>.  When the value is 0, paragraphs will
be wrapped at the terminal's right margin.  A positive value sets the
paragraph width relative to the left margin.  A negative value set the
paragraph width relative to the right margin.
</para>
<para>
Also see <link linkend="wrap">$wrap</link>.
</para>
</sect2>

<sect2 id="reply-regexp">
<title>reply_regexp</title>
<literallayout>Type: regular expression
Default: <quote><literal>^(re([\[0-9\]+])*|aw):[ \t]*</literal></quote></literallayout>

<para>
A regular expression used to recognize reply messages when threading
and replying. The default value corresponds to the English "Re:" and
the German "Aw:".
</para>
</sect2>

<sect2 id="reply-self">
<title>reply_self</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>unset</emphasis> and you are replying to a message sent by you, Mutt will
assume that you want to reply to the recipients of that message rather
than to yourself.
</para>
<para>
Also see the <quote><link linkend="alternates">alternates</link></quote> command.
</para>
</sect2>

<sect2 id="reply-to">
<title>reply_to</title>
<literallayout>Type: quadoption
Default: ask-yes</literallayout>

<para>
If <emphasis>set</emphasis>, when replying to a message, Mutt will use the address listed
in the Reply-to: header as the recipient of the reply.  If <emphasis>unset</emphasis>,
it will use the address in the From: header field instead.  This
option is useful for reading a mailing list that sets the Reply-To:
header field to the list address and you want to send a private
message to the author of a message.
</para>
</sect2>

<sect2 id="reply-with-xorig">
<title>reply_with_xorig</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable provides a toggle. When active, the From: header will be
extracted from the current mail's `X-Original-To:' header. This setting
does not have precedence over <quote><link linkend="reverse-realname">reverse_realname</link></quote>.
</para>
<para>
Assuming `fast_reply' is disabled, this option will prompt the user with a
prefilled From: header.
</para>
</sect2>

<sect2 id="resolve">
<title>resolve</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, the cursor will be automatically advanced to the next
(possibly undeleted) message whenever a command that modifies the
current message is executed.
</para>
</sect2>

<sect2 id="resume-draft-files">
<title>resume_draft_files</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, draft files (specified by <literal>-H</literal> on the command
line) are processed similarly to when resuming a postponed
message.  Recipients are not prompted for; send-hooks are not
evaluated; no alias expansion takes place; user-defined headers
and signatures are not added to the message.
</para>
</sect2>

<sect2 id="resume-edited-draft-files">
<title>resume_edited_draft_files</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, draft files previously edited (via <literal>-E -H</literal> on
the command line) will have <link linkend="resume-draft-files">$resume_draft_files</link> automatically
set when they are used as a draft file again.
</para>
<para>
The first time a draft file is saved, mutt will add a header,
X-Mutt-Resume-Draft to the saved file.  The next time the draft
file is read in, if mutt sees the header, it will set
<link linkend="resume-draft-files">$resume_draft_files</link>.
</para>
<para>
This option is designed to prevent multiple signatures,
user-defined headers, and other processing effects from being
made multiple times to the draft file.
</para>
</sect2>

<sect2 id="reverse-alias">
<title>reverse_alias</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls whether or not Mutt will display the <quote>personal</quote>
name from your aliases in the index menu if it finds an alias that
matches the message's sender.  For example, if you have the following
alias:

</para>

<screen>
alias juser abd30425@somewhere.net (Joe User)
</screen><para>
and then you receive mail which contains the following header:

</para>

<screen>
From: abd30425@somewhere.net
</screen><para>
It would be displayed in the index menu as <quote>Joe User</quote> instead of
<quote>abd30425@somewhere.net.</quote>  This is useful when the person's e-mail
address is not human friendly.
</para>
</sect2>

<sect2 id="reverse-name">
<title>reverse_name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
It may sometimes arrive that you receive mail to a certain machine,
move the messages to another machine, and reply to some the messages
from there.  If this variable is <emphasis>set</emphasis>, the default <emphasis>From:</emphasis> line of
the reply messages is built using the address where you received the
messages you are replying to <emphasis role="bold">if</emphasis> that address matches your
<quote><link linkend="alternates">alternates</link></quote>.  If the variable is <emphasis>unset</emphasis>, or the address that would be
used doesn't match your <quote><link linkend="alternates">alternates</link></quote>, the <emphasis>From:</emphasis> line will use
your address on the current machine.
</para>
<para>
Also see the <quote><link linkend="alternates">alternates</link></quote> command.
</para>
</sect2>

<sect2 id="reverse-realname">
<title>reverse_realname</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable fine-tunes the behavior of the <link linkend="reverse-name">$reverse_name</link> feature.
When it is <emphasis>set</emphasis>, mutt will use the address from incoming messages as-is,
possibly including eventual real names.  When it is <emphasis>unset</emphasis>, mutt will
override any such real names with the setting of the <link linkend="realname">$realname</link> variable.
</para>
</sect2>

<sect2 id="rfc2047-parameters">
<title>rfc2047_parameters</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When this variable is <emphasis>set</emphasis>, Mutt will decode RFC2047-encoded MIME
parameters. You want to set this variable when mutt suggests you
to save attachments to files named like:

</para>

<screen>
=?iso-8859-1?Q?file=5F=E4=5F991116=2Ezip?=
</screen><para>
When this variable is <emphasis>set</emphasis> interactively, the change won't be
active until you change folders.
</para>
<para>
Note that this use of RFC2047's encoding is explicitly
prohibited by the standard, but nevertheless encountered in the
wild.
</para>
<para>
Also note that setting this parameter will <emphasis>not</emphasis> have the effect
that mutt <emphasis>generates</emphasis> this kind of encoding.  Instead, mutt will
unconditionally use the encoding specified in RFC2231.
</para>
</sect2>

<sect2 id="save-address">
<title>save_address</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, mutt will take the sender's full address when choosing a
default folder for saving a mail. If <link linkend="save-name">$save_name</link> or <link linkend="force-name">$force_name</link>
is <emphasis>set</emphasis> too, the selection of the Fcc folder will be changed as well.
</para>
</sect2>

<sect2 id="save-empty">
<title>save_empty</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, mailboxes which contain no saved messages will be removed
when closed (the exception is <link linkend="spoolfile">$spoolfile</link> which is never removed).
If <emphasis>set</emphasis>, mailboxes are never removed.
</para>
<para>
<emphasis role="bold">Note:</emphasis> This only applies to mbox and MMDF folders, Mutt does not
delete MH and Maildir directories.
</para>
</sect2>

<sect2 id="save-history">
<title>save_history</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable controls the size of the history (per category) saved in the
<link linkend="history-file">$history_file</link> file.
</para>
</sect2>

<sect2 id="save-name">
<title>save_name</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable controls how copies of outgoing messages are saved.
When <emphasis>set</emphasis>, a check is made to see if a mailbox specified by the
recipient address exists (this is done by searching for a mailbox in
the <link linkend="folder">$folder</link> directory with the <emphasis>username</emphasis> part of the
recipient address).  If the mailbox exists, the outgoing message will
be saved to that mailbox, otherwise the message is saved to the
<link linkend="record">$record</link> mailbox.
</para>
<para>
Also see the <link linkend="force-name">$force_name</link> variable.
</para>
</sect2>

<sect2 id="score">
<title>score</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When this variable is <emphasis>unset</emphasis>, scoring is turned off.  This can
be useful to selectively disable scoring for certain folders when the
<link linkend="score-threshold-delete">$score_threshold_delete</link> variable and related are used.
</para>
</sect2>

<sect2 id="score-threshold-delete">
<title>score_threshold_delete</title>
<literallayout>Type: number
Default: -1</literallayout>

<para>
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked for deletion by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message for deletion.
</para>
</sect2>

<sect2 id="score-threshold-flag">
<title>score_threshold_flag</title>
<literallayout>Type: number
Default: 9999</literallayout>

<para>
Messages which have been assigned a score greater than or equal to this
variable's value are automatically marked "flagged".
</para>
</sect2>

<sect2 id="score-threshold-read">
<title>score_threshold_read</title>
<literallayout>Type: number
Default: -1</literallayout>

<para>
Messages which have been assigned a score equal to or lower than the value
of this variable are automatically marked as read by mutt.  Since
mutt scores are always greater than or equal to zero, the default setting
of this variable will never mark a message read.
</para>
</sect2>

<sect2 id="search-context">
<title>search_context</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
For the pager, this variable specifies the number of lines shown
before search results. By default, search results will be top-aligned.
</para>
</sect2>

<sect2 id="send-charset">
<title>send_charset</title>
<literallayout>Type: string
Default: <quote><literal>us-ascii:iso-8859-1:utf-8</literal></quote></literallayout>

<para>
A colon-delimited list of character sets for outgoing messages. Mutt will use the
first character set into which the text can be converted exactly.
If your <link linkend="charset">$charset</link> is not <quote>iso-8859-1</quote> and recipients may not
understand <quote>UTF-8</quote>, it is advisable to include in the list an
appropriate widely used standard character set (such as
<quote>iso-8859-2</quote>, <quote>koi8-r</quote> or <quote>iso-2022-jp</quote>) either instead of or after
<quote>iso-8859-1</quote>.
</para>
<para>
In case the text cannot be converted into one of these exactly,
mutt uses <link linkend="charset">$charset</link> as a fallback.
</para>
</sect2>

<sect2 id="sendmail">
<title>sendmail</title>
<literallayout>Type: path
Default: <quote><literal>/usr/sbin/sendmail -oem -oi</literal></quote></literallayout>

<para>
Specifies the program and arguments used to deliver mail sent by Mutt.
Mutt expects that the specified program interprets additional
arguments as recipient addresses.  Mutt appends all recipients after
adding a <literal>--</literal> delimiter (if not already present).  Additional
flags, such as for <link linkend="use-8bitmime">$use_8bitmime</link>, <link linkend="use-envelope-from">$use_envelope_from</link>,
<link linkend="dsn-notify">$dsn_notify</link>, or <link linkend="dsn-return">$dsn_return</link> will be added before the delimiter.
</para>
</sect2>

<sect2 id="sendmail-wait">
<title>sendmail_wait</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Specifies the number of seconds to wait for the <link linkend="sendmail">$sendmail</link> process
to finish before giving up and putting delivery in the background.
</para>
<para>
Mutt interprets the value of this variable as follows:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>&gt;0 </entry><entry>number of seconds to wait for sendmail to finish before continuing
</entry></row>
<row><entry>0  </entry><entry>wait forever for sendmail to finish
</entry></row>
<row><entry>&lt;0 </entry><entry>always put sendmail in the background without waiting
</entry></row></tbody></tgroup></informaltable>

<para>
Note that if you specify a value other than 0, the output of the child
process will be put in a temporary file.  If there is some error, you
will be informed as to where to find the output.
</para>
</sect2>

<sect2 id="shell">
<title>shell</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Command to use when spawning a subshell.  By default, the user's login
shell from <literal>/etc/passwd</literal> is used.
</para>
</sect2>

<sect2 id="save-unsubscribed">
<title>save_unsubscribed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, info about unsubscribed newsgroups will be saved into
<quote>newsrc</quote> file and into cache.
</para>
</sect2>

<sect2 id="show-new-news">
<title>show_new_news</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, news server will be asked for new newsgroups on entering
the browser.  Otherwise, it will be done only once for a news server.
Also controls whether or not number of new articles of subscribed
newsgroups will be then checked.
</para>
</sect2>

<sect2 id="show-only-unread">
<title>show_only_unread</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, only subscribed newsgroups that contain unread articles
will be displayed in browser.
</para>
</sect2>

<sect2 id="sidebar-delim-chars">
<title>sidebar_delim_chars</title>
<literallayout>Type: string
Default: <quote><literal>/.</literal></quote></literallayout>

<para>
This contains the list of characters which you would like to treat
as folder separators for displaying paths in the sidebar.
</para>
<para>
Local mail is often arranged in directories: `dir1/dir2/mailbox'.

</para>

<screen>
set sidebar_delim_chars='/'
</screen><para>
IMAP mailboxes are often named: `folder1.folder2.mailbox'.

</para>

<screen>
set sidebar_delim_chars='.'
</screen><para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-short-path">$sidebar_short_path</link>, <link linkend="sidebar-folder-indent">$sidebar_folder_indent</link>, <link linkend="sidebar-indent-string">$sidebar_indent_string</link>.
</para>
</sect2>

<sect2 id="sidebar-divider-char">
<title>sidebar_divider_char</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This specifies the characters to be drawn between the sidebar (when
visible) and the other Mutt panels. ASCII and Unicode line-drawing
characters are supported.
</para>
</sect2>

<sect2 id="sidebar-folder-indent">
<title>sidebar_folder_indent</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Set this to indent mailboxes in the sidebar.
</para>
<para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-short-path">$sidebar_short_path</link>, <link linkend="sidebar-indent-string">$sidebar_indent_string</link>, <link linkend="sidebar-delim-chars">$sidebar_delim_chars</link>.
</para>
</sect2>

<sect2 id="sidebar-format">
<title>sidebar_format</title>
<literallayout>Type: string
Default: <quote><literal>%B%*  %n</literal></quote></literallayout>

<para>
This variable allows you to customize the sidebar display. This string is
similar to <link linkend="index-format">$index_format</link>, but has its own set of <literal>printf(3)</literal>-like
sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%B  </entry><entry>Name of the mailbox
</entry></row>
<row><entry>%S  </entry><entry>* Size of mailbox (total number of messages)
</entry></row>
<row><entry>%N  </entry><entry>* Number of unread messages in the mailbox
</entry></row>
<row><entry>%n  </entry><entry>N if mailbox has new mail, blank otherwise
</entry></row>
<row><entry>%F  </entry><entry>* Number of Flagged messages in the mailbox
</entry></row>
<row><entry>%!  </entry><entry><quote>!</quote> : one flagged message;
<quote>!!</quote> : two flagged messages;
<quote>n!</quote> : n flagged messages (for n &gt; 2).
Otherwise prints nothing.
</entry></row>
<row><entry>%d  </entry><entry>* @ Number of deleted messages
</entry></row>
<row><entry>%L  </entry><entry>* @ Number of messages after limiting
</entry></row>
<row><entry>%t  </entry><entry>* @ Number of tagged messages
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with <quote>X</quote>
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with <quote>X</quote>
</entry></row>
<row><entry>%*X </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
* = Can be optionally printed if nonzero
@ = Only applicable to the current folder
</para>
<para>
In order to use %S, %N, %F, and %!, <link linkend="mail-check-stats">$mail_check_stats</link> must
be <emphasis>set</emphasis>.  When thus set, a suggested value for this option is
"%B%?F? [%F]?%* %?N?%N/?%S".
</para>
</sect2>

<sect2 id="sidebar-indent-string">
<title>sidebar_indent_string</title>
<literallayout>Type: string
Default: <quote><literal>  </literal></quote></literallayout>

<para>
This specifies the string that is used to indent mailboxes in the sidebar.
It defaults to two spaces.
</para>
<para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-short-path">$sidebar_short_path</link>, <link linkend="sidebar-folder-indent">$sidebar_folder_indent</link>, <link linkend="sidebar-delim-chars">$sidebar_delim_chars</link>.
</para>
</sect2>

<sect2 id="sidebar-new-mail-only">
<title>sidebar_new_mail_only</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When set, the sidebar will only display mailboxes containing new, or
flagged, mail.
</para>
<para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-whitelist">sidebar_whitelist</link>.
</para>
</sect2>

<sect2 id="sidebar-next-new-wrap">
<title>sidebar_next_new_wrap</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When set, the <literal>&lt;sidebar-next-new&gt;</literal> command will not stop and the end of
the list of mailboxes, but wrap around to the beginning. The
<literal>&lt;sidebar-prev-new&gt;</literal> command is similarly affected, wrapping around to
the end of the list.
</para>
</sect2>

<sect2 id="sidebar-on-right">
<title>sidebar_on_right</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When set, the sidebar will appear on the right-hand side of the screen.
</para>
</sect2>

<sect2 id="sidebar-short-path">
<title>sidebar_short_path</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
By default the sidebar will show the mailbox's path, relative to the
<link linkend="folder">$folder</link> variable. Setting <literal>sidebar_shortpath=yes</literal> will shorten the
names relative to the previous name. Here's an example:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry><emphasis role="bold">shortpath=no</emphasis> </entry><entry><emphasis role="bold">shortpath=yes</emphasis> </entry><entry><emphasis role="bold">shortpath=yes, folderindent=yes, indentstr=".."</emphasis>
</entry></row>
<row><entry><literal>fruit</literal>        </entry><entry><literal>fruit</literal>         </entry><entry><literal>fruit</literal>
</entry></row>
<row><entry><literal>fruit.apple</literal>  </entry><entry><literal>apple</literal>         </entry><entry><literal>..apple</literal>
</entry></row>
<row><entry><literal>fruit.banana</literal> </entry><entry><literal>banana</literal>        </entry><entry><literal>..banana</literal>
</entry></row>
<row><entry><literal>fruit.cherry</literal> </entry><entry><literal>cherry</literal>        </entry><entry><literal>..cherry</literal>
</entry></row></tbody></tgroup></informaltable>

<para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-delim-chars">$sidebar_delim_chars</link>, <link linkend="sidebar-folder-indent">$sidebar_folder_indent</link>, <link linkend="sidebar-indent-string">$sidebar_indent_string</link>.
</para>
</sect2>

<sect2 id="sidebar-sort-method">
<title>sidebar_sort_method</title>
<literallayout>Type: sort order
Default: order</literallayout>

<para>
Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:

</para>

<itemizedlist>
<listitem><para>alpha (alphabetically)
</para></listitem><listitem><para>count (all message count)
</para></listitem><listitem><para>flagged (flagged message count)
</para></listitem><listitem><para>name (alphabetically)
</para></listitem><listitem><para>new (unread message count)
</para></listitem><listitem><para>path (alphabetically)
</para></listitem><listitem><para>unread (unread message count)
</para></listitem><listitem><para>unsorted
</para></listitem></itemizedlist>

<para>
You may optionally use the <quote>reverse-</quote> prefix to specify reverse sorting
order (example: <quote><literal>set sort_browser=reverse-date</literal></quote>).
</para>
</sect2>

<sect2 id="sidebar-visible">
<title>sidebar_visible</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This specifies whether or not to show sidebar. The sidebar shows a list of
all your mailboxes.
</para>
<para>
<emphasis role="bold">See also:</emphasis> <link linkend="sidebar-format">$sidebar_format</link>, <link linkend="sidebar-width">$sidebar_width</link>
</para>
</sect2>

<sect2 id="sidebar-width">
<title>sidebar_width</title>
<literallayout>Type: number
Default: 30</literallayout>

<para>
This controls the width of the sidebar.  It is measured in screen columns.
For example: sidebar_width=20 could display 20 ASCII characters, or 10
Chinese characters.
</para>
</sect2>

<sect2 id="sig-dashes">
<title>sig_dashes</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis>, a line containing <quote>-- </quote> (note the trailing space) will be inserted before your
<link linkend="signature">$signature</link>.  It is <emphasis role="bold">strongly</emphasis> recommended that you not <emphasis>unset</emphasis>
this variable unless your signature contains just your name.  The
reason for this is because many software packages use <quote>-- \n</quote> to
detect your signature.  For example, Mutt has the ability to highlight
the signature in a different color in the built-in pager.
</para>
</sect2>

<sect2 id="sig-on-top">
<title>sig_on_top</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, the signature will be included before any quoted or forwarded
text.  It is <emphasis role="bold">strongly</emphasis> recommended that you do not set this variable
unless you really know what you are doing, and are prepared to take
some heat from netiquette guardians.
</para>
</sect2>

<sect2 id="signature">
<title>signature</title>
<literallayout>Type: path
Default: <quote><literal>~/.signature</literal></quote></literallayout>

<para>
Specifies the filename of your signature, which is appended to all
outgoing messages.   If the filename ends with a pipe (<quote>|</quote>), it is
assumed that filename is a shell command and input should be read from
its standard output.
</para>
</sect2>

<sect2 id="simple-search">
<title>simple_search</title>
<literallayout>Type: string
Default: <quote><literal>~f %s | ~s %s</literal></quote></literallayout>

<para>
Specifies how Mutt should expand a simple search into a real search
pattern.  A simple search is one that does not contain any of the <quote>~</quote> pattern
operators.  See <quote><link linkend="patterns">patterns</link></quote> for more information on search patterns.
</para>
<para>
For example, if you simply type <quote>joe</quote> at a search or limit prompt, Mutt
will automatically expand it to the value specified by this variable by
replacing <quote>%s</quote> with the supplied string.
For the default value, <quote>joe</quote> would be expanded to: <quote>~f joe | ~s joe</quote>.
</para>
</sect2>

<sect2 id="skip-quoted-offset">
<title>skip_quoted_offset</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Lines of quoted text that are displayed before the unquoted text after
<quote>skip to quoted</quote> command (S)
</para>
</sect2>

<sect2 id="sleep-time">
<title>sleep_time</title>
<literallayout>Type: number
Default: 1</literallayout>

<para>
Specifies time, in seconds, to pause while displaying certain informational
messages, while moving from folder to folder and after expunging
messages from the current folder.  The default is to pause one second, so
a value of zero for this option suppresses the pause.
</para>
</sect2>

<sect2 id="smart-wrap">
<title>smart_wrap</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls the display of lines longer than the screen width in the
internal pager. If <emphasis>set</emphasis>, long lines are wrapped at a word boundary.  If
<emphasis>unset</emphasis>, lines are simply wrapped at the screen edge. Also see the
<link linkend="markers">$markers</link> variable.
</para>
</sect2>

<sect2 id="smileys">
<title>smileys</title>
<literallayout>Type: regular expression
Default: <quote><literal>(&gt;From )|(:[-^]?[][)(&gt;&lt;}{|/DP])</literal></quote></literallayout>

<para>
The <emphasis>pager</emphasis> uses this variable to catch some common false
positives of <link linkend="quote-regexp">$quote_regexp</link>, most notably smileys and not consider
a line quoted text if it also matches <link linkend="smileys">$smileys</link>. This mostly
happens at the beginning of a line.
</para>
</sect2>

<sect2 id="smime-ask-cert-label">
<title>smime_ask_cert_label</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This flag controls whether you want to be asked to enter a label
for a certificate about to be added to the database or not. It is
<emphasis>set</emphasis> by default.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-ca-location">
<title>smime_ca_location</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable contains the name of either a directory, or a file which
contains trusted certificates for use with OpenSSL.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-certificates">
<title>smime_certificates</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys by itself. This is very basic right
now, and keys and certificates are stored in two different
directories, both named as the hash-value retrieved from
OpenSSL. There is an index file which contains mailbox-address
keyid pairs, and which can be manually edited. This option points to
the location of the certificates.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-decrypt-command">
<title>smime_decrypt_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This format string specifies a command which is used to decrypt
<literal>application/x-pkcs7-mime</literal> attachments.
</para>
<para>
The OpenSSL command formats have their own set of <literal>printf(3)</literal>-like sequences
similar to PGP's:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%f </entry><entry>Expands to the name of a file containing a message.
</entry></row>
<row><entry>%s </entry><entry>Expands to the name of a file containing the signature part
           of a <literal>multipart/signed</literal> attachment when verifying it.
</entry></row>
<row><entry>%k </entry><entry>The key-pair specified with <link linkend="smime-default-key">$smime_default_key</link>
</entry></row>
<row><entry>%i </entry><entry>Intermediate certificates
</entry></row>
<row><entry>%c </entry><entry>One or more certificate IDs.
</entry></row>
<row><entry>%a </entry><entry>The algorithm used for encryption.
</entry></row>
<row><entry>%d </entry><entry>The message digest algorithm specified with <link linkend="smime-sign-digest-alg">$smime_sign_digest_alg</link>.
</entry></row>
<row><entry>%C </entry><entry>CA location:  Depending on whether <link linkend="smime-ca-location">$smime_ca_location</link>
           points to a directory or file, this expands to
           <quote>-CApath <link linkend="smime-ca-location">$smime_ca_location</link></quote> or <quote>-CAfile <link linkend="smime-ca-location">$smime_ca_location</link></quote>.
</entry></row></tbody></tgroup></informaltable>

<para>
For examples on how to configure these formats, see the <literal>smime.rc</literal> in
the <literal>samples/</literal> subdirectory which has been installed on your system
alongside the documentation.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-decrypt-use-default-key">
<title>smime_decrypt_use_default_key</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (default) this tells mutt to use the default key for decryption. Otherwise,
if managing multiple certificate-key-pairs, mutt will try to use the mailbox-address
to determine the key to use. It will ask you to supply a key, if it can't find one.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-default-key">
<title>smime_default_key</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is the default key-pair to use for signing. This must be set to the
keyid (the hash-value that OpenSSL generates) to work properly
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-encrypt-command">
<title>smime_encrypt_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to create encrypted S/MIME messages.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
<para>
Encrypt the message to <link linkend="smime-default-key">$smime_default_key</link> too.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-encrypt-with">
<title>smime_encrypt_with</title>
<literallayout>Type: string
Default: <quote><literal>aes256</literal></quote></literallayout>

<para>
This sets the algorithm that should be used for encryption.
Valid choices are <quote>aes128</quote>, <quote>aes192</quote>, <quote>aes256</quote>, <quote>des</quote>, <quote>des3</quote>, <quote>rc2-40</quote>, <quote>rc2-64</quote>, <quote>rc2-128</quote>.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-cert-command">
<title>smime_get_cert_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract X509 certificates from a PKCS7 structure.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-cert-email-command">
<title>smime_get_cert_email_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract the mail address(es) used for storing
X509 certificates, and for verification purposes (to check whether the
certificate was issued for the sender's mailbox).
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-get-signer-cert-command">
<title>smime_get_signer_cert_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract only the signers X509 certificate from a S/MIME
signature, so that the certificate's owner may get compared to the
email's <quote>From:</quote> field.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-import-cert-command">
<title>smime_import_cert_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to import a certificate via smime_keys.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-is-default">
<title>smime_is_default</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
The default behavior of mutt is to use PGP on all auto-sign/encryption
operations. To override and to use OpenSSL instead this must be <emphasis>set</emphasis>.
However, this has no effect while replying, since mutt will automatically
select the same application that was used to sign/encrypt the original
message.  (Note that this variable can be overridden by unsetting <link linkend="crypt-autosmime">$crypt_autosmime</link>.)
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-keys">
<title>smime_keys</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Since for S/MIME there is no pubring/secring as with PGP, mutt has to handle
storage and retrieval of keys/certs by itself. This is very basic right now,
and stores keys and certificates in two different directories, both
named as the hash-value retrieved from OpenSSL. There is an index file
which contains mailbox-address keyid pair, and which can be manually
edited. This option points to the location of the private keys.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-pk7out-command">
<title>smime_pk7out_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to extract PKCS7 structures of S/MIME signatures,
in order to extract the public X509 certificate(s).
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-self-encrypt">
<title>smime_self_encrypt</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, S/MIME encrypted messages will also be encrypted
using the certificate in <link linkend="smime-self-encrypt-as">$smime_self_encrypt_as</link>.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-self-encrypt-as">
<title>smime_self_encrypt_as</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is an additional certificate used to encrypt messages when
<link linkend="smime-self-encrypt">$smime_self_encrypt</link> is <emphasis>set</emphasis>.  It is also used to specify the
certificate for <link linkend="postpone-encrypt">$postpone_encrypt</link>.  It should be the hash-value that
OpenSSL generates.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-sign-command">
<title>smime_sign_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to created S/MIME signatures of type
<literal>multipart/signed</literal>, which can be read by all mail clients.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-sign-digest-alg">
<title>smime_sign_digest_alg</title>
<literallayout>Type: string
Default: <quote><literal>sha256</literal></quote></literallayout>

<para>
This sets the algorithm that should be used for the signature message digest.
Valid choices are <quote>md5</quote>, <quote>sha1</quote>, <quote>sha224</quote>, <quote>sha256</quote>, <quote>sha384</quote>, <quote>sha512</quote>.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-timeout">
<title>smime_timeout</title>
<literallayout>Type: number
Default: 300</literallayout>

<para>
The number of seconds after which a cached passphrase will expire if
not used.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-verify-command">
<title>smime_verify_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify S/MIME signatures of type <literal>multipart/signed</literal>.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smime-verify-opaque-command">
<title>smime_verify_opaque_command</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This command is used to verify S/MIME signatures of type
<literal>application/x-pkcs7-mime</literal>.
</para>
<para>
This is a format string, see the <link linkend="smime-decrypt-command">$smime_decrypt_command</link> command for
possible <literal>printf(3)</literal>-like sequences.
(S/MIME only)
</para>
</sect2>

<sect2 id="smtp-authenticators">
<title>smtp_authenticators</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
This is a colon-delimited list of authentication methods mutt may
attempt to use to log in to an SMTP server, in the order mutt should
try them.  Authentication methods are any SASL mechanism, e.g. <quote>plain</quote>,
<quote>digest-md5</quote>, <quote>gssapi</quote> or <quote>cram-md5</quote>.
This option is case-insensitive. If it is <quote>unset</quote>
(the default) mutt will try all available methods, in order from
most-secure to least-secure. Support for the <quote>plain</quote> mechanism is
bundled; other mechanisms are provided by an external SASL library (look
for +USE_SASL in the output of mutt -v).
</para>
<para>
Example:

</para>

<screen>
set smtp_authenticators="digest-md5:cram-md5"
</screen></sect2>

<sect2 id="smtp-pass">
<title>smtp_pass</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Specifies the password for your SMTP account.  If <emphasis>unset</emphasis>, Mutt will
prompt you for your password when you first send mail via SMTP.
See <link linkend="smtp-url">$smtp_url</link> to configure mutt to send mail via SMTP.
</para>
<para>
<emphasis role="bold">Warning</emphasis>: you should only use this option when you are on a
fairly secure machine, because the superuser can read your muttrc even
if you are the only one who can read the file.
</para>
</sect2>

<sect2 id="smtp-url">
<title>smtp_url</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Defines the SMTP smarthost where sent messages should relayed for
delivery. This should take the form of an SMTP URL, e.g.:

</para>

<screen>
smtp[s]://[user[:pass]@]host[:port]
</screen><para>
where <quote>[...]</quote> denotes an optional part.
Setting this variable overrides the value of the <link linkend="sendmail">$sendmail</link>
variable.
</para>
</sect2>

<sect2 id="sort">
<title>sort</title>
<literallayout>Type: sort order
Default: date</literallayout>

<para>
Specifies how to sort messages in the <quote>index</quote> menu.  Valid values
are:

</para>

<itemizedlist>
<listitem><para>date or date-sent
</para></listitem><listitem><para>date-received
</para></listitem><listitem><para>from
</para></listitem><listitem><para>mailbox-order (unsorted)
</para></listitem><listitem><para>score
</para></listitem><listitem><para>size
</para></listitem><listitem><para>spam
</para></listitem><listitem><para>subject
</para></listitem><listitem><para>threads
</para></listitem><listitem><para>to
</para></listitem></itemizedlist>

<para>
You may optionally use the <quote>reverse-</quote> prefix to specify reverse sorting
order.
</para>
<para>
Example:

</para>

<screen>
set sort=reverse-date-sent
</screen></sect2>

<sect2 id="sort-alias">
<title>sort_alias</title>
<literallayout>Type: sort order
Default: alias</literallayout>

<para>
Specifies how the entries in the <quote>alias</quote> menu are sorted.  The
following are legal values:

</para>

<itemizedlist>
<listitem><para>address (sort alphabetically by email address)
</para></listitem><listitem><para>alias (sort alphabetically by alias name)
</para></listitem><listitem><para>unsorted (leave in order specified in .muttrc)
</para></listitem></itemizedlist>
</sect2>

<sect2 id="sort-aux">
<title>sort_aux</title>
<literallayout>Type: sort order
Default: date</literallayout>

<para>
When sorting by threads, this variable controls how threads are sorted
in relation to other threads, and how the branches of the thread trees
are sorted.  This can be set to any value that <link linkend="sort">$sort</link> can, except
<quote>threads</quote> (in that case, mutt will just use <quote>date-sent</quote>).  You can also
specify the <quote>last-</quote> prefix in addition to the <quote>reverse-</quote> prefix, but <quote>last-</quote>
must come after <quote>reverse-</quote>.  The <quote>last-</quote> prefix causes messages to be
sorted against its siblings by which has the last descendant, using
the rest of <link linkend="sort-aux">$sort_aux</link> as an ordering.  For instance,

</para>

<screen>
set sort_aux=last-date-received
</screen><para>
would mean that if a new message is received in a
thread, that thread becomes the last one displayed (or the first, if
you have <quote><literal>set sort=reverse-threads</literal></quote>.)
</para>
<para>
Note: For reversed <link linkend="sort">$sort</link>
order <link linkend="sort-aux">$sort_aux</link> is reversed again (which is not the right thing to do,
but kept to not break any existing configuration setting).
</para>
</sect2>

<sect2 id="sort-browser">
<title>sort_browser</title>
<literallayout>Type: sort order
Default: alpha</literallayout>

<para>
Specifies how to sort entries in the file browser.  By default, the
entries are sorted alphabetically.  Valid values:

</para>

<itemizedlist>
<listitem><para>alpha (alphabetically)
</para></listitem><listitem><para>count (all message count)
</para></listitem><listitem><para>date
</para></listitem><listitem><para>desc (description)
</para></listitem><listitem><para>new (new message count)
</para></listitem><listitem><para>size
</para></listitem><listitem><para>unsorted
</para></listitem></itemizedlist>

<para>
You may optionally use the <quote>reverse-</quote> prefix to specify reverse sorting
order (example: <quote><literal>set sort_browser=reverse-date</literal></quote>).
</para>
</sect2>

<sect2 id="sort-re">
<title>sort_re</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable is only useful when sorting by mailboxes in sidebar. By default,
entries are unsorted.  Valid values:

</para>

<itemizedlist>
<listitem><para>count (all message count)
</para></listitem><listitem><para>desc  (virtual mailbox description)
</para></listitem><listitem><para>new (new message count)
</para></listitem><listitem><para>path
</para></listitem><listitem><para>unsorted
</para></listitem></itemizedlist>
</sect2>

<sect2 id="spam-separator">
<title>spam_separator</title>
<literallayout>Type: string
Default: <quote><literal>,</literal></quote></literallayout>

<para>
This variable controls what happens when multiple spam headers
are matched: if <emphasis>unset</emphasis>, each successive header will overwrite any
previous matches value for the spam label. If <emphasis>set</emphasis>, each successive
match will append to the previous, using this variable's value as a
separator.
</para>
</sect2>

<sect2 id="spoolfile">
<title>spoolfile</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
If your spool mailbox is in a non-default place where Mutt cannot find
it, you can specify its location with this variable.  Mutt will
initially set this variable to the value of the environment
variable <literal>$MAIL</literal> or <literal>$MAILDIR</literal> if either is defined.
</para>
</sect2>

<sect2 id="ssl-ca-certificates-file">
<title>ssl_ca_certificates_file</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable specifies a file containing trusted CA certificates.
Any server certificate that is signed with one of these CA
certificates is also automatically accepted.
</para>
<para>
Example:

</para>

<screen>
set ssl_ca_certificates_file=/etc/ssl/certs/ca-certificates.crt
</screen></sect2>

<sect2 id="ssl-client-cert">
<title>ssl_client_cert</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
The file containing a client certificate and its associated private
key.
</para>
</sect2>

<sect2 id="ssl-force-tls">
<title>ssl_force_tls</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If this variable is <emphasis>set</emphasis>, Mutt will require that all connections
to remote servers be encrypted. Furthermore it will attempt to
negotiate TLS even if the server does not advertise the capability,
since it would otherwise have to abort the connection anyway. This
option supersedes <link linkend="ssl-starttls">$ssl_starttls</link>.
</para>
</sect2>

<sect2 id="ssl-min-dh-prime-bits">
<title>ssl_min_dh_prime_bits</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
This variable specifies the minimum acceptable prime size (in bits)
for use in any Diffie-Hellman key exchange. A value of 0 will use
the default from the GNUTLS library.
</para>
</sect2>

<sect2 id="ssl-starttls">
<title>ssl_starttls</title>
<literallayout>Type: quadoption
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (the default), mutt will attempt to use <literal>STARTTLS</literal> on servers
advertising the capability. When <emphasis>unset</emphasis>, mutt will not attempt to
use <literal>STARTTLS</literal> regardless of the server's capabilities.
</para>
</sect2>

<sect2 id="ssl-use-sslv2">
<title>ssl_use_sslv2</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable specifies whether to attempt to use SSLv2 in the
SSL authentication process. Note that SSLv2 and SSLv3 are now
considered fundamentally insecure and are no longer recommended.
</para>
</sect2>

<sect2 id="ssl-use-sslv3">
<title>ssl_use_sslv3</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This variable specifies whether to attempt to use SSLv3 in the
SSL authentication process. Note that SSLv2 and SSLv3 are now
considered fundamentally insecure and are no longer recommended.
</para>
</sect2>

<sect2 id="ssl-use-tlsv1">
<title>ssl_use_tlsv1</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable specifies whether to attempt to use TLSv1.0 in the
SSL authentication process.
</para>
</sect2>

<sect2 id="ssl-use-tlsv1-1">
<title>ssl_use_tlsv1_1</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable specifies whether to attempt to use TLSv1.1 in the
SSL authentication process.
</para>
</sect2>

<sect2 id="ssl-use-tlsv1-2">
<title>ssl_use_tlsv1_2</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
This variable specifies whether to attempt to use TLSv1.2 in the
SSL authentication process.
</para>
</sect2>

<sect2 id="ssl-usesystemcerts">
<title>ssl_usesystemcerts</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If set to <emphasis>yes</emphasis>, mutt will use CA certificates in the
system-wide certificate store when checking if a server certificate
is signed by a trusted CA.
</para>
</sect2>

<sect2 id="ssl-verify-dates">
<title>ssl_verify_dates</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (the default), mutt will not automatically accept a server
certificate that is either not yet valid or already expired. You should
only unset this for particular known hosts, using the
<literal><link linkend="account-hook">&lt;account-hook&gt;</link></literal> function.
</para>
</sect2>

<sect2 id="ssl-verify-host">
<title>ssl_verify_host</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
If <emphasis>set</emphasis> (the default), mutt will not automatically accept a server
certificate whose host name does not match the host used in your folder
URL. You should only unset this for particular known hosts, using
the <literal><link linkend="account-hook">&lt;account-hook&gt;</link></literal> function.
</para>
</sect2>

<sect2 id="ssl-verify-partial-chains">
<title>ssl_verify_partial_chains</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
This option should not be changed from the default unless you understand
what you are doing.
</para>
<para>
Setting this variable to <emphasis>yes</emphasis> will permit verifying partial
certification chains, i. e. a certificate chain where not the root,
but an intermediate certificate CA, or the host certificate, are
marked trusted (in <link linkend="certificate-file">$certificate_file</link>), without marking the root
signing CA as trusted.
</para>
<para>
(OpenSSL 1.0.2b and newer only).
</para>
</sect2>

<sect2 id="ssl-ciphers">
<title>ssl_ciphers</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Contains a colon-seperated list of ciphers to use when using SSL.
For OpenSSL, see ciphers(1) for the syntax of the string.
</para>
<para>
For GnuTLS, this option will be used in place of "NORMAL" at the
start of the priority string.  See gnutls_priority_init(3) for the
syntax and more details. (Note: GnuTLS version 2.1.7 or higher is
required.)
</para>
</sect2>

<sect2 id="status-chars">
<title>status_chars</title>
<literallayout>Type: string
Default: <quote><literal>-*%A</literal></quote></literallayout>

<para>
Controls the characters used by the <quote>%r</quote> indicator in <link linkend="status-format">$status_format</link>.

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry><emphasis role="bold">Character</emphasis> </entry><entry><emphasis role="bold">Default</emphasis> </entry><entry><emphasis role="bold">Description</emphasis>
</entry></row>
<row><entry>1 </entry><entry>- </entry><entry>Mailbox is unchanged
</entry></row>
<row><entry>2 </entry><entry>* </entry><entry>Mailbox has been changed and needs to be resynchronized
</entry></row>
<row><entry>3 </entry><entry>% </entry><entry>Mailbox is read-only, or will not be written when exiting.
(You can toggle whether to write changes to a mailbox
with the <literal>&lt;toggle-write&gt;</literal> operation, bound by default
to <quote>%</quote>)
</entry></row>
<row><entry>4 </entry><entry>A </entry><entry>Folder opened in attach-message mode.
(Certain operations like composing a new mail, replying,
forwarding, etc. are not permitted in this mode)
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="status-format">
<title>status_format</title>
<literallayout>Type: string
Default: <quote><literal>-%r-NeoMutt: %f [Msgs:%?M?%M/?%m%?n? New:%n?%?o? Old:%o?%?d? Del:%d?%?F? Flag:%F?%?t? Tag:%t?%?p? Post:%p?%?b? Inc:%b?%?l? %l?]---(%s/%S)-%&gt;-(%P)---</literal></quote></literallayout>

<para>
Controls the format of the status line displayed in the <quote>index</quote>
menu.  This string is similar to <link linkend="index-format">$index_format</link>, but has its own
set of <literal>printf(3)</literal>-like sequences:

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry>%b  </entry><entry>number of mailboxes with new mail *
</entry></row>
<row><entry>%d  </entry><entry>number of deleted messages *
</entry></row>
<row><entry>%f  </entry><entry>the full pathname of the current mailbox
</entry></row>
<row><entry>%F  </entry><entry>number of flagged messages *
</entry></row>
<row><entry>%h  </entry><entry>local hostname
</entry></row>
<row><entry>%l  </entry><entry>size (in bytes) of the current mailbox *
</entry></row>
<row><entry>%L  </entry><entry>size (in bytes) of the messages shown
(i.e., which match the current limit) *
</entry></row>
<row><entry>%m  </entry><entry>the number of messages in the mailbox *
</entry></row>
<row><entry>%M  </entry><entry>the number of messages shown (i.e., which match the current limit) *
</entry></row>
<row><entry>%n  </entry><entry>number of new messages in the mailbox *
</entry></row>
<row><entry>%o  </entry><entry>number of old unread messages *
</entry></row>
<row><entry>%p  </entry><entry>number of postponed messages *
</entry></row>
<row><entry>%P  </entry><entry>percentage of the way through the index
</entry></row>
<row><entry>%r  </entry><entry>modified/read-only/won't-write/attach-message indicator,
according to <link linkend="status-chars">$status_chars</link>
</entry></row>
<row><entry>%s  </entry><entry>current sorting mode (<link linkend="sort">$sort</link>)
</entry></row>
<row><entry>%S  </entry><entry>current aux sorting method (<link linkend="sort-aux">$sort_aux</link>)
</entry></row>
<row><entry>%t  </entry><entry>number of tagged messages *
</entry></row>
<row><entry>%u  </entry><entry>number of unread messages *
</entry></row>
<row><entry>%v  </entry><entry>Mutt version string
</entry></row>
<row><entry>%V  </entry><entry>currently active limit pattern, if any *
</entry></row>
<row><entry>%&gt;X </entry><entry>right justify the rest of the string and pad with <quote>X</quote>
</entry></row>
<row><entry>%|X </entry><entry>pad to the end of the line with <quote>X</quote>
</entry></row>
<row><entry>%*X </entry><entry>soft-fill with character <quote>X</quote> as pad
</entry></row></tbody></tgroup></informaltable>

<para>
For an explanation of <quote>soft-fill</quote>, see the <link linkend="index-format">$index_format</link> documentation.
</para>
<para>
* = can be optionally printed if nonzero
</para>
<para>
Some of the above sequences can be used to optionally print a string
if their value is nonzero.  For example, you may only want to see the
number of flagged messages if such messages exist, since zero is not
particularly meaningful.  To optionally print a string based upon one
of the above sequences, the following construct is used:
</para>
<para>
<literal>%?&lt;sequence_char&gt;?&lt;optional_string&gt;?</literal>
</para>
<para>
where <emphasis>sequence_char</emphasis> is a character from the table above, and
<emphasis>optional_string</emphasis> is the string you would like printed if
<emphasis>sequence_char</emphasis> is nonzero.  <emphasis>optional_string</emphasis> <emphasis role="bold">may</emphasis> contain
other sequences as well as normal text, but you may <emphasis role="bold">not</emphasis> nest
optional strings.
</para>
<para>
Here is an example illustrating how to optionally print the number of
new messages in a mailbox:
</para>
<para>
<literal>%?n?%n new messages.?</literal>
</para>
<para>
You can also switch between two strings using the following construct:
</para>
<para>
<literal>%?&lt;sequence_char&gt;?&lt;if_string&gt;&amp;&lt;else_string&gt;?</literal>
</para>
<para>
If the value of <emphasis>sequence_char</emphasis> is non-zero, <emphasis>if_string</emphasis> will
be expanded, otherwise <emphasis>else_string</emphasis> will be expanded.
</para>
<para>
You can force the result of any <literal>printf(3)</literal>-like sequence to be lowercase
by prefixing the sequence character with an underscore (<quote>_</quote>) sign.
For example, if you want to display the local hostname in lowercase,
you would use: <quote><literal>%_h</literal></quote>.
</para>
<para>
If you prefix the sequence character with a colon (<quote>:</quote>) character, mutt
will replace any dots in the expansion by underscores. This might be helpful
with IMAP folders that don't like dots in folder names.
</para>
</sect2>

<sect2 id="status-on-top">
<title>status_on_top</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Setting this variable causes the <quote>status bar</quote> to be displayed on
the first line of the screen rather than near the bottom. If <link linkend="help">$help</link>
is <emphasis>set</emphasis>, too it'll be placed at the bottom.
</para>
</sect2>

<sect2 id="strict-threads">
<title>strict_threads</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, threading will only make use of the <quote>In-Reply-To</quote> and
<quote>References:</quote> fields when you <link linkend="sort">$sort</link> by message threads.  By
default, messages with the same subject are grouped together in
<quote>pseudo threads.</quote>. This may not always be desirable, such as in a
personal mailbox where you might have several unrelated messages with
the subjects like <quote>hi</quote> which will get grouped together. See also
<link linkend="sort-re">$sort_re</link> for a less drastic way of controlling this
behavior.
</para>
</sect2>

<sect2 id="suspend">
<title>suspend</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>unset</emphasis>, mutt won't stop when the user presses the terminal's
<emphasis>susp</emphasis> key, usually <quote>^Z</quote>. This is useful if you run mutt
inside an xterm using a command like <quote><literal>xterm -e mutt</literal></quote>.
</para>
</sect2>

<sect2 id="text-flowed">
<title>text_flowed</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will generate <quote>format=flowed</quote> bodies with a content type
of <quote><literal>text/plain; format=flowed</literal></quote>.
This format is easier to handle for some mailing software, and generally
just looks like ordinary text.  To actually make use of this format's
features, you'll need support in your editor.
</para>
<para>
Note that <link linkend="indent-string">$indent_string</link> is ignored when this option is <emphasis>set</emphasis>.
</para>
</sect2>

<sect2 id="thorough-search">
<title>thorough_search</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Affects the <literal>~b</literal> and <literal>~h</literal> search operations described in
section <quote><link linkend="patterns">patterns</link></quote>.  If <emphasis>set</emphasis>, the headers and body/attachments of
messages to be searched are decoded before searching. If <emphasis>unset</emphasis>,
messages are searched as they appear in the folder.
</para>
<para>
Users searching attachments or for non-ASCII characters should <emphasis>set</emphasis>
this value because decoding also includes MIME parsing/decoding and possible
character set conversions. Otherwise mutt will attempt to match against the
raw message received (for example quoted-printable encoded or with encoded
headers) which may lead to incorrect search results.
</para>
</sect2>

<sect2 id="thread-received">
<title>thread_received</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt uses the date received rather than the date sent
to thread messages by subject.
</para>
</sect2>

<sect2 id="tilde">
<title>tilde</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, the internal-pager will pad blank lines to the bottom of the
screen with a tilde (<quote>~</quote>).
</para>
</sect2>

<sect2 id="time-inc">
<title>time_inc</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
Along with <link linkend="read-inc">$read_inc</link>, <link linkend="write-inc">$write_inc</link>, and <link linkend="net-inc">$net_inc</link>, this
variable controls the frequency with which progress updates are
displayed. It suppresses updates less than <link linkend="time-inc">$time_inc</link> milliseconds
apart. This can improve throughput on systems with slow terminals,
or when running mutt on a remote system.
</para>
<para>
Also see the <quote><link linkend="guide/tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="feature/timeout">
<title>timeout</title>
<literallayout>Type: number
Default: 600</literallayout>

<para>
When Mutt is waiting for user input either idling in menus or
in an interactive prompt, Mutt would block until input is
present. Depending on the context, this would prevent certain
operations from working, like checking for new mail or keeping
an IMAP connection alive.
</para>
<para>
This variable controls how many seconds Mutt will at most wait
until it aborts waiting for input, performs these operations and
continues to wait for input.
</para>
<para>
A value of zero or less will cause Mutt to never time out.
</para>
</sect2>

<sect2 id="tmpdir">
<title>tmpdir</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
This variable allows you to specify where Mutt will place its
temporary files needed for displaying and composing messages.  If
this variable is not set, the environment variable <literal>$TMPDIR</literal> is
used.  If <literal>$TMPDIR</literal> is not set then <quote><literal>/tmp</literal></quote> is used.
</para>
</sect2>

<sect2 id="to-chars">
<title>to_chars</title>
<literallayout>Type: string
Default: <quote><literal> +TCFL</literal></quote></literallayout>

<para>
Controls the character used to indicate mail addressed to you.

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry><emphasis role="bold">Character</emphasis> </entry><entry><emphasis role="bold">Default</emphasis> </entry><entry><emphasis role="bold">Description</emphasis>
</entry></row>
<row><entry>1 </entry><entry>&lt;space&gt; </entry><entry>The mail is <emphasis>not</emphasis> addressed to your address.
</entry></row>
<row><entry>2 </entry><entry>+ </entry><entry>You are the only recipient of the message.
</entry></row>
<row><entry>3 </entry><entry>T </entry><entry>Your address appears in the <quote>To:</quote> header field, but you are not the only recipient of the message.
</entry></row>
<row><entry>4 </entry><entry>C </entry><entry>Your address is specified in the <quote>Cc:</quote> header field, but you are not the only recipient.
</entry></row>
<row><entry>5 </entry><entry>F </entry><entry>Indicates the mail that was sent by <emphasis>you</emphasis>.
</entry></row>
<row><entry>6 </entry><entry>L </entry><entry>Indicates the mail was sent to a mailing-list you subscribe to.
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="flag-chars">
<title>flag_chars</title>
<literallayout>Type: string
Default: <quote><literal>*!DdrONon- </literal></quote></literallayout>

<para>
Controls the characters used in several flags.

</para>

<informaltable>
<tgroup cols="2">
<tbody>
<row><entry><emphasis role="bold">Character</emphasis> </entry><entry><emphasis role="bold">Default</emphasis> </entry><entry><emphasis role="bold">Description</emphasis>
</entry></row>
<row><entry>1 </entry><entry>* </entry><entry>The mail is tagged.
</entry></row>
<row><entry>2 </entry><entry>! </entry><entry>The mail is flagged as important.
</entry></row>
<row><entry>3 </entry><entry>D </entry><entry>The mail is marked for deletion.
</entry></row>
<row><entry>4 </entry><entry>d </entry><entry>The mail has attachments marked for deletion.
</entry></row>
<row><entry>5 </entry><entry>r </entry><entry>The mail has been replied to.
</entry></row>
<row><entry>6 </entry><entry>O </entry><entry>The mail is Old (Unread but seen).
</entry></row>
<row><entry>7 </entry><entry>N </entry><entry>The mail is New (Unread but not seen).
</entry></row>
<row><entry>8 </entry><entry>o </entry><entry>The mail thread is Old (Unread but seen).
</entry></row>
<row><entry>9 </entry><entry>n </entry><entry>The mail thread is New (Unread but not seen).
</entry></row>
<row><entry>10 </entry><entry>- </entry><entry>The mail is read - %S expando.
</entry></row>
<row><entry>11 </entry><entry>&lt;space&gt; </entry><entry>The mail is read - %Z expando.
</entry></row></tbody></tgroup></informaltable>
</sect2>

<sect2 id="trash">
<title>trash</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
If set, this variable specifies the path of the trash folder where the
mails marked for deletion will be moved, instead of being irremediably
purged.
</para>
<para>
NOTE: When you delete a message in the trash folder, it is really
deleted, so that you have a way to clean the trash.
</para>
</sect2>

<sect2 id="ts-icon-format">
<title>ts_icon_format</title>
<literallayout>Type: string
Default: <quote><literal>M%?n?AIL&amp;ail?</literal></quote></literallayout>

<para>
Controls the format of the icon title, as long as <quote><link linkend="ts-enabled">$ts_enabled</link></quote> is set.
This string is identical in formatting to the one used by
<quote><link linkend="status-format">$status_format</link></quote>.
</para>
</sect2>

<sect2 id="ts-enabled">
<title>ts_enabled</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
Controls whether mutt tries to set the terminal status line and icon name.
Most terminal emulators emulate the status line in the window title.
</para>
</sect2>

<sect2 id="ts-status-format">
<title>ts_status_format</title>
<literallayout>Type: string
Default: <quote><literal>NeoMutt with %?m?%m messages&amp;no messages?%?n? [%n NEW]?</literal></quote></literallayout>

<para>
Controls the format of the terminal status line (or window title),
provided that <quote><link linkend="ts-enabled">$ts_enabled</link></quote> has been set. This string is identical in
formatting to the one used by <quote><link linkend="status-format">$status_format</link></quote>.
</para>
</sect2>

<sect2 id="tunnel">
<title>tunnel</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
Setting this variable will cause mutt to open a pipe to a command
instead of a raw socket. You may be able to use this to set up
preauthenticated connections to your IMAP/POP3/SMTP server. Example:

</para>

<screen>
set tunnel="ssh -q mailhost.net /usr/local/libexec/imapd"
</screen><para>
Note: For this example to work you must be able to log in to the remote
machine without having to enter a password.
</para>
<para>
When set, Mutt uses the tunnel for all remote connections.
Please see <quote><link linkend="account-hook">account-hook</link></quote> in the manual for how to use different
tunnel commands per connection.
</para>
</sect2>

<sect2 id="uncollapse-jump">
<title>uncollapse_jump</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will jump to the next unread message, if any,
when the current thread is <emphasis>un</emphasis>collapsed.
</para>
</sect2>

<sect2 id="uncollapse-new">
<title>uncollapse_new</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will automatically uncollapse any collapsed thread
that receives a new message. When <emphasis>unset</emphasis>, collapsed threads will
remain collapsed. the presence of the new message will still affect
index sorting, though.
</para>
</sect2>

<sect2 id="use-8bitmime">
<title>use_8bitmime</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
<emphasis role="bold">Warning:</emphasis> do not set this variable unless you are using a version
of sendmail which supports the <literal>-B8BITMIME</literal> flag (such as sendmail
8.8.x) or you may not be able to send mail.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will invoke <link linkend="sendmail">$sendmail</link> with the <literal>-B8BITMIME</literal>
flag when sending 8-bit messages to enable ESMTP negotiation.
</para>
</sect2>

<sect2 id="use-domain">
<title>use_domain</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will qualify all local addresses (ones without the
<quote>@host</quote> portion) with the value of <link linkend="hostname">$hostname</link>.  If <emphasis>unset</emphasis>, no
addresses will be qualified.
</para>
</sect2>

<sect2 id="use-envelope-from">
<title>use_envelope_from</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will set the <emphasis>envelope</emphasis> sender of the message.
If <link linkend="envelope-from-address">$envelope_from_address</link> is <emphasis>set</emphasis>, it will be used as the sender
address. If <emphasis>unset</emphasis>, mutt will attempt to derive the sender from the
<quote>From:</quote> header.
</para>
<para>
Note that this information is passed to sendmail command using the
<literal>-f</literal> command line switch. Therefore setting this option is not useful
if the <link linkend="sendmail">$sendmail</link> variable already contains <literal>-f</literal> or if the
executable pointed to by <link linkend="sendmail">$sendmail</link> doesn't support the <literal>-f</literal> switch.
</para>
</sect2>

<sect2 id="use-from">
<title>use_from</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will generate the <quote>From:</quote> header field when
sending messages.  If <emphasis>unset</emphasis>, no <quote>From:</quote> header field will be
generated unless the user explicitly sets one using the <quote><link linkend="my-hdr">my_hdr</link></quote>
command.
</para>
</sect2>

<sect2 id="use-ipv6">
<title>use_ipv6</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will look for IPv6 addresses of hosts it tries to
contact.  If this option is <emphasis>unset</emphasis>, Mutt will restrict itself to IPv4 addresses.
Normally, the default should work.
</para>
</sect2>

<sect2 id="user-agent">
<title>user_agent</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will add a <quote>User-Agent:</quote> header to outgoing
messages, indicating which version of mutt was used for composing
them.
</para>
</sect2>

<sect2 id="visual">
<title>visual</title>
<literallayout>Type: path
Default: (empty)</literallayout>

<para>
Specifies the visual editor to invoke when the <quote><literal>~v</literal></quote> command is
given in the built-in editor.
</para>
</sect2>

<sect2 id="wait-key">
<title>wait_key</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether Mutt will ask you to press a key after an external command
has been invoked by these functions: <literal>&lt;shell-escape&gt;</literal>,
<literal>&lt;pipe-message&gt;</literal>, <literal>&lt;pipe-entry&gt;</literal>, <literal>&lt;print-message&gt;</literal>,
and <literal>&lt;print-entry&gt;</literal> commands.
</para>
<para>
It is also used when viewing attachments with <quote><link linkend="auto-view">auto_view</link></quote>, provided
that the corresponding mailcap entry has a <emphasis>needsterminal</emphasis> flag,
and the external program is interactive.
</para>
<para>
When <emphasis>set</emphasis>, Mutt will always ask for a key. When <emphasis>unset</emphasis>, Mutt will wait
for a key only if the external command returned a non-zero status.
</para>
</sect2>

<sect2 id="weed">
<title>weed</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
When <emphasis>set</emphasis>, mutt will weed headers when displaying, forwarding,
printing, or replying to messages.
</para>
</sect2>

<sect2 id="wrap">
<title>wrap</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
When set to a positive value, mutt will wrap text at <link linkend="wrap">$wrap</link> characters.
When set to a negative value, mutt will wrap text so that there are <link linkend="wrap">$wrap</link>
characters of empty space on the right side of the terminal. Setting it
to zero makes mutt wrap at the terminal width.
</para>
<para>
Also see <link linkend="reflow-wrap">$reflow_wrap</link>.
</para>
</sect2>

<sect2 id="wrap-headers">
<title>wrap_headers</title>
<literallayout>Type: number
Default: 78</literallayout>

<para>
This option specifies the number of characters to use for wrapping
an outgoing message's headers. Allowed values are between 78 and 998
inclusive.
</para>
<para>
<emphasis role="bold">Note:</emphasis> This option usually shouldn't be changed. RFC5233
recommends a line length of 78 (the default), so <emphasis role="bold">please only change
this setting when you know what you're doing</emphasis>.
</para>
</sect2>

<sect2 id="wrap-search">
<title>wrap_search</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether searches wrap around the end.
</para>
<para>
When <emphasis>set</emphasis>, searches will wrap around the first (or last) item. When
<emphasis>unset</emphasis>, incremental searches will not wrap.
</para>
</sect2>

<sect2 id="wrapmargin">
<title>wrapmargin</title>
<literallayout>Type: number
Default: 0</literallayout>

<para>
(DEPRECATED) Equivalent to setting <link linkend="wrap">$wrap</link> with a negative value.
</para>
</sect2>

<sect2 id="write-bcc">
<title>write_bcc</title>
<literallayout>Type: boolean
Default: yes</literallayout>

<para>
Controls whether mutt writes out the <quote>Bcc:</quote> header when preparing
messages to be sent.  Exim users may wish to unset this. If mutt
is set to deliver directly via SMTP (see <link linkend="smtp-url">$smtp_url</link>), this
option does nothing: mutt will never write out the <quote>Bcc:</quote> header
in this case.
</para>
</sect2>

<sect2 id="write-inc">
<title>write_inc</title>
<literallayout>Type: number
Default: 10</literallayout>

<para>
When writing a mailbox, a message will be printed every
<link linkend="write-inc">$write_inc</link> messages to indicate progress.  If set to 0, only a
single message will be displayed before writing a mailbox.
</para>
<para>
Also see the <link linkend="read-inc">$read_inc</link>, <link linkend="net-inc">$net_inc</link> and <link linkend="time-inc">$time_inc</link> variables and the
<quote><link linkend="guide/tuning">tuning</link></quote> section of the manual for performance considerations.
</para>
</sect2>

<sect2 id="xlabel-delimiter">
<title>xlabel_delimiter</title>
<literallayout>Type: string
Default: (empty)</literallayout>

<para>
The character used to delimit distinct keywords in X-Label headers.
X-Label is primarily a Mutt artifact, and the semantics of the field
were never defined: it is free-form text.  However interaction with
X-Keywords:, X-Mozilla-Keys:, and Keywords: requires that we adopt
some means of identifying separate keywords within the field.  Set
this to your personal convention.
</para>
<para>
This affect both parsing existing X-Label headers and writing new
X-Label headers.  You can modify this variable in runtime to accomplish
various kinds of conversion.
</para>
</sect2>

<sect2 id="x-comment-to">
<title>x_comment_to</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
If <emphasis>set</emphasis>, Mutt will add <quote>X-Comment-To:</quote> field (that contains full
name of original article author) to article that followuped to newsgroup.
</para>
</sect2>

<sect2 id="collapse-all">
<title>collapse_all</title>
<literallayout>Type: boolean
Default: no</literallayout>

<para>
When <emphasis>set</emphasis>, Mutt will collapse all threads when entering a folder.
</para>
</sect2>

    </sect1>

    <sect1 id="functions">
    <title>Functions</title>
    <para>The following is the list of available functions listed by the
    mapping in which they are available. The default key setting is given, and
    an explanation of what the function does. The key bindings of these
    functions can be changed with the
    <link linkend="bind">bind</link> command.</para>

<sect2 id="generic-map">
<title>Generic Menu</title>
<para>
The <emphasis>generic</emphasis> menu is not a real menu, but specifies common functions
(such as movement) available in all menus except for <emphasis>pager</emphasis> and
<emphasis>editor</emphasis>.  Changing settings for this menu will affect the default
bindings for all menus (except as noted).
</para>


<table id="tab-generic-bindings">
<title>Default Generic Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;top-page&gt;</literal></entry><entry>H</entry><entry>move to the top of the page</entry></row>
<row><entry><literal>&lt;next-entry&gt;</literal></entry><entry>j</entry><entry>move to the next entry</entry></row>
<row><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>k</entry><entry>move to the previous entry</entry></row>
<row><entry><literal>&lt;bottom-page&gt;</literal></entry><entry>L</entry><entry>move to the bottom of the page</entry></row>
<row><entry><literal>&lt;refresh&gt;</literal></entry><entry>^L</entry><entry>clear and redraw the screen</entry></row>
<row><entry><literal>&lt;middle-page&gt;</literal></entry><entry>M</entry><entry>move to the middle of the page</entry></row>
<row><entry><literal>&lt;search-next&gt;</literal></entry><entry>n</entry><entry>search for next match</entry></row>
<row><entry><literal>&lt;exit&gt;</literal></entry><entry>q</entry><entry>exit this menu</entry></row>
<row><entry><literal>&lt;tag-entry&gt;</literal></entry><entry>t</entry><entry>tag the current entry</entry></row>
<row><entry><literal>&lt;next-page&gt;</literal></entry><entry>z</entry><entry>move to the next page</entry></row>
<row><entry><literal>&lt;previous-page&gt;</literal></entry><entry>Z</entry><entry>move to the previous page</entry></row>
<row><entry><literal>&lt;last-entry&gt;</literal></entry><entry>*</entry><entry>move to the last entry</entry></row>
<row><entry><literal>&lt;first-entry&gt;</literal></entry><entry>=</entry><entry>move to the first entry</entry></row>
<row><entry><literal>&lt;enter-command&gt;</literal></entry><entry>:</entry><entry>enter a muttrc command</entry></row>
<row><entry><literal>&lt;next-line&gt;</literal></entry><entry>&gt;</entry><entry>scroll down one line</entry></row>
<row><entry><literal>&lt;previous-line&gt;</literal></entry><entry>&lt;</entry><entry>scroll up one line</entry></row>
<row><entry><literal>&lt;half-up&gt;</literal></entry><entry>[</entry><entry>scroll up 1/2 page</entry></row>
<row><entry><literal>&lt;half-down&gt;</literal></entry><entry>]</entry><entry>scroll down 1/2 page</entry></row>
<row><entry><literal>&lt;help&gt;</literal></entry><entry>?</entry><entry>this screen</entry></row>
<row><entry><literal>&lt;tag-prefix&gt;</literal></entry><entry>;</entry><entry>apply next function to tagged messages</entry></row>
<row><entry><literal>&lt;tag-prefix-cond&gt;</literal></entry><entry></entry><entry>apply next function ONLY to tagged messages</entry></row>
<row><entry><literal>&lt;end-cond&gt;</literal></entry><entry></entry><entry>end of conditional execution (noop)</entry></row>
<row><entry><literal>&lt;shell-escape&gt;</literal></entry><entry>!</entry><entry>invoke a command in a subshell</entry></row>
<row><entry><literal>&lt;select-entry&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>select the current entry</entry></row>
<row><entry><literal>&lt;select-entry&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>select the current entry</entry></row>
<row><entry><literal>&lt;search&gt;</literal></entry><entry>/</entry><entry>search for a regular expression</entry></row>
<row><entry><literal>&lt;search-reverse&gt;</literal></entry><entry>Esc /</entry><entry>search backwards for a regular expression</entry></row>
<row><entry><literal>&lt;search-opposite&gt;</literal></entry><entry></entry><entry>search for next match in opposite direction</entry></row>
<row><entry><literal>&lt;jump&gt;</literal></entry><entry></entry><entry>jump to an index number</entry></row>
<row><entry><literal>&lt;current-top&gt;</literal></entry><entry></entry><entry>move entry to top of screen</entry></row>
<row><entry><literal>&lt;current-middle&gt;</literal></entry><entry></entry><entry>move entry to middle of screen</entry></row>
<row><entry><literal>&lt;current-bottom&gt;</literal></entry><entry></entry><entry>move entry to bottom of screen</entry></row>
<row><entry><literal>&lt;what-key&gt;</literal></entry><entry></entry><entry>display the keycode for a key press</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="index-map">
<title>Index Menu</title>


<table id="tab-index-bindings">
<title>Default Index Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;break-thread&gt;</literal></entry><entry>#</entry><entry>break the thread in two</entry></row>
<row><entry><literal>&lt;change-folder&gt;</literal></entry><entry>c</entry><entry>open a different folder</entry></row>
<row><entry><literal>&lt;change-folder-readonly&gt;</literal></entry><entry>Esc c</entry><entry>open a different folder in read only mode</entry></row>
<row><entry><literal>&lt;change-newsgroup&gt;</literal></entry><entry></entry><entry>open a different newsgroup</entry></row>
<row><entry><literal>&lt;change-newsgroup-readonly&gt;</literal></entry><entry></entry><entry>open a different newsgroup in read only mode</entry></row>
<row><entry><literal>&lt;next-unread-mailbox&gt;</literal></entry><entry></entry><entry>open next mailbox with new mail</entry></row>
<row><entry><literal>&lt;collapse-thread&gt;</literal></entry><entry>Esc v</entry><entry>collapse/uncollapse current thread</entry></row>
<row><entry><literal>&lt;collapse-all&gt;</literal></entry><entry>Esc V</entry><entry>collapse/uncollapse all threads</entry></row>
<row><entry><literal>&lt;copy-message&gt;</literal></entry><entry>C</entry><entry>copy a message to a file/mailbox</entry></row>
<row><entry><literal>&lt;decode-copy&gt;</literal></entry><entry>Esc C</entry><entry>make decoded (text/plain) copy</entry></row>
<row><entry><literal>&lt;decode-save&gt;</literal></entry><entry>Esc s</entry><entry>make decoded copy (text/plain) and delete</entry></row>
<row><entry><literal>&lt;delete-message&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;delete-pattern&gt;</literal></entry><entry>D</entry><entry>delete messages matching a pattern</entry></row>
<row><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>^D</entry><entry>delete all messages in thread</entry></row>
<row><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>Esc d</entry><entry>delete all messages in subthread</entry></row>
<row><entry><literal>&lt;edit&gt;</literal></entry><entry>e</entry><entry>edit the raw message</entry></row>
<row><entry><literal>&lt;edit-label&gt;</literal></entry><entry>Y</entry><entry>add, change, or delete a message's label</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;forward-to-group&gt;</literal></entry><entry></entry><entry>forward to newsgroup</entry></row>
<row><entry><literal>&lt;followup-message&gt;</literal></entry><entry></entry><entry>followup to newsgroup</entry></row>
<row><entry><literal>&lt;get-children&gt;</literal></entry><entry></entry><entry>get all children of the current message</entry></row>
<row><entry><literal>&lt;get-message&gt;</literal></entry><entry></entry><entry>get message with Message-Id</entry></row>
<row><entry><literal>&lt;get-parent&gt;</literal></entry><entry></entry><entry>get parent of the current message</entry></row>
<row><entry><literal>&lt;reconstruct-thread&gt;</literal></entry><entry></entry><entry>reconstruct thread containing current message</entry></row>
<row><entry><literal>&lt;flag-message&gt;</literal></entry><entry>F</entry><entry>toggle a message's 'important' flag</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;fetch-mail&gt;</literal></entry><entry>G</entry><entry>retrieve mail from POP server</entry></row>
<row><entry><literal>&lt;imap-fetch-mail&gt;</literal></entry><entry></entry><entry>force retrieval of mail from IMAP server</entry></row>
<row><entry><literal>&lt;imap-logout-all&gt;</literal></entry><entry></entry><entry>logout from all IMAP servers</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;next-undeleted&gt;</literal></entry><entry>j</entry><entry>move to the next undeleted message</entry></row>
<row><entry><literal>&lt;previous-undeleted&gt;</literal></entry><entry>k</entry><entry>move to the previous undeleted message</entry></row>
<row><entry><literal>&lt;limit&gt;</literal></entry><entry>l</entry><entry>show only messages matching a pattern</entry></row>
<row><entry><literal>&lt;limit-current-thread&gt;</literal></entry><entry></entry><entry>limit view to current thread</entry></row>
<row><entry><literal>&lt;link-threads&gt;</literal></entry><entry>&amp;</entry><entry>link tagged message to the current one</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;toggle-new&gt;</literal></entry><entry>N</entry><entry>toggle a message's 'new' flag</entry></row>
<row><entry><literal>&lt;toggle-write&gt;</literal></entry><entry>%</entry><entry>toggle whether the mailbox will be rewritten</entry></row>
<row><entry><literal>&lt;next-thread&gt;</literal></entry><entry>^N</entry><entry>jump to the next thread</entry></row>
<row><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>Esc n</entry><entry>jump to the next subthread</entry></row>
<row><entry><literal>&lt;purge-message&gt;</literal></entry><entry></entry><entry>really delete the current entry, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;purge-thread&gt;</literal></entry><entry></entry><entry>really delete the current thread, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;query&gt;</literal></entry><entry>Q</entry><entry>query external program for addresses</entry></row>
<row><entry><literal>&lt;quit&gt;</literal></entry><entry>q</entry><entry>save changes to mailbox and quit</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;show-limit&gt;</literal></entry><entry>Esc l</entry><entry>show currently active limit pattern</entry></row>
<row><entry><literal>&lt;sort-mailbox&gt;</literal></entry><entry>o</entry><entry>sort messages</entry></row>
<row><entry><literal>&lt;sort-reverse&gt;</literal></entry><entry>O</entry><entry>sort messages in reverse order</entry></row>
<row><entry><literal>&lt;print-message&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;post-message&gt;</literal></entry><entry></entry><entry>post message to newsgroup</entry></row>
<row><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>^P</entry><entry>jump to previous thread</entry></row>
<row><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>Esc p</entry><entry>jump to previous subthread</entry></row>
<row><entry><literal>&lt;recall-message&gt;</literal></entry><entry>R</entry><entry>recall a postponed message</entry></row>
<row><entry><literal>&lt;read-thread&gt;</literal></entry><entry>^R</entry><entry>mark the current thread as read</entry></row>
<row><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>Esc r</entry><entry>mark the current subthread as read</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;compose-to-sender&gt;</literal></entry><entry></entry><entry>compose a new message to the sender</entry></row>
<row><entry><literal>&lt;save-message&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a mailbox/file</entry></row>
<row><entry><literal>&lt;tag-pattern&gt;</literal></entry><entry>T</entry><entry>tag messages matching a pattern</entry></row>
<row><entry><literal>&lt;tag-subthread&gt;</literal></entry><entry></entry><entry>tag the current subthread</entry></row>
<row><entry><literal>&lt;tag-thread&gt;</literal></entry><entry>Esc t</entry><entry>tag the current thread</entry></row>
<row><entry><literal>&lt;untag-pattern&gt;</literal></entry><entry>^T</entry><entry>untag messages matching a pattern</entry></row>
<row><entry><literal>&lt;undelete-message&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;undelete-pattern&gt;</literal></entry><entry>U</entry><entry>undelete messages matching a pattern</entry></row>
<row><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>Esc u</entry><entry>undelete all messages in subthread</entry></row>
<row><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>^U</entry><entry>undelete all messages in thread</entry></row>
<row><entry><literal>&lt;view-attachments&gt;</literal></entry><entry>v</entry><entry>show MIME attachments</entry></row>
<row><entry><literal>&lt;show-version&gt;</literal></entry><entry>V</entry><entry>show the Mutt version number and date</entry></row>
<row><entry><literal>&lt;set-flag&gt;</literal></entry><entry>w</entry><entry>set a status flag on a message</entry></row>
<row><entry><literal>&lt;clear-flag&gt;</literal></entry><entry>W</entry><entry>clear a status flag from a message</entry></row>
<row><entry><literal>&lt;toggle-read&gt;</literal></entry><entry></entry><entry>toggle view of read messages</entry></row>
<row><entry><literal>&lt;catchup&gt;</literal></entry><entry></entry><entry>mark all articles in newsgroup as read</entry></row>
<row><entry><literal>&lt;display-message&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>display a message</entry></row>
<row><entry><literal>&lt;display-message&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>display a message</entry></row>
<row><entry><literal>&lt;mark-message&gt;</literal></entry><entry>~</entry><entry>create a hotkey macro for the current message</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;sync-mailbox&gt;</literal></entry><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry><literal>&lt;display-address&gt;</literal></entry><entry>@</entry><entry>display full address of sender</entry></row>
<row><entry><literal>&lt;pipe-message&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;next-new&gt;</literal></entry><entry></entry><entry>jump to the next new message</entry></row>
<row><entry><literal>&lt;next-new-then-unread&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>jump to the next new or unread message</entry></row>
<row><entry><literal>&lt;previous-new&gt;</literal></entry><entry></entry><entry>jump to the previous new message</entry></row>
<row><entry><literal>&lt;previous-new-then-unread&gt;</literal></entry><entry>Esc &lt;Tab&gt;</entry><entry>jump to the previous new or unread message</entry></row>
<row><entry><literal>&lt;next-unread&gt;</literal></entry><entry></entry><entry>jump to the next unread message</entry></row>
<row><entry><literal>&lt;previous-unread&gt;</literal></entry><entry></entry><entry>jump to the previous unread message</entry></row>
<row><entry><literal>&lt;parent-message&gt;</literal></entry><entry>P</entry><entry>jump to parent message in thread</entry></row>
<row><entry><literal>&lt;root-message&gt;</literal></entry><entry></entry><entry>jump to root message in thread</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;mail-key&gt;</literal></entry><entry>Esc k</entry><entry>mail a PGP public key</entry></row>
<row><entry><literal>&lt;decrypt-copy&gt;</literal></entry><entry></entry><entry>make decrypted copy</entry></row>
<row><entry><literal>&lt;decrypt-save&gt;</literal></entry><entry></entry><entry>make decrypted copy and delete</entry></row>
<row><entry><literal>&lt;quasi-delete&gt;</literal></entry><entry></entry><entry>delete from mutt, don't touch on disk</entry></row>
<row><entry><literal>&lt;sidebar-next&gt;</literal></entry><entry></entry><entry>move the highlight to next mailbox</entry></row>
<row><entry><literal>&lt;sidebar-next-new&gt;</literal></entry><entry></entry><entry>move the highlight to next mailbox with new mail</entry></row>
<row><entry><literal>&lt;sidebar-open&gt;</literal></entry><entry></entry><entry>open highlighted mailbox</entry></row>
<row><entry><literal>&lt;sidebar-page-down&gt;</literal></entry><entry></entry><entry>scroll the sidebar down 1 page</entry></row>
<row><entry><literal>&lt;sidebar-page-up&gt;</literal></entry><entry></entry><entry>scroll the sidebar up 1 page</entry></row>
<row><entry><literal>&lt;sidebar-prev&gt;</literal></entry><entry></entry><entry>move the highlight to previous mailbox</entry></row>
<row><entry><literal>&lt;sidebar-prev-new&gt;</literal></entry><entry></entry><entry>move the highlight to previous mailbox with new mail</entry></row>
<row><entry><literal>&lt;sidebar-toggle-virtual&gt;</literal></entry><entry></entry><entry>toggle between mailboxes and virtual mailboxes</entry></row>
<row><entry><literal>&lt;sidebar-toggle-visible&gt;</literal></entry><entry></entry><entry>make the sidebar (in)visible</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pager-map">
<title>Pager Menu</title>


<table id="tab-pager-bindings">
<title>Default Pager Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;break-thread&gt;</literal></entry><entry>#</entry><entry>break the thread in two</entry></row>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;change-folder&gt;</literal></entry><entry>c</entry><entry>open a different folder</entry></row>
<row><entry><literal>&lt;change-folder-readonly&gt;</literal></entry><entry>Esc c</entry><entry>open a different folder in read only mode</entry></row>
<row><entry><literal>&lt;change-newsgroup&gt;</literal></entry><entry></entry><entry>open a different newsgroup</entry></row>
<row><entry><literal>&lt;change-newsgroup-readonly&gt;</literal></entry><entry></entry><entry>open a different newsgroup in read only mode</entry></row>
<row><entry><literal>&lt;next-unread-mailbox&gt;</literal></entry><entry></entry><entry>open next mailbox with new mail</entry></row>
<row><entry><literal>&lt;copy-message&gt;</literal></entry><entry>C</entry><entry>copy a message to a file/mailbox</entry></row>
<row><entry><literal>&lt;decode-copy&gt;</literal></entry><entry>Esc C</entry><entry>make decoded (text/plain) copy</entry></row>
<row><entry><literal>&lt;delete-message&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;delete-thread&gt;</literal></entry><entry>^D</entry><entry>delete all messages in thread</entry></row>
<row><entry><literal>&lt;delete-subthread&gt;</literal></entry><entry>Esc d</entry><entry>delete all messages in subthread</entry></row>
<row><entry><literal>&lt;set-flag&gt;</literal></entry><entry>w</entry><entry>set a status flag on a message</entry></row>
<row><entry><literal>&lt;clear-flag&gt;</literal></entry><entry>W</entry><entry>clear a status flag from a message</entry></row>
<row><entry><literal>&lt;edit&gt;</literal></entry><entry>e</entry><entry>edit the raw message</entry></row>
<row><entry><literal>&lt;edit-label&gt;</literal></entry><entry>Y</entry><entry>add, change, or delete a message's label</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;followup-message&gt;</literal></entry><entry></entry><entry>followup to newsgroup</entry></row>
<row><entry><literal>&lt;forward-to-group&gt;</literal></entry><entry></entry><entry>forward to newsgroup</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;flag-message&gt;</literal></entry><entry>F</entry><entry>toggle a message's 'important' flag</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;imap-fetch-mail&gt;</literal></entry><entry></entry><entry>force retrieval of mail from IMAP server</entry></row>
<row><entry><literal>&lt;imap-logout-all&gt;</literal></entry><entry></entry><entry>logout from all IMAP servers</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;next-undeleted&gt;</literal></entry><entry>j</entry><entry>move to the next undeleted message</entry></row>
<row><entry><literal>&lt;next-entry&gt;</literal></entry><entry>J</entry><entry>move to the next entry</entry></row>
<row><entry><literal>&lt;previous-undeleted&gt;</literal></entry><entry>k</entry><entry>move to the previous undeleted message</entry></row>
<row><entry><literal>&lt;previous-entry&gt;</literal></entry><entry>K</entry><entry>move to the previous entry</entry></row>
<row><entry><literal>&lt;link-threads&gt;</literal></entry><entry>&amp;</entry><entry>link tagged message to the current one</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;redraw-screen&gt;</literal></entry><entry>^L</entry><entry>clear and redraw the screen</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;mark-as-new&gt;</literal></entry><entry>N</entry><entry>toggle a message's 'new' flag</entry></row>
<row><entry><literal>&lt;search-next&gt;</literal></entry><entry>n</entry><entry>search for next match</entry></row>
<row><entry><literal>&lt;next-thread&gt;</literal></entry><entry>^N</entry><entry>jump to the next thread</entry></row>
<row><entry><literal>&lt;next-subthread&gt;</literal></entry><entry>Esc n</entry><entry>jump to the next subthread</entry></row>
<row><entry><literal>&lt;sort-mailbox&gt;</literal></entry><entry>o</entry><entry>sort messages</entry></row>
<row><entry><literal>&lt;sort-reverse&gt;</literal></entry><entry>O</entry><entry>sort messages in reverse order</entry></row>
<row><entry><literal>&lt;print-message&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;post-message&gt;</literal></entry><entry></entry><entry>post message to newsgroup</entry></row>
<row><entry><literal>&lt;previous-thread&gt;</literal></entry><entry>^P</entry><entry>jump to previous thread</entry></row>
<row><entry><literal>&lt;previous-subthread&gt;</literal></entry><entry>Esc p</entry><entry>jump to previous subthread</entry></row>
<row><entry><literal>&lt;purge-message&gt;</literal></entry><entry></entry><entry>really delete the current entry, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;purge-thread&gt;</literal></entry><entry></entry><entry>really delete the current thread, bypassing the trash folder</entry></row>
<row><entry><literal>&lt;quit&gt;</literal></entry><entry>Q</entry><entry>save changes to mailbox and quit</entry></row>
<row><entry><literal>&lt;exit&gt;</literal></entry><entry>q</entry><entry>exit this menu</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;recall-message&gt;</literal></entry><entry>R</entry><entry>recall a postponed message</entry></row>
<row><entry><literal>&lt;reconstruct-thread&gt;</literal></entry><entry></entry><entry>reconstruct thread containing current message</entry></row>
<row><entry><literal>&lt;read-thread&gt;</literal></entry><entry>^R</entry><entry>mark the current thread as read</entry></row>
<row><entry><literal>&lt;read-subthread&gt;</literal></entry><entry>Esc r</entry><entry>mark the current subthread as read</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;compose-to-sender&gt;</literal></entry><entry></entry><entry>compose a new message to the sender</entry></row>
<row><entry><literal>&lt;save-message&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a mailbox/file</entry></row>
<row><entry><literal>&lt;skip-quoted&gt;</literal></entry><entry>S</entry><entry>skip beyond quoted text</entry></row>
<row><entry><literal>&lt;decode-save&gt;</literal></entry><entry>Esc s</entry><entry>make decoded copy (text/plain) and delete</entry></row>
<row><entry><literal>&lt;tag-message&gt;</literal></entry><entry>t</entry><entry>tag the current entry</entry></row>
<row><entry><literal>&lt;toggle-quoted&gt;</literal></entry><entry>T</entry><entry>toggle display of quoted text</entry></row>
<row><entry><literal>&lt;undelete-message&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;undelete-subthread&gt;</literal></entry><entry>Esc u</entry><entry>undelete all messages in subthread</entry></row>
<row><entry><literal>&lt;undelete-thread&gt;</literal></entry><entry>^U</entry><entry>undelete all messages in thread</entry></row>
<row><entry><literal>&lt;view-attachments&gt;</literal></entry><entry>v</entry><entry>show MIME attachments</entry></row>
<row><entry><literal>&lt;show-version&gt;</literal></entry><entry>V</entry><entry>show the Mutt version number and date</entry></row>
<row><entry><literal>&lt;search-toggle&gt;</literal></entry><entry>\\</entry><entry>toggle search pattern coloring</entry></row>
<row><entry><literal>&lt;display-address&gt;</literal></entry><entry>@</entry><entry>display full address of sender</entry></row>
<row><entry><literal>&lt;next-new&gt;</literal></entry><entry></entry><entry>jump to the next new message</entry></row>
<row><entry><literal>&lt;next-new-then-unread&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>jump to the next new or unread message</entry></row>
<row><entry><literal>&lt;pipe-message&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;help&gt;</literal></entry><entry>?</entry><entry>this screen</entry></row>
<row><entry><literal>&lt;next-page&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>move to the next page</entry></row>
<row><entry><literal>&lt;previous-page&gt;</literal></entry><entry>-</entry><entry>move to the previous page</entry></row>
<row><entry><literal>&lt;top&gt;</literal></entry><entry>^</entry><entry>jump to the top of the message</entry></row>
<row><entry><literal>&lt;sync-mailbox&gt;</literal></entry><entry>$</entry><entry>save changes to mailbox</entry></row>
<row><entry><literal>&lt;shell-escape&gt;</literal></entry><entry>!</entry><entry>invoke a command in a subshell</entry></row>
<row><entry><literal>&lt;enter-command&gt;</literal></entry><entry>:</entry><entry>enter a muttrc command</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;search&gt;</literal></entry><entry>/</entry><entry>search for a regular expression</entry></row>
<row><entry><literal>&lt;search-reverse&gt;</literal></entry><entry>Esc /</entry><entry>search backwards for a regular expression</entry></row>
<row><entry><literal>&lt;search-opposite&gt;</literal></entry><entry></entry><entry>search for next match in opposite direction</entry></row>
<row><entry><literal>&lt;next-line&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>scroll down one line</entry></row>
<row><entry><literal>&lt;next-line&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>scroll down one line</entry></row>
<row><entry><literal>&lt;jump&gt;</literal></entry><entry></entry><entry>jump to an index number</entry></row>
<row><entry><literal>&lt;next-unread&gt;</literal></entry><entry></entry><entry>jump to the next unread message</entry></row>
<row><entry><literal>&lt;previous-new&gt;</literal></entry><entry></entry><entry>jump to the previous new message</entry></row>
<row><entry><literal>&lt;previous-new-then-unread&gt;</literal></entry><entry></entry><entry>jump to the previous new or unread message</entry></row>
<row><entry><literal>&lt;previous-unread&gt;</literal></entry><entry></entry><entry>jump to the previous unread message</entry></row>
<row><entry><literal>&lt;half-up&gt;</literal></entry><entry></entry><entry>scroll up 1/2 page</entry></row>
<row><entry><literal>&lt;half-down&gt;</literal></entry><entry></entry><entry>scroll down 1/2 page</entry></row>
<row><entry><literal>&lt;previous-line&gt;</literal></entry><entry></entry><entry>scroll up one line</entry></row>
<row><entry><literal>&lt;bottom&gt;</literal></entry><entry></entry><entry>jump to the bottom of the message</entry></row>
<row><entry><literal>&lt;parent-message&gt;</literal></entry><entry>P</entry><entry>jump to parent message in thread</entry></row>
<row><entry><literal>&lt;root-message&gt;</literal></entry><entry></entry><entry>jump to root message in thread</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;mail-key&gt;</literal></entry><entry>Esc k</entry><entry>mail a PGP public key</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;decrypt-copy&gt;</literal></entry><entry></entry><entry>make decrypted copy</entry></row>
<row><entry><literal>&lt;decrypt-save&gt;</literal></entry><entry></entry><entry>make decrypted copy and delete</entry></row>
<row><entry><literal>&lt;what-key&gt;</literal></entry><entry></entry><entry>display the keycode for a key press</entry></row>
<row><entry><literal>&lt;quasi-delete&gt;</literal></entry><entry></entry><entry>delete from mutt, don't touch on disk</entry></row>
<row><entry><literal>&lt;sidebar-next&gt;</literal></entry><entry></entry><entry>move the highlight to next mailbox</entry></row>
<row><entry><literal>&lt;sidebar-next-new&gt;</literal></entry><entry></entry><entry>move the highlight to next mailbox with new mail</entry></row>
<row><entry><literal>&lt;sidebar-open&gt;</literal></entry><entry></entry><entry>open highlighted mailbox</entry></row>
<row><entry><literal>&lt;sidebar-page-down&gt;</literal></entry><entry></entry><entry>scroll the sidebar down 1 page</entry></row>
<row><entry><literal>&lt;sidebar-page-up&gt;</literal></entry><entry></entry><entry>scroll the sidebar up 1 page</entry></row>
<row><entry><literal>&lt;sidebar-prev&gt;</literal></entry><entry></entry><entry>move the highlight to previous mailbox</entry></row>
<row><entry><literal>&lt;sidebar-prev-new&gt;</literal></entry><entry></entry><entry>move the highlight to previous mailbox with new mail</entry></row>
<row><entry><literal>&lt;sidebar-toggle-virtual&gt;</literal></entry><entry></entry><entry>toggle between mailboxes and virtual mailboxes</entry></row>
<row><entry><literal>&lt;sidebar-toggle-visible&gt;</literal></entry><entry></entry><entry>make the sidebar (in)visible</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="alias-map">
<title>Alias Menu</title>


<table id="tab-alias-bindings">
<title>Default Alias Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="query-map">
<title>Query Menu</title>


<table id="tab-query-bindings">
<title>Default Query Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;create-alias&gt;</literal></entry><entry>a</entry><entry>create an alias from a message sender</entry></row>
<row><entry><literal>&lt;mail&gt;</literal></entry><entry>m</entry><entry>compose a new mail message</entry></row>
<row><entry><literal>&lt;query&gt;</literal></entry><entry>Q</entry><entry>query external program for addresses</entry></row>
<row><entry><literal>&lt;query-append&gt;</literal></entry><entry>A</entry><entry>append new query results to current results</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="attachment-map">
<title>Attachment Menu</title>


<table id="tab-attachment-bindings">
<title>Default Attachment Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;bounce-message&gt;</literal></entry><entry>b</entry><entry>remail a message to another user</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^E</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;followup-message&gt;</literal></entry><entry></entry><entry>followup to newsgroup</entry></row>
<row><entry><literal>&lt;forward-to-group&gt;</literal></entry><entry></entry><entry>forward to newsgroup</entry></row>
<row><entry><literal>&lt;print-entry&gt;</literal></entry><entry>p</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;save-entry&gt;</literal></entry><entry>s</entry><entry>save message/attachment to a mailbox/file</entry></row>
<row><entry><literal>&lt;pipe-entry&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;view-mailcap&gt;</literal></entry><entry>m</entry><entry>force viewing of attachment using mailcap</entry></row>
<row><entry><literal>&lt;reply&gt;</literal></entry><entry>r</entry><entry>reply to a message</entry></row>
<row><entry><literal>&lt;resend-message&gt;</literal></entry><entry>Esc e</entry><entry>use the current message as a template for a new one</entry></row>
<row><entry><literal>&lt;group-reply&gt;</literal></entry><entry>g</entry><entry>reply to all recipients</entry></row>
<row><entry><literal>&lt;list-reply&gt;</literal></entry><entry>L</entry><entry>reply to specified mailing list</entry></row>
<row><entry><literal>&lt;forward-message&gt;</literal></entry><entry>f</entry><entry>forward a message with comments</entry></row>
<row><entry><literal>&lt;view-text&gt;</literal></entry><entry>T</entry><entry>view attachment as text</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>
<row><entry><literal>&lt;collapse-parts&gt;</literal></entry><entry>v</entry><entry>Toggle display of subparts</entry></row>
<row><entry><literal>&lt;check-traditional-pgp&gt;</literal></entry><entry>Esc P</entry><entry>check for classic PGP</entry></row>
<row><entry><literal>&lt;extract-keys&gt;</literal></entry><entry>^K</entry><entry>extract supported public keys</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="compose-map">
<title>Compose Menu</title>


<table id="tab-compose-bindings">
<title>Default Compose Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;attach-file&gt;</literal></entry><entry>a</entry><entry>attach file(s) to this message</entry></row>
<row><entry><literal>&lt;attach-message&gt;</literal></entry><entry>A</entry><entry>attach message(s) to this message</entry></row>
<row><entry><literal>&lt;attach-news-message&gt;</literal></entry><entry></entry><entry>attach news article(s) to this message</entry></row>
<row><entry><literal>&lt;edit-bcc&gt;</literal></entry><entry>b</entry><entry>edit the BCC list</entry></row>
<row><entry><literal>&lt;edit-cc&gt;</literal></entry><entry>c</entry><entry>edit the CC list</entry></row>
<row><entry><literal>&lt;copy-file&gt;</literal></entry><entry>C</entry><entry>save message/attachment to a mailbox/file</entry></row>
<row><entry><literal>&lt;detach-file&gt;</literal></entry><entry>D</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;toggle-disposition&gt;</literal></entry><entry>^D</entry><entry>toggle disposition between inline/attachment</entry></row>
<row><entry><literal>&lt;edit-description&gt;</literal></entry><entry>d</entry><entry>edit attachment description</entry></row>
<row><entry><literal>&lt;edit-message&gt;</literal></entry><entry>e</entry><entry>edit the message</entry></row>
<row><entry><literal>&lt;edit-headers&gt;</literal></entry><entry>E</entry><entry>edit the message with headers</entry></row>
<row><entry><literal>&lt;edit-file&gt;</literal></entry><entry>^X e</entry><entry>edit the file to be attached</entry></row>
<row><entry><literal>&lt;edit-encoding&gt;</literal></entry><entry>^E</entry><entry>edit attachment transfer-encoding</entry></row>
<row><entry><literal>&lt;edit-from&gt;</literal></entry><entry>Esc f</entry><entry>edit the from field</entry></row>
<row><entry><literal>&lt;edit-fcc&gt;</literal></entry><entry>f</entry><entry>enter a file to save a copy of this message in</entry></row>
<row><entry><literal>&lt;filter-entry&gt;</literal></entry><entry>F</entry><entry>filter attachment through a shell command</entry></row>
<row><entry><literal>&lt;get-attachment&gt;</literal></entry><entry>G</entry><entry>get a temporary copy of an attachment</entry></row>
<row><entry><literal>&lt;display-toggle-weed&gt;</literal></entry><entry>h</entry><entry>display message and toggle header weeding</entry></row>
<row><entry><literal>&lt;ispell&gt;</literal></entry><entry>i</entry><entry>run ispell on the message</entry></row>
<row><entry><literal>&lt;print-entry&gt;</literal></entry><entry>l</entry><entry>print the current entry</entry></row>
<row><entry><literal>&lt;edit-mime&gt;</literal></entry><entry>m</entry><entry>edit attachment using mailcap entry</entry></row>
<row><entry><literal>&lt;new-mime&gt;</literal></entry><entry>n</entry><entry>compose new attachment using mailcap entry</entry></row>
<row><entry><literal>&lt;edit-newsgroups&gt;</literal></entry><entry></entry><entry>edit the newsgroups list</entry></row>
<row><entry><literal>&lt;edit-followup-to&gt;</literal></entry><entry></entry><entry>edit the Followup-To field</entry></row>
<row><entry><literal>&lt;edit-x-comment-to&gt;</literal></entry><entry></entry><entry>edit the X-Comment-To field</entry></row>
<row><entry><literal>&lt;postpone-message&gt;</literal></entry><entry>P</entry><entry>save this message to send later</entry></row>
<row><entry><literal>&lt;edit-reply-to&gt;</literal></entry><entry>r</entry><entry>edit the Reply-To field</entry></row>
<row><entry><literal>&lt;rename-attachment&gt;</literal></entry><entry>^O</entry><entry>send attachment with a different name</entry></row>
<row><entry><literal>&lt;rename-file&gt;</literal></entry><entry>R</entry><entry>rename/move an attached file</entry></row>
<row><entry><literal>&lt;edit-subject&gt;</literal></entry><entry>s</entry><entry>edit the subject of this message</entry></row>
<row><entry><literal>&lt;edit-to&gt;</literal></entry><entry>t</entry><entry>edit the TO list</entry></row>
<row><entry><literal>&lt;edit-type&gt;</literal></entry><entry>^T</entry><entry>edit attachment content type</entry></row>
<row><entry><literal>&lt;write-fcc&gt;</literal></entry><entry>w</entry><entry>write the message to a folder</entry></row>
<row><entry><literal>&lt;toggle-unlink&gt;</literal></entry><entry>u</entry><entry>toggle whether to delete file after sending it</entry></row>
<row><entry><literal>&lt;toggle-recode&gt;</literal></entry><entry></entry><entry>toggle recoding of this attachment</entry></row>
<row><entry><literal>&lt;update-encoding&gt;</literal></entry><entry>U</entry><entry>update an attachment's encoding info</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;view-attach&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>view attachment using mailcap entry if necessary</entry></row>
<row><entry><literal>&lt;send-message&gt;</literal></entry><entry>y</entry><entry>send the message</entry></row>
<row><entry><literal>&lt;pipe-entry&gt;</literal></entry><entry>|</entry><entry>pipe message/attachment to a shell command</entry></row>
<row><entry><literal>&lt;attach-key&gt;</literal></entry><entry>Esc k</entry><entry>attach a PGP public key</entry></row>
<row><entry><literal>&lt;pgp-menu&gt;</literal></entry><entry>p</entry><entry>show PGP options</entry></row>
<row><entry><literal>&lt;forget-passphrase&gt;</literal></entry><entry>^F</entry><entry>wipe passphrase(s) from memory</entry></row>
<row><entry><literal>&lt;smime-menu&gt;</literal></entry><entry>S</entry><entry>show S/MIME options</entry></row>
<row><entry><literal>&lt;mix&gt;</literal></entry><entry>M</entry><entry>send the message through a mixmaster remailer chain</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="postpone-map">
<title>Postpone Menu</title>


<table id="tab-postpone-bindings">
<title>Default Postpone Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;delete-entry&gt;</literal></entry><entry>d</entry><entry>delete the current entry</entry></row>
<row><entry><literal>&lt;undelete-entry&gt;</literal></entry><entry>u</entry><entry>undelete the current entry</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="browser-map">
<title>Browser Menu</title>


<table id="tab-browser-bindings">
<title>Default Browser Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;change-dir&gt;</literal></entry><entry>c</entry><entry>change directories</entry></row>
<row><entry><literal>&lt;display-filename&gt;</literal></entry><entry>@</entry><entry>display the currently selected file's name</entry></row>
<row><entry><literal>&lt;enter-mask&gt;</literal></entry><entry>m</entry><entry>enter a file mask</entry></row>
<row><entry><literal>&lt;sort&gt;</literal></entry><entry>o</entry><entry>sort messages</entry></row>
<row><entry><literal>&lt;sort-reverse&gt;</literal></entry><entry>O</entry><entry>sort messages in reverse order</entry></row>
<row><entry><literal>&lt;select-new&gt;</literal></entry><entry>N</entry><entry>select a new file in this directory</entry></row>
<row><entry><literal>&lt;check-new&gt;</literal></entry><entry></entry><entry>check mailboxes for new mail</entry></row>
<row><entry><literal>&lt;toggle-mailboxes&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>toggle whether to browse mailboxes or all files</entry></row>
<row><entry><literal>&lt;reload-active&gt;</literal></entry><entry></entry><entry>load list of all newsgroups from NNTP server</entry></row>
<row><entry><literal>&lt;subscribe-pattern&gt;</literal></entry><entry></entry><entry>subscribe to newsgroups matching a pattern</entry></row>
<row><entry><literal>&lt;unsubscribe-pattern&gt;</literal></entry><entry></entry><entry>unsubscribe from newsgroups matching a pattern</entry></row>
<row><entry><literal>&lt;catchup&gt;</literal></entry><entry></entry><entry>mark all articles in newsgroup as read</entry></row>
<row><entry><literal>&lt;uncatchup&gt;</literal></entry><entry></entry><entry>mark all articles in newsgroup as unread</entry></row>
<row><entry><literal>&lt;view-file&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>view file</entry></row>
<row><entry><literal>&lt;buffy-list&gt;</literal></entry><entry>.</entry><entry>list mailboxes with new mail</entry></row>
<row><entry><literal>&lt;create-mailbox&gt;</literal></entry><entry>C</entry><entry>create a new mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;delete-mailbox&gt;</literal></entry><entry>d</entry><entry>delete the current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;rename-mailbox&gt;</literal></entry><entry>r</entry><entry>rename the current mailbox (IMAP only)</entry></row>
<row><entry><literal>&lt;subscribe&gt;</literal></entry><entry>s</entry><entry>subscribe to current mbox (IMAP/NNTP only)</entry></row>
<row><entry><literal>&lt;unsubscribe&gt;</literal></entry><entry>u</entry><entry>unsubscribe from current mbox (IMAP/NNTP only)</entry></row>
<row><entry><literal>&lt;toggle-subscribed&gt;</literal></entry><entry>T</entry><entry>toggle view all/subscribed mailboxes (IMAP only)</entry></row>
<row><entry><literal>&lt;goto-folder&gt;</literal></entry><entry>=</entry><entry>swap the current folder position with $folder if it exists</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pgp-map">
<title>Pgp Menu</title>


<table id="tab-pgp-bindings">
<title>Default Pgp Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;verify-key&gt;</literal></entry><entry>c</entry><entry>verify a PGP public key</entry></row>
<row><entry><literal>&lt;view-name&gt;</literal></entry><entry>%</entry><entry>view the key's user id</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="smime-map">
<title>Smime Menu</title>


<table id="tab-smime-bindings">
<title>Default Smime Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;verify-key&gt;</literal></entry><entry>c</entry><entry>verify a PGP public key</entry></row>
<row><entry><literal>&lt;view-name&gt;</literal></entry><entry>%</entry><entry>view the key's user id</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="mixmaster-map">
<title>Mixmaster Menu</title>


<table id="tab-mixmaster-bindings">
<title>Default Mixmaster Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;accept&gt;</literal></entry><entry>&lt;Enter&gt;</entry><entry>accept the chain constructed</entry></row>
<row><entry><literal>&lt;accept&gt;</literal></entry><entry>&lt;Return&gt;</entry><entry>accept the chain constructed</entry></row>
<row><entry><literal>&lt;append&gt;</literal></entry><entry>a</entry><entry>append a remailer to the chain</entry></row>
<row><entry><literal>&lt;insert&gt;</literal></entry><entry>i</entry><entry>insert a remailer into the chain</entry></row>
<row><entry><literal>&lt;delete&gt;</literal></entry><entry>d</entry><entry>delete a remailer from the chain</entry></row>
<row><entry><literal>&lt;chain-prev&gt;</literal></entry><entry>&lt;Left&gt;</entry><entry>select the previous element of the chain</entry></row>
<row><entry><literal>&lt;chain-next&gt;</literal></entry><entry>&lt;Right&gt;</entry><entry>select the next element of the chain</entry></row>

</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="editor-map">
<title>Editor Menu</title>


<table id="tab-editor-bindings">
<title>Default Editor Menu Bindings</title>
<tgroup cols="3">
<thead>
<row><entry>Function</entry><entry>Default key</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><literal>&lt;bol&gt;</literal></entry><entry>^A</entry><entry>jump to the beginning of the line</entry></row>
<row><entry><literal>&lt;backward-char&gt;</literal></entry><entry>^B</entry><entry>move the cursor one character to the left</entry></row>
<row><entry><literal>&lt;backward-word&gt;</literal></entry><entry>Esc b</entry><entry>move the cursor to the beginning of the word</entry></row>
<row><entry><literal>&lt;capitalize-word&gt;</literal></entry><entry>Esc c</entry><entry>capitalize the word</entry></row>
<row><entry><literal>&lt;downcase-word&gt;</literal></entry><entry>Esc l</entry><entry>convert the word to lower case</entry></row>
<row><entry><literal>&lt;upcase-word&gt;</literal></entry><entry>Esc u</entry><entry>convert the word to upper case</entry></row>
<row><entry><literal>&lt;delete-char&gt;</literal></entry><entry>^D</entry><entry>delete the char under the cursor</entry></row>
<row><entry><literal>&lt;eol&gt;</literal></entry><entry>^E</entry><entry>jump to the end of the line</entry></row>
<row><entry><literal>&lt;forward-char&gt;</literal></entry><entry>^F</entry><entry>move the cursor one character to the right</entry></row>
<row><entry><literal>&lt;forward-word&gt;</literal></entry><entry>Esc f</entry><entry>move the cursor to the end of the word</entry></row>
<row><entry><literal>&lt;backspace&gt;</literal></entry><entry>&lt;Backspace&gt;</entry><entry>delete the char in front of the cursor</entry></row>
<row><entry><literal>&lt;kill-eol&gt;</literal></entry><entry>^K</entry><entry>delete chars from cursor to end of line</entry></row>
<row><entry><literal>&lt;kill-eow&gt;</literal></entry><entry>Esc d</entry><entry>delete chars from the cursor to the end of the word</entry></row>
<row><entry><literal>&lt;kill-line&gt;</literal></entry><entry>^U</entry><entry>delete all chars on the line</entry></row>
<row><entry><literal>&lt;quote-char&gt;</literal></entry><entry>^V</entry><entry>quote the next typed key</entry></row>
<row><entry><literal>&lt;kill-word&gt;</literal></entry><entry>^W</entry><entry>delete the word in front of the cursor</entry></row>
<row><entry><literal>&lt;complete&gt;</literal></entry><entry>&lt;Tab&gt;</entry><entry>complete filename or alias</entry></row>
<row><entry><literal>&lt;complete-query&gt;</literal></entry><entry>^T</entry><entry>complete address with query</entry></row>
<row><entry><literal>&lt;buffy-cycle&gt;</literal></entry><entry>&lt;Space&gt;</entry><entry>cycle among incoming mailboxes</entry></row>
<row><entry><literal>&lt;history-up&gt;</literal></entry><entry></entry><entry>scroll up through the history list</entry></row>
<row><entry><literal>&lt;history-down&gt;</literal></entry><entry></entry><entry>scroll down through the history list</entry></row>
<row><entry><literal>&lt;transpose-chars&gt;</literal></entry><entry></entry><entry>transpose character under cursor with previous</entry></row>

</tbody>
</tgroup>
</table>

</sect2>


    </sect1>
  </chapter>

  <chapter id="guide/miscellany">
    <title>Miscellany</title>

    <sect1 id="acknowledgements">
      <title>Acknowledgements</title>
      <para>Kari Hurtta
      <email>kari.hurtta@fmi.fi</email> co-developed the original MIME parsing
      code back in the ELM-ME days.</para>
      <para>The following people have been very helpful to the development of
      Mutt:</para>
      <itemizedlist>
        <listitem>
          <para>Vikas Agnihotri
          <email>vikasa@writeme.com</email></para>
        </listitem>
        <listitem>
          <para>Francois Berjon
          <email>Francois.Berjon@aar.alcatel-alsthom.fr</email></para>
        </listitem>
        <listitem>
          <para>Aric Blumer
          <email>aric@fore.com</email></para>
        </listitem>
        <listitem>
          <para>John Capo
          <email>jc@irbs.com</email></para>
        </listitem>
        <listitem>
          <para>David Champion
          <email>dgc@uchicago.edu</email></para>
        </listitem>
        <listitem>
          <para>Brendan Cully
          <email>brendan@kublai.com</email></para>
        </listitem>
        <listitem>
          <para>Liviu Daia
          <email>daia@stoilow.imar.ro</email></para>
        </listitem>
        <listitem>
          <para>Thomas E. Dickey
          <email>dickey@herndon4.his.com</email></para>
        </listitem>
        <listitem>
          <para>David DeSimone
          <email>fox@convex.hp.com</email></para>
        </listitem>
        <listitem>
          <para>Nickolay N. Dudorov
          <email>nnd@wint.itfs.nsk.su</email></para>
        </listitem>
        <listitem>
          <para>Ruslan Ermilov
          <email>ru@freebsd.org</email></para>
        </listitem>
        <listitem>
          <para>Edmund Grimley Evans
          <email>edmundo@rano.org</email></para>
        </listitem>
        <listitem>
          <para>Michael Finken
          <email>finken@conware.de</email></para>
        </listitem>
        <listitem>
          <para>Sven Guckes
          <email>guckes@math.fu-berlin.de</email></para>
        </listitem>
        <listitem>
          <para>Lars Hecking
          <email>lhecking@nmrc.ie</email></para>
        </listitem>
        <listitem>
          <para>Mark Holloman
          <email>holloman@nando.net</email></para>
        </listitem>
        <listitem>
          <para>Andreas Holzmann
          <email>holzmann@fmi.uni-passau.de</email></para>
        </listitem>
        <listitem>
          <para>Marco d'Itri
          <email>md@linux.it</email></para>
        </listitem>
        <listitem>
          <para>Björn Jacke
          <email>bjacke@suse.com</email></para>
        </listitem>
        <listitem>
          <para>Byrial Jensen
          <email>byrial@image.dk</email></para>
        </listitem>
        <listitem>
          <para>David Jeske
          <email>jeske@igcom.net</email></para>
        </listitem>
        <listitem>
          <para>Christophe Kalt
          <email>kalt@hugo.int-evry.fr</email></para>
        </listitem>
        <listitem>
          <para>Tommi Komulainen
          <email>Tommi.Komulainen@iki.fi</email></para>
        </listitem>
        <listitem>
          <para>Felix von Leitner (a.k.a
          <quote>Fefe</quote>)
          <email>leitner@math.fu-berlin.de</email></para>
        </listitem>
        <listitem>
          <para>Brandon Long
          <email>blong@fiction.net</email></para>
        </listitem>
        <listitem>
          <para>Jimmy Mäkelä
          <email>jmy@flashback.net</email></para>
        </listitem>
        <listitem>
          <para>Lars Marowsky-Bree
          <email>lmb@pointer.in-minden.de</email></para>
        </listitem>
        <listitem>
          <para>Thomas
          <quote>Mike</quote> Michlmayr
          <email>mike@cosy.sbg.ac.at</email></para>
        </listitem>
        <listitem>
          <para>Andrew W. Nosenko
          <email>awn@bcs.zp.ua</email></para>
        </listitem>
        <listitem>
          <para>David O'Brien
          <email>obrien@Nuxi.cs.ucdavis.edu</email></para>
        </listitem>
        <listitem>
          <para>Clint Olsen
          <email>olsenc@ichips.intel.com</email></para>
        </listitem>
        <listitem>
          <para>Park Myeong Seok
          <email>pms@romance.kaist.ac.kr</email></para>
        </listitem>
        <listitem>
          <para>Thomas Parmelan
          <email>tom@ankh.fr.eu.org</email></para>
        </listitem>
        <listitem>
          <para>Ollivier Robert
          <email>roberto@keltia.freenix.fr</email></para>
        </listitem>
        <listitem>
          <para>Thomas Roessler
          <email>roessler@does-not-exist.org</email></para>
        </listitem>
        <listitem>
          <para>Roland Rosenfeld
          <email>roland@spinnaker.de</email></para>
        </listitem>
        <listitem>
          <para>Rocco Rutte
          <email>pdmef@gmx.net</email></para>
        </listitem>
        <listitem>
          <para>TAKIZAWA Takashi
          <email>taki@luna.email.ne.jp</email></para>
        </listitem>
        <listitem>
          <para>Allain Thivillon
          <email>Allain.Thivillon@alma.fr</email></para>
        </listitem>
        <listitem>
          <para>Gero Treuner
          <email>gero@70t.de</email></para>
        </listitem>
        <listitem>
          <para>Vsevolod Volkov
          <email>vvv@lucky.net</email></para>
        </listitem>
        <listitem>
          <para>Ken Weinert
          <email>kenw@ihs.com</email></para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="about">
      <title>About This Document</title>
      <para>This document was written in
      <ulink url="http://docbook.sourceforge.net">DocBook</ulink>, and then
      rendered using the
      <ulink url="http://xmlsoft.org/XSLT/">Gnome XSLT toolkit</ulink>.</para>
    </sect1>
  </chapter>
</book>

